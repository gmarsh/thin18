
thin18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  000026c4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000188  20000430  00002af4  00010430  2**2
                  ALLOC
  3 .stack        00000400  200005b8  00002c7c  00010430  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d8d5  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d46  00000000  00000000  0001dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000652  00000000  00000000  0001eace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d8  00000000  00000000  0001f120  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  0001f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c11c  00000000  00000000  0001f430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000338b  00000000  00000000  0002b54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00044dcd  00000000  00000000  0002e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006e0  00000000  00000000  000736a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200009b8 	.word	0x200009b8
       4:	0000093d 	.word	0x0000093d
       8:	000009d1 	.word	0x000009d1
       c:	000009d1 	.word	0x000009d1
	...
      2c:	000009d1 	.word	0x000009d1
	...
      38:	000009d1 	.word	0x000009d1
      3c:	000009d1 	.word	0x000009d1
      40:	000009d1 	.word	0x000009d1
      44:	000009d1 	.word	0x000009d1
      48:	000009d1 	.word	0x000009d1
      4c:	000009d1 	.word	0x000009d1
      50:	000009d1 	.word	0x000009d1
      54:	000009d1 	.word	0x000009d1
      58:	000009d1 	.word	0x000009d1
      5c:	000009d1 	.word	0x000009d1
      60:	000009d1 	.word	0x000009d1
      64:	00000559 	.word	0x00000559
      68:	000009d1 	.word	0x000009d1
      6c:	000009d1 	.word	0x000009d1
      70:	000009d1 	.word	0x000009d1
      74:	00000b09 	.word	0x00000b09
      78:	00000c79 	.word	0x00000c79
      7c:	000009d1 	.word	0x000009d1
      80:	000009d1 	.word	0x000009d1
      84:	000009d1 	.word	0x000009d1
      88:	000009d1 	.word	0x000009d1
	...
      94:	000009d1 	.word	0x000009d1
      98:	000009d1 	.word	0x000009d1
      9c:	000009d1 	.word	0x000009d1
      a0:	000009d1 	.word	0x000009d1

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000430 	.word	0x20000430
      c4:	00000000 	.word	0x00000000
      c8:	000026c4 	.word	0x000026c4

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	000026c4 	.word	0x000026c4
      f8:	20000434 	.word	0x20000434
      fc:	000026c4 	.word	0x000026c4
     100:	00000000 	.word	0x00000000

00000104 <cal_update>:
#define CAPTURE_FIFO_MASK (CAPTURE_FIFO_SIZE-1)
#define CAPTURE_FIFO_EMPTY (capture_fifo_readptr == capture_fifo_writeptr)
#define CAPTURE_FIFO_FULL (((capture_fifo_readptr - capture_fifo_writeptr) & CAPTURE_FIFO_MASK) == 1)


void cal_update(void) {
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
	
	// check for validity by checking for overflow flag, indicating timer is clocked.
	if (TC2->COUNT32.INTFLAG.bit.OVF) {
     10a:	4b3d      	ldr	r3, [pc, #244]	; (200 <cal_update+0xfc>)
     10c:	7b9b      	ldrb	r3, [r3, #14]
     10e:	2201      	movs	r2, #1
     110:	4013      	ands	r3, r2
     112:	b2db      	uxtb	r3, r3
     114:	2b00      	cmp	r3, #0
     116:	d007      	beq.n	128 <cal_update+0x24>
		cal_valid_counter = CAL_VALID_TIMEOUT;
     118:	4b3a      	ldr	r3, [pc, #232]	; (204 <cal_update+0x100>)
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	00d2      	lsls	r2, r2, #3
     11e:	801a      	strh	r2, [r3, #0]
		TC2->COUNT32.INTFLAG.reg = TC_INTFLAG_OVF;
     120:	4b37      	ldr	r3, [pc, #220]	; (200 <cal_update+0xfc>)
     122:	2201      	movs	r2, #1
     124:	739a      	strb	r2, [r3, #14]
     126:	e00b      	b.n	140 <cal_update+0x3c>
	} else {
		if (cal_valid_counter) cal_valid_counter--;
     128:	4b36      	ldr	r3, [pc, #216]	; (204 <cal_update+0x100>)
     12a:	881b      	ldrh	r3, [r3, #0]
     12c:	b29b      	uxth	r3, r3
     12e:	2b00      	cmp	r3, #0
     130:	d006      	beq.n	140 <cal_update+0x3c>
     132:	4b34      	ldr	r3, [pc, #208]	; (204 <cal_update+0x100>)
     134:	881b      	ldrh	r3, [r3, #0]
     136:	b29b      	uxth	r3, r3
     138:	3b01      	subs	r3, #1
     13a:	b29a      	uxth	r2, r3
     13c:	4b31      	ldr	r3, [pc, #196]	; (204 <cal_update+0x100>)
     13e:	801a      	strh	r2, [r3, #0]
	}

	
	// if calibration isn't valid, clear any other flags and return.
	if (cal_valid_counter == 0) {
     140:	4b30      	ldr	r3, [pc, #192]	; (204 <cal_update+0x100>)
     142:	881b      	ldrh	r3, [r3, #0]
     144:	b29b      	uxth	r3, r3
     146:	2b00      	cmp	r3, #0
     148:	d106      	bne.n	158 <cal_update+0x54>
		
		// clear any other pending interrupts
		TC2->COUNT32.INTFLAG.reg = TC_INTFLAG_MC1 | TC_INTFLAG_SYNCRDY;
     14a:	4b2d      	ldr	r3, [pc, #180]	; (200 <cal_update+0xfc>)
     14c:	2228      	movs	r2, #40	; 0x28
     14e:	739a      	strb	r2, [r3, #14]
		last_capture_valid = false;
     150:	4b2d      	ldr	r3, [pc, #180]	; (208 <cal_update+0x104>)
     152:	2200      	movs	r2, #0
     154:	701a      	strb	r2, [r3, #0]
		
		return;
     156:	e050      	b.n	1fa <cal_update+0xf6>

	uint32_t new_capture_value, capture_diff;

	// if MC1 flag is set, start read request
	// offset 0x1C is CC1 register
	if (TC2->COUNT32.INTFLAG.bit.MC1) {
     158:	4b29      	ldr	r3, [pc, #164]	; (200 <cal_update+0xfc>)
     15a:	7b9b      	ldrb	r3, [r3, #14]
     15c:	b2db      	uxtb	r3, r3
     15e:	095b      	lsrs	r3, r3, #5
     160:	1c1a      	adds	r2, r3, #0
     162:	2301      	movs	r3, #1
     164:	4013      	ands	r3, r2
     166:	b2db      	uxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	d005      	beq.n	178 <cal_update+0x74>
		TC2->COUNT32.READREQ.reg = TC_READREQ_RREQ | TC_READREQ_ADDR(0x1C);
     16c:	4b24      	ldr	r3, [pc, #144]	; (200 <cal_update+0xfc>)
     16e:	4a27      	ldr	r2, [pc, #156]	; (20c <cal_update+0x108>)
     170:	805a      	strh	r2, [r3, #2]
		TC2->COUNT32.INTFLAG.reg = TC_INTFLAG_MC1;
     172:	4b23      	ldr	r3, [pc, #140]	; (200 <cal_update+0xfc>)
     174:	2220      	movs	r2, #32
     176:	739a      	strb	r2, [r3, #14]
	}

	// if SYNCRDY flag is set, read CC1
	if (TC2->COUNT32.INTFLAG.bit.SYNCRDY) {
     178:	4b21      	ldr	r3, [pc, #132]	; (200 <cal_update+0xfc>)
     17a:	7b9b      	ldrb	r3, [r3, #14]
     17c:	b2db      	uxtb	r3, r3
     17e:	08db      	lsrs	r3, r3, #3
     180:	1c1a      	adds	r2, r3, #0
     182:	2301      	movs	r3, #1
     184:	4013      	ands	r3, r2
     186:	b2db      	uxtb	r3, r3
     188:	2b00      	cmp	r3, #0
     18a:	d036      	beq.n	1fa <cal_update+0xf6>
		new_capture_value = TC2->COUNT32.CC[1].reg;
     18c:	4b1c      	ldr	r3, [pc, #112]	; (200 <cal_update+0xfc>)
     18e:	69db      	ldr	r3, [r3, #28]
     190:	607b      	str	r3, [r7, #4]
		TC2->COUNT32.INTFLAG.reg = TC_INTFLAG_SYNCRDY;
     192:	4b1b      	ldr	r3, [pc, #108]	; (200 <cal_update+0xfc>)
     194:	2208      	movs	r2, #8
     196:	739a      	strb	r2, [r3, #14]

		// if previous capture is valid, calculate time difference and write into FIFO
		if (last_capture_valid) {
     198:	4b1b      	ldr	r3, [pc, #108]	; (208 <cal_update+0x104>)
     19a:	781b      	ldrb	r3, [r3, #0]
     19c:	b2db      	uxtb	r3, r3
     19e:	2b00      	cmp	r3, #0
     1a0:	d025      	beq.n	1ee <cal_update+0xea>
			capture_diff = (new_capture_value - last_capture_value) & CAPTURE_VALUE_MASK;
     1a2:	4b1b      	ldr	r3, [pc, #108]	; (210 <cal_update+0x10c>)
     1a4:	681b      	ldr	r3, [r3, #0]
     1a6:	687a      	ldr	r2, [r7, #4]
     1a8:	1ad3      	subs	r3, r2, r3
     1aa:	021b      	lsls	r3, r3, #8
     1ac:	0a1b      	lsrs	r3, r3, #8
     1ae:	603b      	str	r3, [r7, #0]
			if (!CAPTURE_FIFO_FULL) {
     1b0:	4b18      	ldr	r3, [pc, #96]	; (214 <cal_update+0x110>)
     1b2:	881b      	ldrh	r3, [r3, #0]
     1b4:	b29b      	uxth	r3, r3
     1b6:	1c1a      	adds	r2, r3, #0
     1b8:	4b17      	ldr	r3, [pc, #92]	; (218 <cal_update+0x114>)
     1ba:	881b      	ldrh	r3, [r3, #0]
     1bc:	b29b      	uxth	r3, r3
     1be:	1ad3      	subs	r3, r2, r3
     1c0:	2203      	movs	r2, #3
     1c2:	4013      	ands	r3, r2
     1c4:	2b01      	cmp	r3, #1
     1c6:	d015      	beq.n	1f4 <cal_update+0xf0>
				capture_fifo[capture_fifo_writeptr] = capture_diff;
     1c8:	4b13      	ldr	r3, [pc, #76]	; (218 <cal_update+0x114>)
     1ca:	881b      	ldrh	r3, [r3, #0]
     1cc:	b29b      	uxth	r3, r3
     1ce:	1c1a      	adds	r2, r3, #0
     1d0:	4b12      	ldr	r3, [pc, #72]	; (21c <cal_update+0x118>)
     1d2:	0092      	lsls	r2, r2, #2
     1d4:	6839      	ldr	r1, [r7, #0]
     1d6:	50d1      	str	r1, [r2, r3]
				capture_fifo_writeptr = (capture_fifo_writeptr + 1) & CAPTURE_FIFO_MASK;
     1d8:	4b0f      	ldr	r3, [pc, #60]	; (218 <cal_update+0x114>)
     1da:	881b      	ldrh	r3, [r3, #0]
     1dc:	b29b      	uxth	r3, r3
     1de:	3301      	adds	r3, #1
     1e0:	b29b      	uxth	r3, r3
     1e2:	2203      	movs	r2, #3
     1e4:	4013      	ands	r3, r2
     1e6:	b29a      	uxth	r2, r3
     1e8:	4b0b      	ldr	r3, [pc, #44]	; (218 <cal_update+0x114>)
     1ea:	801a      	strh	r2, [r3, #0]
     1ec:	e002      	b.n	1f4 <cal_update+0xf0>
			}
		} else {
			last_capture_valid = true;
     1ee:	4b06      	ldr	r3, [pc, #24]	; (208 <cal_update+0x104>)
     1f0:	2201      	movs	r2, #1
     1f2:	701a      	strb	r2, [r3, #0]
		}

		last_capture_value = new_capture_value;
     1f4:	4b06      	ldr	r3, [pc, #24]	; (210 <cal_update+0x10c>)
     1f6:	687a      	ldr	r2, [r7, #4]
     1f8:	601a      	str	r2, [r3, #0]
	}

}
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}
     200:	42002800 	.word	0x42002800
     204:	20000452 	.word	0x20000452
     208:	20000468 	.word	0x20000468
     20c:	ffff801c 	.word	0xffff801c
     210:	2000044c 	.word	0x2000044c
     214:	20000450 	.word	0x20000450
     218:	20000454 	.word	0x20000454
     21c:	20000458 	.word	0x20000458

00000220 <cal_ready>:

bool cal_ready(void) {
     220:	b580      	push	{r7, lr}
     222:	af00      	add	r7, sp, #0
	return (cal_valid_counter > 0);
     224:	4b04      	ldr	r3, [pc, #16]	; (238 <cal_ready+0x18>)
     226:	881b      	ldrh	r3, [r3, #0]
     228:	b29b      	uxth	r3, r3
     22a:	1e5a      	subs	r2, r3, #1
     22c:	4193      	sbcs	r3, r2
     22e:	b2db      	uxtb	r3, r3
}
     230:	1c18      	adds	r0, r3, #0
     232:	46bd      	mov	sp, r7
     234:	bd80      	pop	{r7, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	20000452 	.word	0x20000452

0000023c <cal_fetch>:

bool cal_fetch(uint32_t *value) {
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	
	if (CAPTURE_FIFO_EMPTY) return false;
     244:	4b10      	ldr	r3, [pc, #64]	; (288 <cal_fetch+0x4c>)
     246:	881b      	ldrh	r3, [r3, #0]
     248:	b29a      	uxth	r2, r3
     24a:	4b10      	ldr	r3, [pc, #64]	; (28c <cal_fetch+0x50>)
     24c:	881b      	ldrh	r3, [r3, #0]
     24e:	b29b      	uxth	r3, r3
     250:	429a      	cmp	r2, r3
     252:	d101      	bne.n	258 <cal_fetch+0x1c>
     254:	2300      	movs	r3, #0
     256:	e013      	b.n	280 <cal_fetch+0x44>

	*value = capture_fifo[capture_fifo_readptr];
     258:	4b0b      	ldr	r3, [pc, #44]	; (288 <cal_fetch+0x4c>)
     25a:	881b      	ldrh	r3, [r3, #0]
     25c:	b29b      	uxth	r3, r3
     25e:	1c1a      	adds	r2, r3, #0
     260:	4b0b      	ldr	r3, [pc, #44]	; (290 <cal_fetch+0x54>)
     262:	0092      	lsls	r2, r2, #2
     264:	58d2      	ldr	r2, [r2, r3]
     266:	687b      	ldr	r3, [r7, #4]
     268:	601a      	str	r2, [r3, #0]
	capture_fifo_readptr = (capture_fifo_readptr + 1) & CAPTURE_FIFO_MASK;
     26a:	4b07      	ldr	r3, [pc, #28]	; (288 <cal_fetch+0x4c>)
     26c:	881b      	ldrh	r3, [r3, #0]
     26e:	b29b      	uxth	r3, r3
     270:	3301      	adds	r3, #1
     272:	b29b      	uxth	r3, r3
     274:	2203      	movs	r2, #3
     276:	4013      	ands	r3, r2
     278:	b29a      	uxth	r2, r3
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <cal_fetch+0x4c>)
     27c:	801a      	strh	r2, [r3, #0]

	return true;
     27e:	2301      	movs	r3, #1
}
     280:	1c18      	adds	r0, r3, #0
     282:	46bd      	mov	sp, r7
     284:	b002      	add	sp, #8
     286:	bd80      	pop	{r7, pc}
     288:	20000450 	.word	0x20000450
     28c:	20000454 	.word	0x20000454
     290:	20000458 	.word	0x20000458

00000294 <cal_init>:


void cal_init(void) {
     294:	b580      	push	{r7, lr}
     296:	af00      	add	r7, sp, #0
	
	// CONFIGURE EIC
	
	// configure PA21 (INT from RTC, EXTINT5) input as EIC interrupt
	PORT->Group[0].PMUX[21/2].bit.PMUXO = PORT_PMUX_PMUXO_A_Val;
     298:	4a4f      	ldr	r2, [pc, #316]	; (3d8 <cal_init+0x144>)
     29a:	233a      	movs	r3, #58	; 0x3a
     29c:	5cd1      	ldrb	r1, [r2, r3]
     29e:	200f      	movs	r0, #15
     2a0:	4001      	ands	r1, r0
     2a2:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[21].bit.PMUXEN = 1;
     2a4:	4a4c      	ldr	r2, [pc, #304]	; (3d8 <cal_init+0x144>)
     2a6:	2355      	movs	r3, #85	; 0x55
     2a8:	5cd1      	ldrb	r1, [r2, r3]
     2aa:	2001      	movs	r0, #1
     2ac:	4301      	orrs	r1, r0
     2ae:	54d1      	strb	r1, [r2, r3]
	
	// enable EIC clock
	PM->APBAMASK.reg |= PM_APBAMASK_EIC;
     2b0:	4b4a      	ldr	r3, [pc, #296]	; (3dc <cal_init+0x148>)
     2b2:	4a4a      	ldr	r2, [pc, #296]	; (3dc <cal_init+0x148>)
     2b4:	6992      	ldr	r2, [r2, #24]
     2b6:	2140      	movs	r1, #64	; 0x40
     2b8:	430a      	orrs	r2, r1
     2ba:	619a      	str	r2, [r3, #24]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     2bc:	4b48      	ldr	r3, [pc, #288]	; (3e0 <cal_init+0x14c>)
     2be:	4a49      	ldr	r2, [pc, #292]	; (3e4 <cal_init+0x150>)
     2c0:	805a      	strh	r2, [r3, #2]
	
	// configure EXTINT5 to pass through EXTINT5 without any filtering/retiming
	EIC->CONFIG[0].bit.FILTEN5 = 0;
     2c2:	4b49      	ldr	r3, [pc, #292]	; (3e8 <cal_init+0x154>)
     2c4:	699a      	ldr	r2, [r3, #24]
     2c6:	4949      	ldr	r1, [pc, #292]	; (3ec <cal_init+0x158>)
     2c8:	400a      	ands	r2, r1
     2ca:	619a      	str	r2, [r3, #24]
	EIC->CONFIG[0].bit.SENSE5 = EIC_CONFIG_SENSE5_HIGH_Val;
     2cc:	4b46      	ldr	r3, [pc, #280]	; (3e8 <cal_init+0x154>)
     2ce:	699a      	ldr	r2, [r3, #24]
     2d0:	4947      	ldr	r1, [pc, #284]	; (3f0 <cal_init+0x15c>)
     2d2:	400a      	ands	r2, r1
     2d4:	2180      	movs	r1, #128	; 0x80
     2d6:	03c9      	lsls	r1, r1, #15
     2d8:	430a      	orrs	r2, r1
     2da:	619a      	str	r2, [r3, #24]
	// enable event for this interrupt
	EIC->EVCTRL.bit.EXTINTEO5 = 1;
     2dc:	4b42      	ldr	r3, [pc, #264]	; (3e8 <cal_init+0x154>)
     2de:	685a      	ldr	r2, [r3, #4]
     2e0:	2120      	movs	r1, #32
     2e2:	430a      	orrs	r2, r1
     2e4:	605a      	str	r2, [r3, #4]

	// enable EIC!
	EIC->CTRL.reg = EIC_CTRL_ENABLE;
     2e6:	4b40      	ldr	r3, [pc, #256]	; (3e8 <cal_init+0x154>)
     2e8:	2202      	movs	r2, #2
     2ea:	701a      	strb	r2, [r3, #0]
	
	
	// CONFIGURE EVENT SYSTEM
	
	// enable event system clock
	PM->APBCMASK.reg |= PM_APBCMASK_EVSYS;
     2ec:	4b3b      	ldr	r3, [pc, #236]	; (3dc <cal_init+0x148>)
     2ee:	4a3b      	ldr	r2, [pc, #236]	; (3dc <cal_init+0x148>)
     2f0:	6a12      	ldr	r2, [r2, #32]
     2f2:	2102      	movs	r1, #2
     2f4:	430a      	orrs	r2, r1
     2f6:	621a      	str	r2, [r3, #32]
	
	// enable event channel 0 CLK
	// use GCLK generator 0 for now, we'll change this to GCLK1 later
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_EVSYS_CHANNEL_0;
     2f8:	4b39      	ldr	r3, [pc, #228]	; (3e0 <cal_init+0x14c>)
     2fa:	4a3e      	ldr	r2, [pc, #248]	; (3f4 <cal_init+0x160>)
     2fc:	805a      	strh	r2, [r3, #2]
	
	// event generator 0x11 is EXTINT5 and is a copy of what's on the IO pin.
	// resynchronize to the local GCLK and detect a falling edge.
	EVSYS->CHANNEL.reg =	EVSYS_CHANNEL_EDGSEL_FALLING_EDGE |
     2fe:	4b3e      	ldr	r3, [pc, #248]	; (3f8 <cal_init+0x164>)
     300:	4a3e      	ldr	r2, [pc, #248]	; (3fc <cal_init+0x168>)
     302:	605a      	str	r2, [r3, #4]
							EVSYS_CHANNEL_EVGEN(0x11) |
							EVSYS_CHANNEL_CHANNEL(0);
	
	// event user 0x02 is TC2
	// note that EVSYS_USER_CHANNEL(1) actually configures channel 0!
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(1) | EVSYS_USER_USER(0x02);
     304:	4b3c      	ldr	r3, [pc, #240]	; (3f8 <cal_init+0x164>)
     306:	2281      	movs	r2, #129	; 0x81
     308:	0052      	lsls	r2, r2, #1
     30a:	811a      	strh	r2, [r3, #8]
	
	
	// CONFIGURE TC2
	
	// Use GCLK0 to clock timer while we configure it, we'll change it to GCLK1 later
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC2_TC3;
     30c:	4b34      	ldr	r3, [pc, #208]	; (3e0 <cal_init+0x14c>)
     30e:	4a3c      	ldr	r2, [pc, #240]	; (400 <//STACK_SIZE>)
     310:	805a      	strh	r2, [r3, #2]
	// enable APB clock (also enable TC3 clock, though it's probably not needed)
	PM->APBCMASK.reg |= PM_APBCMASK_TC2 | PM_APBCMASK_TC3;
     312:	4b32      	ldr	r3, [pc, #200]	; (3dc <cal_init+0x148>)
     314:	4a31      	ldr	r2, [pc, #196]	; (3dc <cal_init+0x148>)
     316:	6a12      	ldr	r2, [r2, #32]
     318:	21c0      	movs	r1, #192	; 0xc0
     31a:	0109      	lsls	r1, r1, #4
     31c:	430a      	orrs	r2, r1
     31e:	621a      	str	r2, [r3, #32]
	
	// 32 bit mode, top=CC0
	TC2->COUNT32.CTRLA.reg = TC_CTRLA_RUNSTDBY | TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_WAVEGEN_MFRQ | TC_CTRLA_MODE_COUNT32 | (0<<TC_CTRLA_ENABLE_Pos);
     320:	4b38      	ldr	r3, [pc, #224]	; (404 <//STACK_SIZE+0x4>)
     322:	4a39      	ldr	r2, [pc, #228]	; (408 <//STACK_SIZE+0x8>)
     324:	801a      	strh	r2, [r3, #0]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     326:	46c0      	nop			; (mov r8, r8)
     328:	4b36      	ldr	r3, [pc, #216]	; (404 <//STACK_SIZE+0x4>)
     32a:	7bdb      	ldrb	r3, [r3, #15]
     32c:	b2db      	uxtb	r3, r3
     32e:	09db      	lsrs	r3, r3, #7
     330:	b2db      	uxtb	r3, r3
     332:	2b00      	cmp	r3, #0
     334:	d1f8      	bne.n	328 <cal_init+0x94>
	
	// overflow every 16M samples, this makes subtracting time easy.
	TC2->COUNT32.CC[0].reg = CAPTURE_VALUE_MASK;
     336:	4b33      	ldr	r3, [pc, #204]	; (404 <//STACK_SIZE+0x4>)
     338:	4a34      	ldr	r2, [pc, #208]	; (40c <//STACK_SIZE+0xc>)
     33a:	619a      	str	r2, [r3, #24]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     33c:	46c0      	nop			; (mov r8, r8)
     33e:	4b31      	ldr	r3, [pc, #196]	; (404 <//STACK_SIZE+0x4>)
     340:	7bdb      	ldrb	r3, [r3, #15]
     342:	b2db      	uxtb	r3, r3
     344:	09db      	lsrs	r3, r3, #7
     346:	b2db      	uxtb	r3, r3
     348:	2b00      	cmp	r3, #0
     34a:	d1f8      	bne.n	33e <cal_init+0xaa>
	
	// zero counter
	TC2->COUNT32.COUNT.reg = 0;
     34c:	4b2d      	ldr	r3, [pc, #180]	; (404 <//STACK_SIZE+0x4>)
     34e:	2200      	movs	r2, #0
     350:	611a      	str	r2, [r3, #16]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     352:	46c0      	nop			; (mov r8, r8)
     354:	4b2b      	ldr	r3, [pc, #172]	; (404 <//STACK_SIZE+0x4>)
     356:	7bdb      	ldrb	r3, [r3, #15]
     358:	b2db      	uxtb	r3, r3
     35a:	09db      	lsrs	r3, r3, #7
     35c:	b2db      	uxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	d1f8      	bne.n	354 <cal_init+0xc0>
	
	// clear ONESHOT and DIR bits, so we count upwards and repeat
	TC2->COUNT32.CTRLBCLR.reg = TC_CTRLBCLR_ONESHOT | TC_CTRLBCLR_DIR;
     362:	4b28      	ldr	r3, [pc, #160]	; (404 <//STACK_SIZE+0x4>)
     364:	2205      	movs	r2, #5
     366:	711a      	strb	r2, [r3, #4]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     368:	46c0      	nop			; (mov r8, r8)
     36a:	4b26      	ldr	r3, [pc, #152]	; (404 <//STACK_SIZE+0x4>)
     36c:	7bdb      	ldrb	r3, [r3, #15]
     36e:	b2db      	uxtb	r3, r3
     370:	09db      	lsrs	r3, r3, #7
     372:	b2db      	uxtb	r3, r3
     374:	2b00      	cmp	r3, #0
     376:	d1f8      	bne.n	36a <cal_init+0xd6>
	
	// enable capture channel 1
	TC2->COUNT32.CTRLC.reg = TC_CTRLC_CPTEN1;
     378:	4b22      	ldr	r3, [pc, #136]	; (404 <//STACK_SIZE+0x4>)
     37a:	2220      	movs	r2, #32
     37c:	719a      	strb	r2, [r3, #6]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     37e:	46c0      	nop			; (mov r8, r8)
     380:	4b20      	ldr	r3, [pc, #128]	; (404 <//STACK_SIZE+0x4>)
     382:	7bdb      	ldrb	r3, [r3, #15]
     384:	b2db      	uxtb	r3, r3
     386:	09db      	lsrs	r3, r3, #7
     388:	b2db      	uxtb	r3, r3
     38a:	2b00      	cmp	r3, #0
     38c:	d1f8      	bne.n	380 <cal_init+0xec>
	
	// enable event input
	TC2->COUNT32.EVCTRL.reg = TC_EVCTRL_TCEI | TC_EVCTRL_EVACT_OFF;
     38e:	4b1d      	ldr	r3, [pc, #116]	; (404 <//STACK_SIZE+0x4>)
     390:	2220      	movs	r2, #32
     392:	815a      	strh	r2, [r3, #10]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     394:	46c0      	nop			; (mov r8, r8)
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <//STACK_SIZE+0x4>)
     398:	7bdb      	ldrb	r3, [r3, #15]
     39a:	b2db      	uxtb	r3, r3
     39c:	09db      	lsrs	r3, r3, #7
     39e:	b2db      	uxtb	r3, r3
     3a0:	2b00      	cmp	r3, #0
     3a2:	d1f8      	bne.n	396 <cal_init+0x102>
	
	// clear any pending interrupt flags
	TC2->COUNT32.INTFLAG.reg = TC_INTFLAG_MC1 | TC_INTFLAG_OVF | TC_INTFLAG_SYNCRDY;
     3a4:	4b17      	ldr	r3, [pc, #92]	; (404 <//STACK_SIZE+0x4>)
     3a6:	2229      	movs	r2, #41	; 0x29
     3a8:	739a      	strb	r2, [r3, #14]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	4b15      	ldr	r3, [pc, #84]	; (404 <//STACK_SIZE+0x4>)
     3ae:	7bdb      	ldrb	r3, [r3, #15]
     3b0:	b2db      	uxtb	r3, r3
     3b2:	09db      	lsrs	r3, r3, #7
     3b4:	b2db      	uxtb	r3, r3
     3b6:	2b00      	cmp	r3, #0
     3b8:	d1f8      	bne.n	3ac <cal_init+0x118>
	
	// and fire away!
	TC2->COUNT32.CTRLA.bit.ENABLE = 1;
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <//STACK_SIZE+0x4>)
     3bc:	881a      	ldrh	r2, [r3, #0]
     3be:	2102      	movs	r1, #2
     3c0:	430a      	orrs	r2, r1
     3c2:	801a      	strh	r2, [r3, #0]
	while(TC2->COUNT32.STATUS.bit.SYNCBUSY);
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <//STACK_SIZE+0x4>)
     3c8:	7bdb      	ldrb	r3, [r3, #15]
     3ca:	b2db      	uxtb	r3, r3
     3cc:	09db      	lsrs	r3, r3, #7
     3ce:	b2db      	uxtb	r3, r3
     3d0:	2b00      	cmp	r3, #0
     3d2:	d1f8      	bne.n	3c6 <cal_init+0x132>
	// now switch GCLKs for event and timer to GCLK1
	//GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_TC2_TC3;
	//GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_EVSYS_CHANNEL_0;
	
	
}
     3d4:	46bd      	mov	sp, r7
     3d6:	bd80      	pop	{r7, pc}
     3d8:	41004400 	.word	0x41004400
     3dc:	40000400 	.word	0x40000400
     3e0:	40000c00 	.word	0x40000c00
     3e4:	00004003 	.word	0x00004003
     3e8:	40001800 	.word	0x40001800
     3ec:	ff7fffff 	.word	0xff7fffff
     3f0:	ff8fffff 	.word	0xff8fffff
     3f4:	00004104 	.word	0x00004104
     3f8:	42000400 	.word	0x42000400
     3fc:	09110000 	.word	0x09110000
     400:	00004014 	.word	0x00004014
     404:	42002800 	.word	0x42002800
     408:	00000828 	.word	0x00000828
     40c:	00ffffff 	.word	0x00ffffff

00000410 <cal_input_select>:


void cal_input_select(bool use_cal_input) {
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	1c02      	adds	r2, r0, #0
     418:	1dfb      	adds	r3, r7, #7
     41a:	701a      	strb	r2, [r3, #0]
	
	if (use_cal_input) {
     41c:	1dfb      	adds	r3, r7, #7
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b00      	cmp	r3, #0
     422:	d006      	beq.n	432 <cal_input_select+0x22>
		GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_TC2_TC3;
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <cal_input_select+0x34>)
     426:	4a08      	ldr	r2, [pc, #32]	; (448 <cal_input_select+0x38>)
     428:	805a      	strh	r2, [r3, #2]
		GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_EVSYS_CHANNEL_0;
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <cal_input_select+0x34>)
     42c:	4a07      	ldr	r2, [pc, #28]	; (44c <cal_input_select+0x3c>)
     42e:	805a      	strh	r2, [r3, #2]
     430:	e005      	b.n	43e <cal_input_select+0x2e>
	} else {
		GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC2_TC3;
     432:	4b04      	ldr	r3, [pc, #16]	; (444 <cal_input_select+0x34>)
     434:	4a06      	ldr	r2, [pc, #24]	; (450 <cal_input_select+0x40>)
     436:	805a      	strh	r2, [r3, #2]
		GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_EVSYS_CHANNEL_0;
     438:	4b02      	ldr	r3, [pc, #8]	; (444 <cal_input_select+0x34>)
     43a:	4a06      	ldr	r2, [pc, #24]	; (454 <cal_input_select+0x44>)
     43c:	805a      	strh	r2, [r3, #2]
	}
	
     43e:	46bd      	mov	sp, r7
     440:	b002      	add	sp, #8
     442:	bd80      	pop	{r7, pc}
     444:	40000c00 	.word	0x40000c00
     448:	00004114 	.word	0x00004114
     44c:	00004104 	.word	0x00004104
     450:	00004014 	.word	0x00004014
     454:	00004004 	.word	0x00004004

00000458 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     458:	b580      	push	{r7, lr}
     45a:	b082      	sub	sp, #8
     45c:	af00      	add	r7, sp, #0
     45e:	1c02      	adds	r2, r0, #0
     460:	1dfb      	adds	r3, r7, #7
     462:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     464:	4b06      	ldr	r3, [pc, #24]	; (480 <NVIC_EnableIRQ+0x28>)
     466:	1dfa      	adds	r2, r7, #7
     468:	7812      	ldrb	r2, [r2, #0]
     46a:	1c11      	adds	r1, r2, #0
     46c:	221f      	movs	r2, #31
     46e:	400a      	ands	r2, r1
     470:	2101      	movs	r1, #1
     472:	4091      	lsls	r1, r2
     474:	1c0a      	adds	r2, r1, #0
     476:	601a      	str	r2, [r3, #0]
}
     478:	46bd      	mov	sp, r7
     47a:	b002      	add	sp, #8
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	e000e100 	.word	0xe000e100

00000484 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     484:	b5b0      	push	{r4, r5, r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	1c02      	adds	r2, r0, #0
     48c:	6039      	str	r1, [r7, #0]
     48e:	1dfb      	adds	r3, r7, #7
     490:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     492:	1dfb      	adds	r3, r7, #7
     494:	781b      	ldrb	r3, [r3, #0]
     496:	2b7f      	cmp	r3, #127	; 0x7f
     498:	d92f      	bls.n	4fa <NVIC_SetPriority+0x76>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     49a:	4c2d      	ldr	r4, [pc, #180]	; (550 <NVIC_SetPriority+0xcc>)
     49c:	1dfb      	adds	r3, r7, #7
     49e:	781b      	ldrb	r3, [r3, #0]
     4a0:	1c1a      	adds	r2, r3, #0
     4a2:	230f      	movs	r3, #15
     4a4:	4013      	ands	r3, r2
     4a6:	3b08      	subs	r3, #8
     4a8:	0899      	lsrs	r1, r3, #2
     4aa:	4a29      	ldr	r2, [pc, #164]	; (550 <NVIC_SetPriority+0xcc>)
     4ac:	1dfb      	adds	r3, r7, #7
     4ae:	781b      	ldrb	r3, [r3, #0]
     4b0:	1c18      	adds	r0, r3, #0
     4b2:	230f      	movs	r3, #15
     4b4:	4003      	ands	r3, r0
     4b6:	3b08      	subs	r3, #8
     4b8:	089b      	lsrs	r3, r3, #2
     4ba:	3306      	adds	r3, #6
     4bc:	009b      	lsls	r3, r3, #2
     4be:	18d3      	adds	r3, r2, r3
     4c0:	685b      	ldr	r3, [r3, #4]
     4c2:	1dfa      	adds	r2, r7, #7
     4c4:	7812      	ldrb	r2, [r2, #0]
     4c6:	1c10      	adds	r0, r2, #0
     4c8:	2203      	movs	r2, #3
     4ca:	4002      	ands	r2, r0
     4cc:	00d2      	lsls	r2, r2, #3
     4ce:	1c10      	adds	r0, r2, #0
     4d0:	22ff      	movs	r2, #255	; 0xff
     4d2:	4082      	lsls	r2, r0
     4d4:	43d2      	mvns	r2, r2
     4d6:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     4d8:	683b      	ldr	r3, [r7, #0]
     4da:	019b      	lsls	r3, r3, #6
     4dc:	20ff      	movs	r0, #255	; 0xff
     4de:	4003      	ands	r3, r0
     4e0:	1df8      	adds	r0, r7, #7
     4e2:	7800      	ldrb	r0, [r0, #0]
     4e4:	1c05      	adds	r5, r0, #0
     4e6:	2003      	movs	r0, #3
     4e8:	4028      	ands	r0, r5
     4ea:	00c0      	lsls	r0, r0, #3
     4ec:	4083      	lsls	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     4ee:	431a      	orrs	r2, r3
     4f0:	1d8b      	adds	r3, r1, #6
     4f2:	009b      	lsls	r3, r3, #2
     4f4:	18e3      	adds	r3, r4, r3
     4f6:	605a      	str	r2, [r3, #4]
     4f8:	e026      	b.n	548 <NVIC_SetPriority+0xc4>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     4fa:	4c16      	ldr	r4, [pc, #88]	; (554 <NVIC_SetPriority+0xd0>)
     4fc:	1dfb      	adds	r3, r7, #7
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	b25b      	sxtb	r3, r3
     502:	089b      	lsrs	r3, r3, #2
     504:	4913      	ldr	r1, [pc, #76]	; (554 <NVIC_SetPriority+0xd0>)
     506:	1dfa      	adds	r2, r7, #7
     508:	7812      	ldrb	r2, [r2, #0]
     50a:	b252      	sxtb	r2, r2
     50c:	0892      	lsrs	r2, r2, #2
     50e:	32c0      	adds	r2, #192	; 0xc0
     510:	0092      	lsls	r2, r2, #2
     512:	5852      	ldr	r2, [r2, r1]
     514:	1df9      	adds	r1, r7, #7
     516:	7809      	ldrb	r1, [r1, #0]
     518:	1c08      	adds	r0, r1, #0
     51a:	2103      	movs	r1, #3
     51c:	4001      	ands	r1, r0
     51e:	00c9      	lsls	r1, r1, #3
     520:	1c08      	adds	r0, r1, #0
     522:	21ff      	movs	r1, #255	; 0xff
     524:	4081      	lsls	r1, r0
     526:	43c9      	mvns	r1, r1
     528:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     52a:	683a      	ldr	r2, [r7, #0]
     52c:	0192      	lsls	r2, r2, #6
     52e:	20ff      	movs	r0, #255	; 0xff
     530:	4002      	ands	r2, r0
     532:	1df8      	adds	r0, r7, #7
     534:	7800      	ldrb	r0, [r0, #0]
     536:	1c05      	adds	r5, r0, #0
     538:	2003      	movs	r0, #3
     53a:	4028      	ands	r0, r5
     53c:	00c0      	lsls	r0, r0, #3
     53e:	4082      	lsls	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     540:	430a      	orrs	r2, r1
     542:	33c0      	adds	r3, #192	; 0xc0
     544:	009b      	lsls	r3, r3, #2
     546:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     548:	46bd      	mov	sp, r7
     54a:	b002      	add	sp, #8
     54c:	bdb0      	pop	{r4, r5, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	e000ed00 	.word	0xe000ed00
     554:	e000e100 	.word	0xe000e100

00000558 <SERCOM2_Handler>:
#define UART_RX_FIFO_EMPTY (uart_console_rx_fifo_readptr == uart_console_rx_fifo_writeptr)
#define UART_RX_FIFO_FULL (((uart_console_rx_fifo_readptr - uart_console_rx_fifo_writeptr) & UART_CONSOLE_RX_FIFO_MASK) == 1)


// interrupt handler
void SERCOM2_Handler(void) {
     558:	b580      	push	{r7, lr}
     55a:	b082      	sub	sp, #8
     55c:	af00      	add	r7, sp, #0
	
	// transmit side - check DRE flag
	if (SERCOM2->USART.INTFLAG.bit.DRE) {
     55e:	4b30      	ldr	r3, [pc, #192]	; (620 <SERCOM2_Handler+0xc8>)
     560:	7b9b      	ldrb	r3, [r3, #14]
     562:	2201      	movs	r2, #1
     564:	4013      	ands	r3, r2
     566:	b2db      	uxtb	r3, r3
     568:	2b00      	cmp	r3, #0
     56a:	d026      	beq.n	5ba <SERCOM2_Handler+0x62>
		
		// if there's a byte available in the transmit FIFO, fire it at the UART
		if (!UART_CONSOLE_TX_FIFO_EMPTY) {
     56c:	4b2d      	ldr	r3, [pc, #180]	; (624 <SERCOM2_Handler+0xcc>)
     56e:	881b      	ldrh	r3, [r3, #0]
     570:	b29a      	uxth	r2, r3
     572:	4b2d      	ldr	r3, [pc, #180]	; (628 <SERCOM2_Handler+0xd0>)
     574:	881b      	ldrh	r3, [r3, #0]
     576:	b29b      	uxth	r3, r3
     578:	429a      	cmp	r2, r3
     57a:	d013      	beq.n	5a4 <SERCOM2_Handler+0x4c>
			SERCOM2->USART.DATA.reg = uart_console_tx_fifo[uart_console_tx_fifo_readptr];
     57c:	4928      	ldr	r1, [pc, #160]	; (620 <SERCOM2_Handler+0xc8>)
     57e:	4b29      	ldr	r3, [pc, #164]	; (624 <SERCOM2_Handler+0xcc>)
     580:	881b      	ldrh	r3, [r3, #0]
     582:	b29b      	uxth	r3, r3
     584:	1c1a      	adds	r2, r3, #0
     586:	4b29      	ldr	r3, [pc, #164]	; (62c <SERCOM2_Handler+0xd4>)
     588:	0052      	lsls	r2, r2, #1
     58a:	5ad3      	ldrh	r3, [r2, r3]
     58c:	b29b      	uxth	r3, r3
     58e:	830b      	strh	r3, [r1, #24]
			uart_console_tx_fifo_readptr = (uart_console_tx_fifo_readptr + 1) & UART_CONSOLE_TX_FIFO_MASK;
     590:	4b24      	ldr	r3, [pc, #144]	; (624 <SERCOM2_Handler+0xcc>)
     592:	881b      	ldrh	r3, [r3, #0]
     594:	b29b      	uxth	r3, r3
     596:	3301      	adds	r3, #1
     598:	b29b      	uxth	r3, r3
     59a:	223f      	movs	r2, #63	; 0x3f
     59c:	4013      	ands	r3, r2
     59e:	b29a      	uxth	r2, r3
     5a0:	4b20      	ldr	r3, [pc, #128]	; (624 <SERCOM2_Handler+0xcc>)
     5a2:	801a      	strh	r2, [r3, #0]
		}
		// if the TX FIFO is empty, disable the DRE interrupt
		if (UART_CONSOLE_TX_FIFO_EMPTY) {
     5a4:	4b1f      	ldr	r3, [pc, #124]	; (624 <SERCOM2_Handler+0xcc>)
     5a6:	881b      	ldrh	r3, [r3, #0]
     5a8:	b29a      	uxth	r2, r3
     5aa:	4b1f      	ldr	r3, [pc, #124]	; (628 <SERCOM2_Handler+0xd0>)
     5ac:	881b      	ldrh	r3, [r3, #0]
     5ae:	b29b      	uxth	r3, r3
     5b0:	429a      	cmp	r2, r3
     5b2:	d102      	bne.n	5ba <SERCOM2_Handler+0x62>
			SERCOM2->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
     5b4:	4b1a      	ldr	r3, [pc, #104]	; (620 <SERCOM2_Handler+0xc8>)
     5b6:	2201      	movs	r2, #1
     5b8:	731a      	strb	r2, [r3, #12]
		}
		
	}
	
	// receive side - check RXRDY interrupt flag
	if (SERCOM2->USART.INTFLAG.bit.RXC) {
     5ba:	4b19      	ldr	r3, [pc, #100]	; (620 <SERCOM2_Handler+0xc8>)
     5bc:	7b9b      	ldrb	r3, [r3, #14]
     5be:	b2db      	uxtb	r3, r3
     5c0:	089b      	lsrs	r3, r3, #2
     5c2:	1c1a      	adds	r2, r3, #0
     5c4:	2301      	movs	r3, #1
     5c6:	4013      	ands	r3, r2
     5c8:	b2db      	uxtb	r3, r3
     5ca:	2b00      	cmp	r3, #0
     5cc:	d024      	beq.n	618 <SERCOM2_Handler+0xc0>
		uint8_t byte = SERCOM2->USART.DATA.reg;
     5ce:	4b14      	ldr	r3, [pc, #80]	; (620 <SERCOM2_Handler+0xc8>)
     5d0:	8b1b      	ldrh	r3, [r3, #24]
     5d2:	b29a      	uxth	r2, r3
     5d4:	1dfb      	adds	r3, r7, #7
     5d6:	701a      	strb	r2, [r3, #0]
		if (!UART_RX_FIFO_FULL) {
     5d8:	4b15      	ldr	r3, [pc, #84]	; (630 <SERCOM2_Handler+0xd8>)
     5da:	881b      	ldrh	r3, [r3, #0]
     5dc:	b29b      	uxth	r3, r3
     5de:	1c1a      	adds	r2, r3, #0
     5e0:	4b14      	ldr	r3, [pc, #80]	; (634 <SERCOM2_Handler+0xdc>)
     5e2:	881b      	ldrh	r3, [r3, #0]
     5e4:	b29b      	uxth	r3, r3
     5e6:	1ad3      	subs	r3, r2, r3
     5e8:	223f      	movs	r2, #63	; 0x3f
     5ea:	4013      	ands	r3, r2
     5ec:	2b01      	cmp	r3, #1
     5ee:	d013      	beq.n	618 <SERCOM2_Handler+0xc0>
			uart_console_rx_fifo[uart_console_rx_fifo_writeptr] = byte;
     5f0:	4b10      	ldr	r3, [pc, #64]	; (634 <SERCOM2_Handler+0xdc>)
     5f2:	881b      	ldrh	r3, [r3, #0]
     5f4:	b29b      	uxth	r3, r3
     5f6:	1c1a      	adds	r2, r3, #0
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	781b      	ldrb	r3, [r3, #0]
     5fc:	b299      	uxth	r1, r3
     5fe:	4b0e      	ldr	r3, [pc, #56]	; (638 <SERCOM2_Handler+0xe0>)
     600:	0052      	lsls	r2, r2, #1
     602:	52d1      	strh	r1, [r2, r3]
			uart_console_rx_fifo_writeptr = (uart_console_rx_fifo_writeptr + 1) & UART_CONSOLE_RX_FIFO_MASK;
     604:	4b0b      	ldr	r3, [pc, #44]	; (634 <SERCOM2_Handler+0xdc>)
     606:	881b      	ldrh	r3, [r3, #0]
     608:	b29b      	uxth	r3, r3
     60a:	3301      	adds	r3, #1
     60c:	b29b      	uxth	r3, r3
     60e:	223f      	movs	r2, #63	; 0x3f
     610:	4013      	ands	r3, r2
     612:	b29a      	uxth	r2, r3
     614:	4b07      	ldr	r3, [pc, #28]	; (634 <SERCOM2_Handler+0xdc>)
     616:	801a      	strh	r2, [r3, #0]
		}
	}
}
     618:	46bd      	mov	sp, r7
     61a:	b002      	add	sp, #8
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)
     620:	42001000 	.word	0x42001000
     624:	2000056c 	.word	0x2000056c
     628:	2000056e 	.word	0x2000056e
     62c:	200004ec 	.word	0x200004ec
     630:	20000572 	.word	0x20000572
     634:	20000570 	.word	0x20000570
     638:	2000046c 	.word	0x2000046c

0000063c <console_init>:

void console_init(void) {
     63c:	b580      	push	{r7, lr}
     63e:	af00      	add	r7, sp, #0
	
	// initialize FIFO pointers
	uart_console_tx_fifo_readptr = 0;
     640:	4b2b      	ldr	r3, [pc, #172]	; (6f0 <console_init+0xb4>)
     642:	2200      	movs	r2, #0
     644:	801a      	strh	r2, [r3, #0]
	uart_console_tx_fifo_writeptr = 0;
     646:	4b2b      	ldr	r3, [pc, #172]	; (6f4 <console_init+0xb8>)
     648:	2200      	movs	r2, #0
     64a:	801a      	strh	r2, [r3, #0]
	uart_console_rx_fifo_readptr = 0;
     64c:	4b2a      	ldr	r3, [pc, #168]	; (6f8 <console_init+0xbc>)
     64e:	2200      	movs	r2, #0
     650:	801a      	strh	r2, [r3, #0]
	uart_console_rx_fifo_writeptr = 0;
     652:	4b2a      	ldr	r3, [pc, #168]	; (6fc <console_init+0xc0>)
     654:	2200      	movs	r2, #0
     656:	801a      	strh	r2, [r3, #0]
	
	// set GPIO muxing
	// transmit on PA14 / SERCOM2[2] (func C)
	// receive on PA15 / SERCOM2[3] (func C)
	PORT->Group[0].PMUX[15/2].bit.PMUXO = PORT_PMUX_PMUXO_C_Val;
     658:	4a29      	ldr	r2, [pc, #164]	; (700 <console_init+0xc4>)
     65a:	2337      	movs	r3, #55	; 0x37
     65c:	5cd1      	ldrb	r1, [r2, r3]
     65e:	200f      	movs	r0, #15
     660:	4001      	ands	r1, r0
     662:	1c08      	adds	r0, r1, #0
     664:	2120      	movs	r1, #32
     666:	4301      	orrs	r1, r0
     668:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[14/2].bit.PMUXE = PORT_PMUX_PMUXE_C_Val;
     66a:	4a25      	ldr	r2, [pc, #148]	; (700 <console_init+0xc4>)
     66c:	2337      	movs	r3, #55	; 0x37
     66e:	5cd1      	ldrb	r1, [r2, r3]
     670:	200f      	movs	r0, #15
     672:	4381      	bics	r1, r0
     674:	1c08      	adds	r0, r1, #0
     676:	2102      	movs	r1, #2
     678:	4301      	orrs	r1, r0
     67a:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[14].bit.PMUXEN = 1;
     67c:	4a20      	ldr	r2, [pc, #128]	; (700 <console_init+0xc4>)
     67e:	234e      	movs	r3, #78	; 0x4e
     680:	5cd1      	ldrb	r1, [r2, r3]
     682:	2001      	movs	r0, #1
     684:	4301      	orrs	r1, r0
     686:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[15].bit.PMUXEN = 1;
     688:	4a1d      	ldr	r2, [pc, #116]	; (700 <console_init+0xc4>)
     68a:	234f      	movs	r3, #79	; 0x4f
     68c:	5cd1      	ldrb	r1, [r2, r3]
     68e:	2001      	movs	r0, #1
     690:	4301      	orrs	r1, r0
     692:	54d1      	strb	r1, [r2, r3]
	
	// enable SERCOM3 clocks
	// GCLK0 is 8MHz clock, GCLK2 is 32768Hz clock
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM2_GCLK_ID_CORE) | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);
     694:	4b1b      	ldr	r3, [pc, #108]	; (704 <console_init+0xc8>)
     696:	4a1c      	ldr	r2, [pc, #112]	; (708 <console_init+0xcc>)
     698:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM2_GCLK_ID_SLOW) | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(2);
     69a:	4b1a      	ldr	r3, [pc, #104]	; (704 <console_init+0xc8>)
     69c:	4a1b      	ldr	r2, [pc, #108]	; (70c <console_init+0xd0>)
     69e:	805a      	strh	r2, [r3, #2]
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM2;
     6a0:	4b1b      	ldr	r3, [pc, #108]	; (710 <console_init+0xd4>)
     6a2:	4a1b      	ldr	r2, [pc, #108]	; (710 <console_init+0xd4>)
     6a4:	6a12      	ldr	r2, [r2, #32]
     6a6:	2110      	movs	r1, #16
     6a8:	430a      	orrs	r2, r1
     6aa:	621a      	str	r2, [r3, #32]
	
	// CTRLA
	SERCOM2->USART.CTRLA.bit.ENABLE = 0;
     6ac:	4b19      	ldr	r3, [pc, #100]	; (714 <console_init+0xd8>)
     6ae:	681a      	ldr	r2, [r3, #0]
     6b0:	2102      	movs	r1, #2
     6b2:	438a      	bics	r2, r1
     6b4:	601a      	str	r2, [r3, #0]
	SERCOM2->USART.CTRLA.reg = \
     6b6:	4b17      	ldr	r3, [pc, #92]	; (714 <console_init+0xd8>)
     6b8:	4a17      	ldr	r2, [pc, #92]	; (718 <console_init+0xdc>)
     6ba:	601a      	str	r2, [r3, #0]
		SERCOM_USART_CTRLA_RXPO_PAD3 |		// RX on pad 0
		SERCOM_USART_CTRLA_TXPO_PAD2 |		// TX on pad 2
		SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
		
	// 57600bps @ 8MHz core clock
	SERCOM2->USART.BAUD.reg = 57986;
     6bc:	4b15      	ldr	r3, [pc, #84]	; (714 <console_init+0xd8>)
     6be:	4a17      	ldr	r2, [pc, #92]	; (71c <console_init+0xe0>)
     6c0:	815a      	strh	r2, [r3, #10]
	
	// enable RX/TX
	SERCOM2->USART.CTRLB.reg = SERCOM_USART_CTRLB_CHSIZE(0) |
     6c2:	4b14      	ldr	r3, [pc, #80]	; (714 <console_init+0xd8>)
     6c4:	22c0      	movs	r2, #192	; 0xc0
     6c6:	0292      	lsls	r2, r2, #10
     6c8:	605a      	str	r2, [r3, #4]
		SERCOM_USART_CTRLB_RXEN |
		SERCOM_USART_CTRLB_TXEN;
		
	// enable receive interrupt
	SERCOM2->USART.INTENSET.bit.RXC = 1;
     6ca:	4b12      	ldr	r3, [pc, #72]	; (714 <console_init+0xd8>)
     6cc:	7b5a      	ldrb	r2, [r3, #13]
     6ce:	2104      	movs	r1, #4
     6d0:	430a      	orrs	r2, r1
     6d2:	735a      	strb	r2, [r3, #13]
	
	// finally enable UART
	SERCOM2->USART.CTRLA.bit.ENABLE = 1;
     6d4:	4b0f      	ldr	r3, [pc, #60]	; (714 <console_init+0xd8>)
     6d6:	681a      	ldr	r2, [r3, #0]
     6d8:	2102      	movs	r1, #2
     6da:	430a      	orrs	r2, r1
     6dc:	601a      	str	r2, [r3, #0]
	
	NVIC_SetPriority(SERCOM2_IRQn,1);
     6de:	2009      	movs	r0, #9
     6e0:	2101      	movs	r1, #1
     6e2:	4b0f      	ldr	r3, [pc, #60]	; (720 <console_init+0xe4>)
     6e4:	4798      	blx	r3
	NVIC_EnableIRQ(SERCOM2_IRQn);
     6e6:	2009      	movs	r0, #9
     6e8:	4b0e      	ldr	r3, [pc, #56]	; (724 <console_init+0xe8>)
     6ea:	4798      	blx	r3
}
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}
     6f0:	2000056c 	.word	0x2000056c
     6f4:	2000056e 	.word	0x2000056e
     6f8:	20000572 	.word	0x20000572
     6fc:	20000570 	.word	0x20000570
     700:	41004400 	.word	0x41004400
     704:	40000c00 	.word	0x40000c00
     708:	0000400f 	.word	0x0000400f
     70c:	0000420c 	.word	0x0000420c
     710:	40000400 	.word	0x40000400
     714:	42001000 	.word	0x42001000
     718:	40310004 	.word	0x40310004
     71c:	ffffe282 	.word	0xffffe282
     720:	00000485 	.word	0x00000485
     724:	00000459 	.word	0x00000459

00000728 <console_getc>:


bool console_getc(uint8_t *byte) {
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
	
	if (!UART_RX_FIFO_EMPTY) {
     730:	4b11      	ldr	r3, [pc, #68]	; (778 <console_getc+0x50>)
     732:	881b      	ldrh	r3, [r3, #0]
     734:	b29a      	uxth	r2, r3
     736:	4b11      	ldr	r3, [pc, #68]	; (77c <console_getc+0x54>)
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	b29b      	uxth	r3, r3
     73c:	429a      	cmp	r2, r3
     73e:	d016      	beq.n	76e <console_getc+0x46>
		*byte = uart_console_rx_fifo[uart_console_rx_fifo_readptr];
     740:	4b0d      	ldr	r3, [pc, #52]	; (778 <console_getc+0x50>)
     742:	881b      	ldrh	r3, [r3, #0]
     744:	b29b      	uxth	r3, r3
     746:	1c1a      	adds	r2, r3, #0
     748:	4b0d      	ldr	r3, [pc, #52]	; (780 <console_getc+0x58>)
     74a:	0052      	lsls	r2, r2, #1
     74c:	5ad3      	ldrh	r3, [r2, r3]
     74e:	b29b      	uxth	r3, r3
     750:	b2da      	uxtb	r2, r3
     752:	687b      	ldr	r3, [r7, #4]
     754:	701a      	strb	r2, [r3, #0]
		uart_console_rx_fifo_readptr = (uart_console_rx_fifo_readptr + 1) & UART_CONSOLE_RX_FIFO_MASK;
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <console_getc+0x50>)
     758:	881b      	ldrh	r3, [r3, #0]
     75a:	b29b      	uxth	r3, r3
     75c:	3301      	adds	r3, #1
     75e:	b29b      	uxth	r3, r3
     760:	223f      	movs	r2, #63	; 0x3f
     762:	4013      	ands	r3, r2
     764:	b29a      	uxth	r2, r3
     766:	4b04      	ldr	r3, [pc, #16]	; (778 <console_getc+0x50>)
     768:	801a      	strh	r2, [r3, #0]
		return true;
     76a:	2301      	movs	r3, #1
     76c:	e000      	b.n	770 <console_getc+0x48>
	}
	return false;
     76e:	2300      	movs	r3, #0
}
     770:	1c18      	adds	r0, r3, #0
     772:	46bd      	mov	sp, r7
     774:	b002      	add	sp, #8
     776:	bd80      	pop	{r7, pc}
     778:	20000572 	.word	0x20000572
     77c:	20000570 	.word	0x20000570
     780:	2000046c 	.word	0x2000046c

00000784 <console_putc>:


void console_putc(uint8_t byte) {
     784:	b580      	push	{r7, lr}
     786:	b082      	sub	sp, #8
     788:	af00      	add	r7, sp, #0
     78a:	1c02      	adds	r2, r0, #0
     78c:	1dfb      	adds	r3, r7, #7
     78e:	701a      	strb	r2, [r3, #0]
	
	// wait for room in TX FIFO
	while(UART_CONSOLE_TX_FIFO_FULL);
     790:	46c0      	nop			; (mov r8, r8)
     792:	4b13      	ldr	r3, [pc, #76]	; (7e0 <console_putc+0x5c>)
     794:	881b      	ldrh	r3, [r3, #0]
     796:	b29b      	uxth	r3, r3
     798:	1c1a      	adds	r2, r3, #0
     79a:	4b12      	ldr	r3, [pc, #72]	; (7e4 <console_putc+0x60>)
     79c:	881b      	ldrh	r3, [r3, #0]
     79e:	b29b      	uxth	r3, r3
     7a0:	1ad3      	subs	r3, r2, r3
     7a2:	223f      	movs	r2, #63	; 0x3f
     7a4:	4013      	ands	r3, r2
     7a6:	2b01      	cmp	r3, #1
     7a8:	d0f3      	beq.n	792 <console_putc+0xe>
	
	// stuff byte in FIFO and enable transmit interrupt
	uart_console_tx_fifo[uart_console_tx_fifo_writeptr] = byte;
     7aa:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <console_putc+0x60>)
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	b29b      	uxth	r3, r3
     7b0:	1c1a      	adds	r2, r3, #0
     7b2:	1dfb      	adds	r3, r7, #7
     7b4:	781b      	ldrb	r3, [r3, #0]
     7b6:	b299      	uxth	r1, r3
     7b8:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <console_putc+0x64>)
     7ba:	0052      	lsls	r2, r2, #1
     7bc:	52d1      	strh	r1, [r2, r3]
	uart_console_tx_fifo_writeptr = (uart_console_tx_fifo_writeptr + 1) & UART_CONSOLE_TX_FIFO_MASK;
     7be:	4b09      	ldr	r3, [pc, #36]	; (7e4 <console_putc+0x60>)
     7c0:	881b      	ldrh	r3, [r3, #0]
     7c2:	b29b      	uxth	r3, r3
     7c4:	3301      	adds	r3, #1
     7c6:	b29b      	uxth	r3, r3
     7c8:	223f      	movs	r2, #63	; 0x3f
     7ca:	4013      	ands	r3, r2
     7cc:	b29a      	uxth	r2, r3
     7ce:	4b05      	ldr	r3, [pc, #20]	; (7e4 <console_putc+0x60>)
     7d0:	801a      	strh	r2, [r3, #0]
	SERCOM2->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     7d2:	4b06      	ldr	r3, [pc, #24]	; (7ec <console_putc+0x68>)
     7d4:	2201      	movs	r2, #1
     7d6:	735a      	strb	r2, [r3, #13]
}
     7d8:	46bd      	mov	sp, r7
     7da:	b002      	add	sp, #8
     7dc:	bd80      	pop	{r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	2000056c 	.word	0x2000056c
     7e4:	2000056e 	.word	0x2000056e
     7e8:	200004ec 	.word	0x200004ec
     7ec:	42001000 	.word	0x42001000

000007f0 <console_puts>:

void console_puts(uint8_t *str) {
     7f0:	b580      	push	{r7, lr}
     7f2:	b082      	sub	sp, #8
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
	while(*str) {
     7f8:	e007      	b.n	80a <console_puts+0x1a>
		console_putc((uint8_t) *str);
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	1c18      	adds	r0, r3, #0
     800:	4b05      	ldr	r3, [pc, #20]	; (818 <console_puts+0x28>)
     802:	4798      	blx	r3
		str++;
     804:	687b      	ldr	r3, [r7, #4]
     806:	3301      	adds	r3, #1
     808:	607b      	str	r3, [r7, #4]
	uart_console_tx_fifo_writeptr = (uart_console_tx_fifo_writeptr + 1) & UART_CONSOLE_TX_FIFO_MASK;
	SERCOM2->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

void console_puts(uint8_t *str) {
	while(*str) {
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	781b      	ldrb	r3, [r3, #0]
     80e:	2b00      	cmp	r3, #0
     810:	d1f3      	bne.n	7fa <console_puts+0xa>
		console_putc((uint8_t) *str);
		str++;
	}
}
     812:	46bd      	mov	sp, r7
     814:	b002      	add	sp, #8
     816:	bd80      	pop	{r7, pc}
     818:	00000785 	.word	0x00000785

0000081c <console_gets>:

uint16_t console_gets(uint8_t *str, uint16_t maxlen) {
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	1c0a      	adds	r2, r1, #0
     826:	1cbb      	adds	r3, r7, #2
     828:	801a      	strh	r2, [r3, #0]
	
	uint8_t byte;
	uint16_t length = 0;
     82a:	230e      	movs	r3, #14
     82c:	18fb      	adds	r3, r7, r3
     82e:	2200      	movs	r2, #0
     830:	801a      	strh	r2, [r3, #0]
	
	// leave space for terminating NULL
	if (maxlen == 0) return 0;
     832:	1cbb      	adds	r3, r7, #2
     834:	881b      	ldrh	r3, [r3, #0]
     836:	2b00      	cmp	r3, #0
     838:	d101      	bne.n	83e <console_gets+0x22>
     83a:	2300      	movs	r3, #0
     83c:	e067      	b.n	90e <console_gets+0xf2>
	maxlen--;
     83e:	1cbb      	adds	r3, r7, #2
     840:	881a      	ldrh	r2, [r3, #0]
     842:	1cbb      	adds	r3, r7, #2
     844:	3a01      	subs	r2, #1
     846:	801a      	strh	r2, [r3, #0]
	
	while(1) {
		
		while(!console_getc(&byte));
     848:	46c0      	nop			; (mov r8, r8)
     84a:	230d      	movs	r3, #13
     84c:	18fb      	adds	r3, r7, r3
     84e:	1c18      	adds	r0, r3, #0
     850:	4b31      	ldr	r3, [pc, #196]	; (918 <console_gets+0xfc>)
     852:	4798      	blx	r3
     854:	1c03      	adds	r3, r0, #0
     856:	1c1a      	adds	r2, r3, #0
     858:	2301      	movs	r3, #1
     85a:	4053      	eors	r3, r2
     85c:	b2db      	uxtb	r3, r3
     85e:	2b00      	cmp	r3, #0
     860:	d1f3      	bne.n	84a <console_gets+0x2e>
		
		if ((byte == 13)||(byte == 10)) {
     862:	230d      	movs	r3, #13
     864:	18fb      	adds	r3, r7, r3
     866:	781b      	ldrb	r3, [r3, #0]
     868:	2b0d      	cmp	r3, #13
     86a:	d004      	beq.n	876 <console_gets+0x5a>
     86c:	230d      	movs	r3, #13
     86e:	18fb      	adds	r3, r7, r3
     870:	781b      	ldrb	r3, [r3, #0]
     872:	2b0a      	cmp	r3, #10
     874:	d106      	bne.n	884 <console_gets+0x68>
			
			*str = 0;
     876:	687b      	ldr	r3, [r7, #4]
     878:	2200      	movs	r2, #0
     87a:	701a      	strb	r2, [r3, #0]
			return length;
     87c:	230e      	movs	r3, #14
     87e:	18fb      	adds	r3, r7, r3
     880:	881b      	ldrh	r3, [r3, #0]
     882:	e044      	b.n	90e <console_gets+0xf2>
			
			} else if ((byte==127)||(byte == 8)) {
     884:	230d      	movs	r3, #13
     886:	18fb      	adds	r3, r7, r3
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	2b7f      	cmp	r3, #127	; 0x7f
     88c:	d004      	beq.n	898 <console_gets+0x7c>
     88e:	230d      	movs	r3, #13
     890:	18fb      	adds	r3, r7, r3
     892:	781b      	ldrb	r3, [r3, #0]
     894:	2b08      	cmp	r3, #8
     896:	d11b      	bne.n	8d0 <console_gets+0xb4>
			
				if (length) {
     898:	230e      	movs	r3, #14
     89a:	18fb      	adds	r3, r7, r3
     89c:	881b      	ldrh	r3, [r3, #0]
     89e:	2b00      	cmp	r3, #0
     8a0:	d015      	beq.n	8ce <console_gets+0xb2>
					length--;
     8a2:	230e      	movs	r3, #14
     8a4:	18fb      	adds	r3, r7, r3
     8a6:	881a      	ldrh	r2, [r3, #0]
     8a8:	230e      	movs	r3, #14
     8aa:	18fb      	adds	r3, r7, r3
     8ac:	3a01      	subs	r2, #1
     8ae:	801a      	strh	r2, [r3, #0]
					str--;
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	3b01      	subs	r3, #1
     8b4:	607b      	str	r3, [r7, #4]
					maxlen++;
     8b6:	1cbb      	adds	r3, r7, #2
     8b8:	881a      	ldrh	r2, [r3, #0]
     8ba:	1cbb      	adds	r3, r7, #2
     8bc:	3201      	adds	r2, #1
     8be:	801a      	strh	r2, [r3, #0]
					console_putc(byte);
     8c0:	230d      	movs	r3, #13
     8c2:	18fb      	adds	r3, r7, r3
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	1c18      	adds	r0, r3, #0
     8c8:	4b14      	ldr	r3, [pc, #80]	; (91c <console_gets+0x100>)
     8ca:	4798      	blx	r3
			*str = 0;
			return length;
			
			} else if ((byte==127)||(byte == 8)) {
			
				if (length) {
     8cc:	e01e      	b.n	90c <console_gets+0xf0>
     8ce:	e01d      	b.n	90c <console_gets+0xf0>
					console_putc(byte);
				}
			
			} else {
			
			if (maxlen) {
     8d0:	1cbb      	adds	r3, r7, #2
     8d2:	881b      	ldrh	r3, [r3, #0]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d019      	beq.n	90c <console_gets+0xf0>
				maxlen--;
     8d8:	1cbb      	adds	r3, r7, #2
     8da:	881a      	ldrh	r2, [r3, #0]
     8dc:	1cbb      	adds	r3, r7, #2
     8de:	3a01      	subs	r2, #1
     8e0:	801a      	strh	r2, [r3, #0]
				*str = (char) byte;
     8e2:	230d      	movs	r3, #13
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	781a      	ldrb	r2, [r3, #0]
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	701a      	strb	r2, [r3, #0]
				str++;
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	3301      	adds	r3, #1
     8f0:	607b      	str	r3, [r7, #4]
				length++;
     8f2:	230e      	movs	r3, #14
     8f4:	18fb      	adds	r3, r7, r3
     8f6:	881a      	ldrh	r2, [r3, #0]
     8f8:	230e      	movs	r3, #14
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	3201      	adds	r2, #1
     8fe:	801a      	strh	r2, [r3, #0]
				console_putc(byte);
     900:	230d      	movs	r3, #13
     902:	18fb      	adds	r3, r7, r3
     904:	781b      	ldrb	r3, [r3, #0]
     906:	1c18      	adds	r0, r3, #0
     908:	4b04      	ldr	r3, [pc, #16]	; (91c <console_gets+0x100>)
     90a:	4798      	blx	r3
			}
			
		}
		
	} // end of while(1)
     90c:	e79c      	b.n	848 <console_gets+0x2c>
	
}
     90e:	1c18      	adds	r0, r3, #0
     910:	46bd      	mov	sp, r7
     912:	b004      	add	sp, #16
     914:	bd80      	pop	{r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	00000729 	.word	0x00000729
     91c:	00000785 	.word	0x00000785

00000920 <delay_ms>:
	.global delay_us
	.type delay_us function

delay_ms:
	
	ldr r1,=1000
     920:	4904      	ldr	r1, [pc, #16]	; (934 <_delay_done+0x4>)
	muls r0,r0,r1
     922:	4348      	muls	r0, r1

00000924 <delay_us>:

delay_us:
	ldr r1,=2		// CPU frequency / 4
     924:	4904      	ldr	r1, [pc, #16]	; (938 <_delay_done+0x8>)
	muls r0,r0,r1
     926:	4348      	muls	r0, r1

	// test for zero and exit
	subs r0,#0
     928:	3800      	subs	r0, #0
	beq _delay_done
     92a:	d001      	beq.n	930 <_delay_done>

0000092c <_delay_loop>:

_delay_loop:
	subs r0,#1			// 1 clock
     92c:	3801      	subs	r0, #1
	bne _delay_loop		// 3 clocks
     92e:	d1fd      	bne.n	92c <_delay_loop>

00000930 <_delay_done>:

_delay_done:   
   bx lr  
     930:	4770      	bx	lr
     932:	0000      	.short	0x0000
	.global delay_us
	.type delay_us function

delay_ms:
	
	ldr r1,=1000
     934:	000003e8 	.word	0x000003e8
	muls r0,r0,r1

delay_us:
	ldr r1,=2		// CPU frequency / 4
     938:	00000002 	.word	0x00000002

0000093c <Reset_Handler>:
     93c:	b580      	push	{r7, lr}
     93e:	b082      	sub	sp, #8
     940:	af00      	add	r7, sp, #0
     942:	4b19      	ldr	r3, [pc, #100]	; (9a8 <Reset_Handler+0x6c>)
     944:	607b      	str	r3, [r7, #4]
     946:	4b19      	ldr	r3, [pc, #100]	; (9ac <Reset_Handler+0x70>)
     948:	603b      	str	r3, [r7, #0]
     94a:	687a      	ldr	r2, [r7, #4]
     94c:	683b      	ldr	r3, [r7, #0]
     94e:	429a      	cmp	r2, r3
     950:	d00c      	beq.n	96c <Reset_Handler+0x30>
     952:	e007      	b.n	964 <Reset_Handler+0x28>
     954:	683b      	ldr	r3, [r7, #0]
     956:	1d1a      	adds	r2, r3, #4
     958:	603a      	str	r2, [r7, #0]
     95a:	687a      	ldr	r2, [r7, #4]
     95c:	1d11      	adds	r1, r2, #4
     95e:	6079      	str	r1, [r7, #4]
     960:	6812      	ldr	r2, [r2, #0]
     962:	601a      	str	r2, [r3, #0]
     964:	683a      	ldr	r2, [r7, #0]
     966:	4b12      	ldr	r3, [pc, #72]	; (9b0 <Reset_Handler+0x74>)
     968:	429a      	cmp	r2, r3
     96a:	d3f3      	bcc.n	954 <Reset_Handler+0x18>
     96c:	4b11      	ldr	r3, [pc, #68]	; (9b4 <Reset_Handler+0x78>)
     96e:	603b      	str	r3, [r7, #0]
     970:	e004      	b.n	97c <Reset_Handler+0x40>
     972:	683b      	ldr	r3, [r7, #0]
     974:	1d1a      	adds	r2, r3, #4
     976:	603a      	str	r2, [r7, #0]
     978:	2200      	movs	r2, #0
     97a:	601a      	str	r2, [r3, #0]
     97c:	683a      	ldr	r2, [r7, #0]
     97e:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <Reset_Handler+0x7c>)
     980:	429a      	cmp	r2, r3
     982:	d3f6      	bcc.n	972 <Reset_Handler+0x36>
     984:	4b0d      	ldr	r3, [pc, #52]	; (9bc <Reset_Handler+0x80>)
     986:	607b      	str	r3, [r7, #4]
     988:	4b0d      	ldr	r3, [pc, #52]	; (9c0 <Reset_Handler+0x84>)
     98a:	687a      	ldr	r2, [r7, #4]
     98c:	21ff      	movs	r1, #255	; 0xff
     98e:	438a      	bics	r2, r1
     990:	609a      	str	r2, [r3, #8]
     992:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <Reset_Handler+0x88>)
     994:	685a      	ldr	r2, [r3, #4]
     996:	2180      	movs	r1, #128	; 0x80
     998:	430a      	orrs	r2, r1
     99a:	605a      	str	r2, [r3, #4]
     99c:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <Reset_Handler+0x8c>)
     99e:	4798      	blx	r3
     9a0:	4b0a      	ldr	r3, [pc, #40]	; (9cc <Reset_Handler+0x90>)
     9a2:	4798      	blx	r3
     9a4:	e7fe      	b.n	9a4 <Reset_Handler+0x68>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	000026c4 	.word	0x000026c4
     9ac:	20000000 	.word	0x20000000
     9b0:	20000430 	.word	0x20000430
     9b4:	20000430 	.word	0x20000430
     9b8:	200005b8 	.word	0x200005b8
     9bc:	00000000 	.word	0x00000000
     9c0:	e000ed00 	.word	0xe000ed00
     9c4:	41004000 	.word	0x41004000
     9c8:	00001a95 	.word	0x00001a95
     9cc:	00001169 	.word	0x00001169

000009d0 <Dummy_Handler>:
     9d0:	b580      	push	{r7, lr}
     9d2:	af00      	add	r7, sp, #0
     9d4:	e7fe      	b.n	9d4 <Dummy_Handler+0x4>
     9d6:	46c0      	nop			; (mov r8, r8)

000009d8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     9d8:	b580      	push	{r7, lr}
     9da:	b082      	sub	sp, #8
     9dc:	af00      	add	r7, sp, #0
     9de:	1c02      	adds	r2, r0, #0
     9e0:	1dfb      	adds	r3, r7, #7
     9e2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     9e4:	4b06      	ldr	r3, [pc, #24]	; (a00 <NVIC_EnableIRQ+0x28>)
     9e6:	1dfa      	adds	r2, r7, #7
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	1c11      	adds	r1, r2, #0
     9ec:	221f      	movs	r2, #31
     9ee:	400a      	ands	r2, r1
     9f0:	2101      	movs	r1, #1
     9f2:	4091      	lsls	r1, r2
     9f4:	1c0a      	adds	r2, r1, #0
     9f6:	601a      	str	r2, [r3, #0]
}
     9f8:	46bd      	mov	sp, r7
     9fa:	b002      	add	sp, #8
     9fc:	bd80      	pop	{r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	e000e100 	.word	0xe000e100

00000a04 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
     a04:	b580      	push	{r7, lr}
     a06:	b082      	sub	sp, #8
     a08:	af00      	add	r7, sp, #0
     a0a:	1c02      	adds	r2, r0, #0
     a0c:	1dfb      	adds	r3, r7, #7
     a0e:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     a10:	4a07      	ldr	r2, [pc, #28]	; (a30 <NVIC_SetPendingIRQ+0x2c>)
     a12:	1dfb      	adds	r3, r7, #7
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	1c19      	adds	r1, r3, #0
     a18:	231f      	movs	r3, #31
     a1a:	400b      	ands	r3, r1
     a1c:	2101      	movs	r1, #1
     a1e:	4099      	lsls	r1, r3
     a20:	1c0b      	adds	r3, r1, #0
     a22:	1c19      	adds	r1, r3, #0
     a24:	2380      	movs	r3, #128	; 0x80
     a26:	005b      	lsls	r3, r3, #1
     a28:	50d1      	str	r1, [r2, r3]
}
     a2a:	46bd      	mov	sp, r7
     a2c:	b002      	add	sp, #8
     a2e:	bd80      	pop	{r7, pc}
     a30:	e000e100 	.word	0xe000e100

00000a34 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     a34:	b5b0      	push	{r4, r5, r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	1c02      	adds	r2, r0, #0
     a3c:	6039      	str	r1, [r7, #0]
     a3e:	1dfb      	adds	r3, r7, #7
     a40:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     a42:	1dfb      	adds	r3, r7, #7
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	2b7f      	cmp	r3, #127	; 0x7f
     a48:	d92f      	bls.n	aaa <NVIC_SetPriority+0x76>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     a4a:	4c2d      	ldr	r4, [pc, #180]	; (b00 <NVIC_SetPriority+0xcc>)
     a4c:	1dfb      	adds	r3, r7, #7
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	1c1a      	adds	r2, r3, #0
     a52:	230f      	movs	r3, #15
     a54:	4013      	ands	r3, r2
     a56:	3b08      	subs	r3, #8
     a58:	0899      	lsrs	r1, r3, #2
     a5a:	4a29      	ldr	r2, [pc, #164]	; (b00 <NVIC_SetPriority+0xcc>)
     a5c:	1dfb      	adds	r3, r7, #7
     a5e:	781b      	ldrb	r3, [r3, #0]
     a60:	1c18      	adds	r0, r3, #0
     a62:	230f      	movs	r3, #15
     a64:	4003      	ands	r3, r0
     a66:	3b08      	subs	r3, #8
     a68:	089b      	lsrs	r3, r3, #2
     a6a:	3306      	adds	r3, #6
     a6c:	009b      	lsls	r3, r3, #2
     a6e:	18d3      	adds	r3, r2, r3
     a70:	685b      	ldr	r3, [r3, #4]
     a72:	1dfa      	adds	r2, r7, #7
     a74:	7812      	ldrb	r2, [r2, #0]
     a76:	1c10      	adds	r0, r2, #0
     a78:	2203      	movs	r2, #3
     a7a:	4002      	ands	r2, r0
     a7c:	00d2      	lsls	r2, r2, #3
     a7e:	1c10      	adds	r0, r2, #0
     a80:	22ff      	movs	r2, #255	; 0xff
     a82:	4082      	lsls	r2, r0
     a84:	43d2      	mvns	r2, r2
     a86:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     a88:	683b      	ldr	r3, [r7, #0]
     a8a:	019b      	lsls	r3, r3, #6
     a8c:	20ff      	movs	r0, #255	; 0xff
     a8e:	4003      	ands	r3, r0
     a90:	1df8      	adds	r0, r7, #7
     a92:	7800      	ldrb	r0, [r0, #0]
     a94:	1c05      	adds	r5, r0, #0
     a96:	2003      	movs	r0, #3
     a98:	4028      	ands	r0, r5
     a9a:	00c0      	lsls	r0, r0, #3
     a9c:	4083      	lsls	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     a9e:	431a      	orrs	r2, r3
     aa0:	1d8b      	adds	r3, r1, #6
     aa2:	009b      	lsls	r3, r3, #2
     aa4:	18e3      	adds	r3, r4, r3
     aa6:	605a      	str	r2, [r3, #4]
     aa8:	e026      	b.n	af8 <NVIC_SetPriority+0xc4>
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     aaa:	4c16      	ldr	r4, [pc, #88]	; (b04 <NVIC_SetPriority+0xd0>)
     aac:	1dfb      	adds	r3, r7, #7
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	b25b      	sxtb	r3, r3
     ab2:	089b      	lsrs	r3, r3, #2
     ab4:	4913      	ldr	r1, [pc, #76]	; (b04 <NVIC_SetPriority+0xd0>)
     ab6:	1dfa      	adds	r2, r7, #7
     ab8:	7812      	ldrb	r2, [r2, #0]
     aba:	b252      	sxtb	r2, r2
     abc:	0892      	lsrs	r2, r2, #2
     abe:	32c0      	adds	r2, #192	; 0xc0
     ac0:	0092      	lsls	r2, r2, #2
     ac2:	5852      	ldr	r2, [r2, r1]
     ac4:	1df9      	adds	r1, r7, #7
     ac6:	7809      	ldrb	r1, [r1, #0]
     ac8:	1c08      	adds	r0, r1, #0
     aca:	2103      	movs	r1, #3
     acc:	4001      	ands	r1, r0
     ace:	00c9      	lsls	r1, r1, #3
     ad0:	1c08      	adds	r0, r1, #0
     ad2:	21ff      	movs	r1, #255	; 0xff
     ad4:	4081      	lsls	r1, r0
     ad6:	43c9      	mvns	r1, r1
     ad8:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     ada:	683a      	ldr	r2, [r7, #0]
     adc:	0192      	lsls	r2, r2, #6
     ade:	20ff      	movs	r0, #255	; 0xff
     ae0:	4002      	ands	r2, r0
     ae2:	1df8      	adds	r0, r7, #7
     ae4:	7800      	ldrb	r0, [r0, #0]
     ae6:	1c05      	adds	r5, r0, #0
     ae8:	2003      	movs	r0, #3
     aea:	4028      	ands	r0, r5
     aec:	00c0      	lsls	r0, r0, #3
     aee:	4082      	lsls	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     af0:	430a      	orrs	r2, r1
     af2:	33c0      	adds	r3, #192	; 0xc0
     af4:	009b      	lsls	r3, r3, #2
     af6:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     af8:	46bd      	mov	sp, r7
     afa:	b002      	add	sp, #8
     afc:	bdb0      	pop	{r4, r5, r7, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	e000ed00 	.word	0xe000ed00
     b04:	e000e100 	.word	0xe000e100

00000b08 <TC0_Handler>:
 
Main timer interrupt handler

*/

void TC0_Handler(void) {
     b08:	b580      	push	{r7, lr}
     b0a:	af00      	add	r7, sp, #0
	
	// overflow: turn off anode
	if (TC0->COUNT8.INTFLAG.bit.OVF) {
     b0c:	4b51      	ldr	r3, [pc, #324]	; (c54 <TC0_Handler+0x14c>)
     b0e:	7b9b      	ldrb	r3, [r3, #14]
     b10:	2201      	movs	r2, #1
     b12:	4013      	ands	r3, r2
     b14:	b2db      	uxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	d00c      	beq.n	b34 <TC0_Handler+0x2c>
		PORT->Group[0].OUTCLR.reg = PA_ANODE_CLEAR_MASK;
     b1a:	4b4f      	ldr	r3, [pc, #316]	; (c58 <TC0_Handler+0x150>)
     b1c:	22d8      	movs	r2, #216	; 0xd8
     b1e:	0112      	lsls	r2, r2, #4
     b20:	615a      	str	r2, [r3, #20]
		display.active_digit++;
     b22:	4b4e      	ldr	r3, [pc, #312]	; (c5c <TC0_Handler+0x154>)
     b24:	791b      	ldrb	r3, [r3, #4]
     b26:	3301      	adds	r3, #1
     b28:	b2da      	uxtb	r2, r3
     b2a:	4b4c      	ldr	r3, [pc, #304]	; (c5c <TC0_Handler+0x154>)
     b2c:	711a      	strb	r2, [r3, #4]
		TC0->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b2e:	4b49      	ldr	r3, [pc, #292]	; (c54 <TC0_Handler+0x14c>)
     b30:	2201      	movs	r2, #1
     b32:	739a      	strb	r2, [r3, #14]
	}
	
	// match/compare 0: switch cathodes
	if (TC0->COUNT8.INTFLAG.bit.MC0) {
     b34:	4b47      	ldr	r3, [pc, #284]	; (c54 <TC0_Handler+0x14c>)
     b36:	7b9b      	ldrb	r3, [r3, #14]
     b38:	b2db      	uxtb	r3, r3
     b3a:	091b      	lsrs	r3, r3, #4
     b3c:	1c1a      	adds	r2, r3, #0
     b3e:	2301      	movs	r3, #1
     b40:	4013      	ands	r3, r2
     b42:	b2db      	uxtb	r3, r3
     b44:	2b00      	cmp	r3, #0
     b46:	d068      	beq.n	c1a <TC0_Handler+0x112>
		// turn on next cathode
		PORT->Group[0].OUTCLR.reg = PA_CATHODE_CLEAR_MASK;
     b48:	4b43      	ldr	r3, [pc, #268]	; (c58 <TC0_Handler+0x150>)
     b4a:	4a45      	ldr	r2, [pc, #276]	; (c60 <TC0_Handler+0x158>)
     b4c:	615a      	str	r2, [r3, #20]
		PORT->Group[1].OUTCLR.reg = PB_CATHODE_CLEAR_MASK;
     b4e:	4942      	ldr	r1, [pc, #264]	; (c58 <TC0_Handler+0x150>)
     b50:	2294      	movs	r2, #148	; 0x94
     b52:	23c0      	movs	r3, #192	; 0xc0
     b54:	011b      	lsls	r3, r3, #4
     b56:	508b      	str	r3, [r1, r2]
		
		switch(display.active_digit & 0x03) {
     b58:	4b40      	ldr	r3, [pc, #256]	; (c5c <TC0_Handler+0x154>)
     b5a:	791b      	ldrb	r3, [r3, #4]
     b5c:	1c1a      	adds	r2, r3, #0
     b5e:	2303      	movs	r3, #3
     b60:	4013      	ands	r3, r2
     b62:	2b01      	cmp	r3, #1
     b64:	d01a      	beq.n	b9c <TC0_Handler+0x94>
     b66:	dc02      	bgt.n	b6e <TC0_Handler+0x66>
     b68:	2b00      	cmp	r3, #0
     b6a:	d005      	beq.n	b78 <TC0_Handler+0x70>
     b6c:	e052      	b.n	c14 <TC0_Handler+0x10c>
     b6e:	2b02      	cmp	r3, #2
     b70:	d028      	beq.n	bc4 <TC0_Handler+0xbc>
     b72:	2b03      	cmp	r3, #3
     b74:	d03a      	beq.n	bec <TC0_Handler+0xe4>
     b76:	e04d      	b.n	c14 <TC0_Handler+0x10c>
			case 0:
				PORT->Group[0].OUTSET.reg = pa_cathode_enable_mask[0][display.displaytime.minutes];
     b78:	4b37      	ldr	r3, [pc, #220]	; (c58 <TC0_Handler+0x150>)
     b7a:	4a38      	ldr	r2, [pc, #224]	; (c5c <TC0_Handler+0x154>)
     b7c:	79d2      	ldrb	r2, [r2, #7]
     b7e:	1c11      	adds	r1, r2, #0
     b80:	4a38      	ldr	r2, [pc, #224]	; (c64 <TC0_Handler+0x15c>)
     b82:	0089      	lsls	r1, r1, #2
     b84:	588a      	ldr	r2, [r1, r2]
     b86:	619a      	str	r2, [r3, #24]
				PORT->Group[1].OUTSET.reg = pb_cathode_enable_mask[0][display.displaytime.minutes];
     b88:	4933      	ldr	r1, [pc, #204]	; (c58 <TC0_Handler+0x150>)
     b8a:	4b34      	ldr	r3, [pc, #208]	; (c5c <TC0_Handler+0x154>)
     b8c:	79db      	ldrb	r3, [r3, #7]
     b8e:	1c1a      	adds	r2, r3, #0
     b90:	4b35      	ldr	r3, [pc, #212]	; (c68 <TC0_Handler+0x160>)
     b92:	0092      	lsls	r2, r2, #2
     b94:	58d3      	ldr	r3, [r2, r3]
     b96:	2298      	movs	r2, #152	; 0x98
     b98:	508b      	str	r3, [r1, r2]
			break;
     b9a:	e03b      	b.n	c14 <TC0_Handler+0x10c>
			case 1:
				PORT->Group[0].OUTSET.reg = pa_cathode_enable_mask[1][display.displaytime.tenminutes];
     b9c:	4b2e      	ldr	r3, [pc, #184]	; (c58 <TC0_Handler+0x150>)
     b9e:	4a2f      	ldr	r2, [pc, #188]	; (c5c <TC0_Handler+0x154>)
     ba0:	7a12      	ldrb	r2, [r2, #8]
     ba2:	1c11      	adds	r1, r2, #0
     ba4:	4a2f      	ldr	r2, [pc, #188]	; (c64 <TC0_Handler+0x15c>)
     ba6:	310a      	adds	r1, #10
     ba8:	0089      	lsls	r1, r1, #2
     baa:	588a      	ldr	r2, [r1, r2]
     bac:	619a      	str	r2, [r3, #24]
				PORT->Group[1].OUTSET.reg = pb_cathode_enable_mask[1][display.displaytime.tenminutes];
     bae:	492a      	ldr	r1, [pc, #168]	; (c58 <TC0_Handler+0x150>)
     bb0:	4b2a      	ldr	r3, [pc, #168]	; (c5c <TC0_Handler+0x154>)
     bb2:	7a1b      	ldrb	r3, [r3, #8]
     bb4:	1c1a      	adds	r2, r3, #0
     bb6:	4b2c      	ldr	r3, [pc, #176]	; (c68 <TC0_Handler+0x160>)
     bb8:	320a      	adds	r2, #10
     bba:	0092      	lsls	r2, r2, #2
     bbc:	58d3      	ldr	r3, [r2, r3]
     bbe:	2298      	movs	r2, #152	; 0x98
     bc0:	508b      	str	r3, [r1, r2]
			break;
     bc2:	e027      	b.n	c14 <TC0_Handler+0x10c>
			case 2:
				PORT->Group[0].OUTSET.reg = pa_cathode_enable_mask[2][display.displaytime.hours];
     bc4:	4b24      	ldr	r3, [pc, #144]	; (c58 <TC0_Handler+0x150>)
     bc6:	4a25      	ldr	r2, [pc, #148]	; (c5c <TC0_Handler+0x154>)
     bc8:	7a52      	ldrb	r2, [r2, #9]
     bca:	1c11      	adds	r1, r2, #0
     bcc:	4a25      	ldr	r2, [pc, #148]	; (c64 <TC0_Handler+0x15c>)
     bce:	3114      	adds	r1, #20
     bd0:	0089      	lsls	r1, r1, #2
     bd2:	588a      	ldr	r2, [r1, r2]
     bd4:	619a      	str	r2, [r3, #24]
				PORT->Group[1].OUTSET.reg = pb_cathode_enable_mask[2][display.displaytime.hours];
     bd6:	4920      	ldr	r1, [pc, #128]	; (c58 <TC0_Handler+0x150>)
     bd8:	4b20      	ldr	r3, [pc, #128]	; (c5c <TC0_Handler+0x154>)
     bda:	7a5b      	ldrb	r3, [r3, #9]
     bdc:	1c1a      	adds	r2, r3, #0
     bde:	4b22      	ldr	r3, [pc, #136]	; (c68 <TC0_Handler+0x160>)
     be0:	3214      	adds	r2, #20
     be2:	0092      	lsls	r2, r2, #2
     be4:	58d3      	ldr	r3, [r2, r3]
     be6:	2298      	movs	r2, #152	; 0x98
     be8:	508b      	str	r3, [r1, r2]
			break;
     bea:	e013      	b.n	c14 <TC0_Handler+0x10c>
			case 3:
				PORT->Group[0].OUTSET.reg = pa_cathode_enable_mask[3][display.displaytime.tenhours];
     bec:	4b1a      	ldr	r3, [pc, #104]	; (c58 <TC0_Handler+0x150>)
     bee:	4a1b      	ldr	r2, [pc, #108]	; (c5c <TC0_Handler+0x154>)
     bf0:	7a92      	ldrb	r2, [r2, #10]
     bf2:	1c11      	adds	r1, r2, #0
     bf4:	4a1b      	ldr	r2, [pc, #108]	; (c64 <TC0_Handler+0x15c>)
     bf6:	311e      	adds	r1, #30
     bf8:	0089      	lsls	r1, r1, #2
     bfa:	588a      	ldr	r2, [r1, r2]
     bfc:	619a      	str	r2, [r3, #24]
				PORT->Group[1].OUTSET.reg = pb_cathode_enable_mask[3][display.displaytime.tenhours];
     bfe:	4916      	ldr	r1, [pc, #88]	; (c58 <TC0_Handler+0x150>)
     c00:	4b16      	ldr	r3, [pc, #88]	; (c5c <TC0_Handler+0x154>)
     c02:	7a9b      	ldrb	r3, [r3, #10]
     c04:	1c1a      	adds	r2, r3, #0
     c06:	4b18      	ldr	r3, [pc, #96]	; (c68 <TC0_Handler+0x160>)
     c08:	321e      	adds	r2, #30
     c0a:	0092      	lsls	r2, r2, #2
     c0c:	58d3      	ldr	r3, [r2, r3]
     c0e:	2298      	movs	r2, #152	; 0x98
     c10:	508b      	str	r3, [r1, r2]
			break;
     c12:	46c0      	nop			; (mov r8, r8)
		}

		TC0->COUNT8.INTFLAG.reg = TC_INTFLAG_MC0;
     c14:	4b0f      	ldr	r3, [pc, #60]	; (c54 <TC0_Handler+0x14c>)
     c16:	2210      	movs	r2, #16
     c18:	739a      	strb	r2, [r3, #14]
	}
	
	// match/compare 2: enable next anode, call display_update() and cal_update()
	if (TC0->COUNT8.INTFLAG.bit.MC1) {
     c1a:	4b0e      	ldr	r3, [pc, #56]	; (c54 <TC0_Handler+0x14c>)
     c1c:	7b9b      	ldrb	r3, [r3, #14]
     c1e:	b2db      	uxtb	r3, r3
     c20:	095b      	lsrs	r3, r3, #5
     c22:	1c1a      	adds	r2, r3, #0
     c24:	2301      	movs	r3, #1
     c26:	4013      	ands	r3, r2
     c28:	b2db      	uxtb	r3, r3
     c2a:	2b00      	cmp	r3, #0
     c2c:	d010      	beq.n	c50 <TC0_Handler+0x148>
		PORT->Group[0].OUTSET.reg = pa_anode_enable_mask[display.active_digit & 0x03];
     c2e:	4b0a      	ldr	r3, [pc, #40]	; (c58 <TC0_Handler+0x150>)
     c30:	4a0a      	ldr	r2, [pc, #40]	; (c5c <TC0_Handler+0x154>)
     c32:	7912      	ldrb	r2, [r2, #4]
     c34:	1c11      	adds	r1, r2, #0
     c36:	2203      	movs	r2, #3
     c38:	4011      	ands	r1, r2
     c3a:	4a0c      	ldr	r2, [pc, #48]	; (c6c <TC0_Handler+0x164>)
     c3c:	0089      	lsls	r1, r1, #2
     c3e:	588a      	ldr	r2, [r1, r2]
     c40:	619a      	str	r2, [r3, #24]
		display_update();
     c42:	4b0b      	ldr	r3, [pc, #44]	; (c70 <TC0_Handler+0x168>)
     c44:	4798      	blx	r3
		cal_update();
     c46:	4b0b      	ldr	r3, [pc, #44]	; (c74 <TC0_Handler+0x16c>)
     c48:	4798      	blx	r3
		TC0->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <TC0_Handler+0x14c>)
     c4c:	2220      	movs	r2, #32
     c4e:	739a      	strb	r2, [r3, #14]
	}
}
     c50:	46bd      	mov	sp, r7
     c52:	bd80      	pop	{r7, pc}
     c54:	42002000 	.word	0x42002000
     c58:	41004400 	.word	0x41004400
     c5c:	20000574 	.word	0x20000574
     c60:	001f3200 	.word	0x001f3200
     c64:	000021a0 	.word	0x000021a0
     c68:	00002240 	.word	0x00002240
     c6c:	00002190 	.word	0x00002190
     c70:	00000dc5 	.word	0x00000dc5
     c74:	00000105 	.word	0x00000105

00000c78 <TC1_Handler>:

// "Write time to RTC" interrupt

void TC1_Handler(void) {
     c78:	b580      	push	{r7, lr}
     c7a:	af00      	add	r7, sp, #0
	rtc_set_time(&display.rtc_handoff_time);
     c7c:	4b02      	ldr	r3, [pc, #8]	; (c88 <TC1_Handler+0x10>)
     c7e:	1c18      	adds	r0, r3, #0
     c80:	4b02      	ldr	r3, [pc, #8]	; (c8c <TC1_Handler+0x14>)
     c82:	4798      	blx	r3
}
     c84:	46bd      	mov	sp, r7
     c86:	bd80      	pop	{r7, pc}
     c88:	20000582 	.word	0x20000582
     c8c:	00001a01 	.word	0x00001a01

00000c90 <display_init>:



void display_init(void) {
     c90:	b580      	push	{r7, lr}
     c92:	af00      	add	r7, sp, #0
	
	// set up vars
	display.active_digit = 0;
     c94:	4b41      	ldr	r3, [pc, #260]	; (d9c <display_init+0x10c>)
     c96:	2200      	movs	r2, #0
     c98:	711a      	strb	r2, [r3, #4]
	display.hour_debounce_counter = 0;
     c9a:	4b40      	ldr	r3, [pc, #256]	; (d9c <display_init+0x10c>)
     c9c:	2200      	movs	r2, #0
     c9e:	709a      	strb	r2, [r3, #2]
	display.minute_pushed = false;
     ca0:	4b3e      	ldr	r3, [pc, #248]	; (d9c <display_init+0x10c>)
     ca2:	2200      	movs	r2, #0
     ca4:	705a      	strb	r2, [r3, #1]
	display.minute_debounce_counter = 0;
     ca6:	4b3d      	ldr	r3, [pc, #244]	; (d9c <display_init+0x10c>)
     ca8:	2200      	movs	r2, #0
     caa:	701a      	strb	r2, [r3, #0]
	display.minute_pushed = false;
     cac:	4b3b      	ldr	r3, [pc, #236]	; (d9c <display_init+0x10c>)
     cae:	2200      	movs	r2, #0
     cb0:	705a      	strb	r2, [r3, #1]

	display.prev_int_sense = true;
     cb2:	4b3a      	ldr	r3, [pc, #232]	; (d9c <display_init+0x10c>)
     cb4:	2201      	movs	r2, #1
     cb6:	715a      	strb	r2, [r3, #5]
	display.rtc_handoff_counter = 0;
     cb8:	4b38      	ldr	r3, [pc, #224]	; (d9c <display_init+0x10c>)
     cba:	2200      	movs	r2, #0
     cbc:	819a      	strh	r2, [r3, #12]
	
	// set up TC0 - use OSC32K (GCLK3) as time source
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK3 | GCLK_CLKCTRL_ID_TC0_TC1;
     cbe:	4b38      	ldr	r3, [pc, #224]	; (da0 <display_init+0x110>)
     cc0:	4a38      	ldr	r2, [pc, #224]	; (da4 <display_init+0x114>)
     cc2:	805a      	strh	r2, [r3, #2]
	// enable AHB clock
	PM->APBCMASK.reg |= PM_APBCMASK_TC0;
     cc4:	4b38      	ldr	r3, [pc, #224]	; (da8 <display_init+0x118>)
     cc6:	4a38      	ldr	r2, [pc, #224]	; (da8 <display_init+0x118>)
     cc8:	6a12      	ldr	r2, [r2, #32]
     cca:	2180      	movs	r1, #128	; 0x80
     ccc:	0049      	lsls	r1, r1, #1
     cce:	430a      	orrs	r2, r1
     cd0:	621a      	str	r2, [r3, #32]
	
	// configure TC0 for 256Hz overflow (32768Hz / 1 / 128)
	TC0->COUNT8.CTRLA.reg = TC_CTRLA_RUNSTDBY | TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_WAVEGEN_NFRQ | TC_CTRLA_MODE_COUNT8 | (0<<TC_CTRLA_ENABLE_Pos);
     cd2:	4b36      	ldr	r3, [pc, #216]	; (dac <display_init+0x11c>)
     cd4:	4a36      	ldr	r2, [pc, #216]	; (db0 <display_init+0x120>)
     cd6:	801a      	strh	r2, [r3, #0]
	
	TC0->COUNT8.CC[0].reg = 0x08;
     cd8:	4b34      	ldr	r3, [pc, #208]	; (dac <display_init+0x11c>)
     cda:	2208      	movs	r2, #8
     cdc:	761a      	strb	r2, [r3, #24]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	4b32      	ldr	r3, [pc, #200]	; (dac <display_init+0x11c>)
     ce2:	7bdb      	ldrb	r3, [r3, #15]
     ce4:	b2db      	uxtb	r3, r3
     ce6:	b2db      	uxtb	r3, r3
     ce8:	b25b      	sxtb	r3, r3
     cea:	2b00      	cmp	r3, #0
     cec:	dbf8      	blt.n	ce0 <display_init+0x50>
	TC0->COUNT8.CC[1].reg = 0x10;
     cee:	4b2f      	ldr	r3, [pc, #188]	; (dac <display_init+0x11c>)
     cf0:	2210      	movs	r2, #16
     cf2:	765a      	strb	r2, [r3, #25]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     cf4:	46c0      	nop			; (mov r8, r8)
     cf6:	4b2d      	ldr	r3, [pc, #180]	; (dac <display_init+0x11c>)
     cf8:	7bdb      	ldrb	r3, [r3, #15]
     cfa:	b2db      	uxtb	r3, r3
     cfc:	b2db      	uxtb	r3, r3
     cfe:	b25b      	sxtb	r3, r3
     d00:	2b00      	cmp	r3, #0
     d02:	dbf8      	blt.n	cf6 <display_init+0x66>
	TC0->COUNT8.PER.reg = 0x7F;
     d04:	4b29      	ldr	r3, [pc, #164]	; (dac <display_init+0x11c>)
     d06:	227f      	movs	r2, #127	; 0x7f
     d08:	751a      	strb	r2, [r3, #20]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	4b27      	ldr	r3, [pc, #156]	; (dac <display_init+0x11c>)
     d0e:	7bdb      	ldrb	r3, [r3, #15]
     d10:	b2db      	uxtb	r3, r3
     d12:	b2db      	uxtb	r3, r3
     d14:	b25b      	sxtb	r3, r3
     d16:	2b00      	cmp	r3, #0
     d18:	dbf8      	blt.n	d0c <display_init+0x7c>
	TC0->COUNT8.COUNT.reg = 0x01;
     d1a:	4b24      	ldr	r3, [pc, #144]	; (dac <display_init+0x11c>)
     d1c:	2201      	movs	r2, #1
     d1e:	741a      	strb	r2, [r3, #16]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     d20:	46c0      	nop			; (mov r8, r8)
     d22:	4b22      	ldr	r3, [pc, #136]	; (dac <display_init+0x11c>)
     d24:	7bdb      	ldrb	r3, [r3, #15]
     d26:	b2db      	uxtb	r3, r3
     d28:	b2db      	uxtb	r3, r3
     d2a:	b25b      	sxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	dbf8      	blt.n	d22 <display_init+0x92>
	TC0->COUNT8.CTRLBCLR.reg = TC_CTRLBCLR_DIR;	
     d30:	4b1e      	ldr	r3, [pc, #120]	; (dac <display_init+0x11c>)
     d32:	2201      	movs	r2, #1
     d34:	711a      	strb	r2, [r3, #4]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	4b1c      	ldr	r3, [pc, #112]	; (dac <display_init+0x11c>)
     d3a:	7bdb      	ldrb	r3, [r3, #15]
     d3c:	b2db      	uxtb	r3, r3
     d3e:	b2db      	uxtb	r3, r3
     d40:	b25b      	sxtb	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	dbf8      	blt.n	d38 <display_init+0xa8>
	TC0->COUNT8.CTRLC.reg = 0;
     d46:	4b19      	ldr	r3, [pc, #100]	; (dac <display_init+0x11c>)
     d48:	2200      	movs	r2, #0
     d4a:	719a      	strb	r2, [r3, #6]
	while(TC0->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY);
     d4c:	46c0      	nop			; (mov r8, r8)
     d4e:	4b17      	ldr	r3, [pc, #92]	; (dac <display_init+0x11c>)
     d50:	7bdb      	ldrb	r3, [r3, #15]
     d52:	b2db      	uxtb	r3, r3
     d54:	b2db      	uxtb	r3, r3
     d56:	b25b      	sxtb	r3, r3
     d58:	2b00      	cmp	r3, #0
     d5a:	dbf8      	blt.n	d4e <display_init+0xbe>
	
	// fetch time from RTC into display.displaytime
	rtc_get_time(&display.displaytime);
     d5c:	4b15      	ldr	r3, [pc, #84]	; (db4 <display_init+0x124>)
     d5e:	1c18      	adds	r0, r3, #0
     d60:	4b15      	ldr	r3, [pc, #84]	; (db8 <display_init+0x128>)
     d62:	4798      	blx	r3

	// enable TC IRQs in NVIC
	
	// TC0 is the 256Hz interrupt
	// use medium priority; RTC write interrupt is priority 3, UART is priority 1.
	NVIC_SetPriority(TC0_IRQn,2);
     d64:	200d      	movs	r0, #13
     d66:	2102      	movs	r1, #2
     d68:	4b14      	ldr	r3, [pc, #80]	; (dbc <display_init+0x12c>)
     d6a:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
     d6c:	200d      	movs	r0, #13
     d6e:	4b14      	ldr	r3, [pc, #80]	; (dc0 <display_init+0x130>)
     d70:	4798      	blx	r3
	
	// TC1's interrupt line is used to update the RTC.
	// TC1 isn't actually used for the function, we're just stealing its IRQ line.
	NVIC_SetPriority(TC1_IRQn,3);
     d72:	200e      	movs	r0, #14
     d74:	2103      	movs	r1, #3
     d76:	4b11      	ldr	r3, [pc, #68]	; (dbc <display_init+0x12c>)
     d78:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
     d7a:	200e      	movs	r0, #14
     d7c:	4b10      	ldr	r3, [pc, #64]	; (dc0 <display_init+0x130>)
     d7e:	4798      	blx	r3
	
	// clear CC and overflow interrupt flags
	TC0->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1 | TC_INTFLAG_MC0 | TC_INTFLAG_OVF;
     d80:	4b0a      	ldr	r3, [pc, #40]	; (dac <display_init+0x11c>)
     d82:	2231      	movs	r2, #49	; 0x31
     d84:	739a      	strb	r2, [r3, #14]
	// enable interrupt
	TC0->COUNT8.INTENSET.reg = TC_INTENSET_MC1 | TC_INTENSET_MC0 | TC_INTENSET_OVF;
     d86:	4b09      	ldr	r3, [pc, #36]	; (dac <display_init+0x11c>)
     d88:	2231      	movs	r2, #49	; 0x31
     d8a:	735a      	strb	r2, [r3, #13]
	// and enable timer
	TC0->COUNT8.CTRLA.bit.ENABLE = 1;
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <display_init+0x11c>)
     d8e:	881a      	ldrh	r2, [r3, #0]
     d90:	2102      	movs	r1, #2
     d92:	430a      	orrs	r2, r1
     d94:	801a      	strh	r2, [r3, #0]
	
	// lastly enable DC/DC!
	//PORT->Group[0].OUTSET.reg = (1<<6);
}
     d96:	46bd      	mov	sp, r7
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	20000574 	.word	0x20000574
     da0:	40000c00 	.word	0x40000c00
     da4:	00004313 	.word	0x00004313
     da8:	40000400 	.word	0x40000400
     dac:	42002000 	.word	0x42002000
     db0:	00000804 	.word	0x00000804
     db4:	2000057a 	.word	0x2000057a
     db8:	00001981 	.word	0x00001981
     dbc:	00000a35 	.word	0x00000a35
     dc0:	000009d9 	.word	0x000009d9

00000dc4 <display_update>:



void display_update(void) {
     dc4:	b590      	push	{r4, r7, lr}
     dc6:	b083      	sub	sp, #12
     dc8:	af00      	add	r7, sp, #0
	
	// step #1 - look for RTC /INT edge, int_edge = true if edge occurs.
	bool int_sense = ((PORT->Group[0].IN.reg & INT_SENSE_PA_GPIO) == 0);
     dca:	4b9a      	ldr	r3, [pc, #616]	; (1034 <display_update+0x270>)
     dcc:	6a1a      	ldr	r2, [r3, #32]
     dce:	2380      	movs	r3, #128	; 0x80
     dd0:	039b      	lsls	r3, r3, #14
     dd2:	401a      	ands	r2, r3
     dd4:	1d7b      	adds	r3, r7, #5
     dd6:	4251      	negs	r1, r2
     dd8:	414a      	adcs	r2, r1
     dda:	701a      	strb	r2, [r3, #0]
	bool int_edge = !(display.prev_int_sense) && int_sense;
     ddc:	4b96      	ldr	r3, [pc, #600]	; (1038 <display_update+0x274>)
     dde:	795b      	ldrb	r3, [r3, #5]
     de0:	2201      	movs	r2, #1
     de2:	4053      	eors	r3, r2
     de4:	b2db      	uxtb	r3, r3
     de6:	2b00      	cmp	r3, #0
     de8:	d005      	beq.n	df6 <display_update+0x32>
     dea:	1d7b      	adds	r3, r7, #5
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	2b00      	cmp	r3, #0
     df0:	d001      	beq.n	df6 <display_update+0x32>
     df2:	2201      	movs	r2, #1
     df4:	e000      	b.n	df8 <display_update+0x34>
     df6:	2200      	movs	r2, #0
     df8:	1d3b      	adds	r3, r7, #4
     dfa:	701a      	strb	r2, [r3, #0]
     dfc:	781a      	ldrb	r2, [r3, #0]
     dfe:	2101      	movs	r1, #1
     e00:	400a      	ands	r2, r1
     e02:	701a      	strb	r2, [r3, #0]
	display.prev_int_sense = int_sense;
     e04:	4b8c      	ldr	r3, [pc, #560]	; (1038 <display_update+0x274>)
     e06:	1d7a      	adds	r2, r7, #5
     e08:	7812      	ldrb	r2, [r2, #0]
     e0a:	715a      	strb	r2, [r3, #5]
	
	// step #2 - debounce buttons
	bool minute_push_edge = false;
     e0c:	1dfb      	adds	r3, r7, #7
     e0e:	2200      	movs	r2, #0
     e10:	701a      	strb	r2, [r3, #0]
	if ((PORT->Group[0].IN.reg & MINUTE_SENSE_PA_GPIO) == 0) {
     e12:	4b88      	ldr	r3, [pc, #544]	; (1034 <display_update+0x270>)
     e14:	6a1b      	ldr	r3, [r3, #32]
     e16:	2201      	movs	r2, #1
     e18:	4013      	ands	r3, r2
     e1a:	d11b      	bne.n	e54 <display_update+0x90>
		if (display.minute_debounce_counter < BUTTON_DEBOUNCE_COUNT) display.minute_debounce_counter++;
     e1c:	4b86      	ldr	r3, [pc, #536]	; (1038 <display_update+0x274>)
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	2b04      	cmp	r3, #4
     e22:	d805      	bhi.n	e30 <display_update+0x6c>
     e24:	4b84      	ldr	r3, [pc, #528]	; (1038 <display_update+0x274>)
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	3301      	adds	r3, #1
     e2a:	b2da      	uxtb	r2, r3
     e2c:	4b82      	ldr	r3, [pc, #520]	; (1038 <display_update+0x274>)
     e2e:	701a      	strb	r2, [r3, #0]
		if (display.minute_debounce_counter == BUTTON_DEBOUNCE_COUNT) {
     e30:	4b81      	ldr	r3, [pc, #516]	; (1038 <display_update+0x274>)
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	2b05      	cmp	r3, #5
     e36:	d11e      	bne.n	e76 <display_update+0xb2>
			if (!display.minute_pushed) {
     e38:	4b7f      	ldr	r3, [pc, #508]	; (1038 <display_update+0x274>)
     e3a:	785b      	ldrb	r3, [r3, #1]
     e3c:	2201      	movs	r2, #1
     e3e:	4053      	eors	r3, r2
     e40:	b2db      	uxtb	r3, r3
     e42:	2b00      	cmp	r3, #0
     e44:	d017      	beq.n	e76 <display_update+0xb2>
				minute_push_edge = true;
     e46:	1dfb      	adds	r3, r7, #7
     e48:	2201      	movs	r2, #1
     e4a:	701a      	strb	r2, [r3, #0]
				display.minute_pushed = true;
     e4c:	4b7a      	ldr	r3, [pc, #488]	; (1038 <display_update+0x274>)
     e4e:	2201      	movs	r2, #1
     e50:	705a      	strb	r2, [r3, #1]
     e52:	e010      	b.n	e76 <display_update+0xb2>
			}
		}
	} else {
		if (display.minute_debounce_counter) display.minute_debounce_counter--;
     e54:	4b78      	ldr	r3, [pc, #480]	; (1038 <display_update+0x274>)
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b00      	cmp	r3, #0
     e5a:	d005      	beq.n	e68 <display_update+0xa4>
     e5c:	4b76      	ldr	r3, [pc, #472]	; (1038 <display_update+0x274>)
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	3b01      	subs	r3, #1
     e62:	b2da      	uxtb	r2, r3
     e64:	4b74      	ldr	r3, [pc, #464]	; (1038 <display_update+0x274>)
     e66:	701a      	strb	r2, [r3, #0]
		if (display.minute_debounce_counter == 0) display.minute_pushed = false;
     e68:	4b73      	ldr	r3, [pc, #460]	; (1038 <display_update+0x274>)
     e6a:	781b      	ldrb	r3, [r3, #0]
     e6c:	2b00      	cmp	r3, #0
     e6e:	d102      	bne.n	e76 <display_update+0xb2>
     e70:	4b71      	ldr	r3, [pc, #452]	; (1038 <display_update+0x274>)
     e72:	2200      	movs	r2, #0
     e74:	705a      	strb	r2, [r3, #1]
	}
	
	bool hour_push_edge = false;
     e76:	1dbb      	adds	r3, r7, #6
     e78:	2200      	movs	r2, #0
     e7a:	701a      	strb	r2, [r3, #0]
	if ((PORT->Group[0].IN.reg & HOUR_SENSE_PA_GPIO) == 0) {
     e7c:	4b6d      	ldr	r3, [pc, #436]	; (1034 <display_update+0x270>)
     e7e:	6a1b      	ldr	r3, [r3, #32]
     e80:	2202      	movs	r2, #2
     e82:	4013      	ands	r3, r2
     e84:	d11b      	bne.n	ebe <display_update+0xfa>
		if (display.hour_debounce_counter < BUTTON_DEBOUNCE_COUNT) display.hour_debounce_counter++;
     e86:	4b6c      	ldr	r3, [pc, #432]	; (1038 <display_update+0x274>)
     e88:	789b      	ldrb	r3, [r3, #2]
     e8a:	2b04      	cmp	r3, #4
     e8c:	d805      	bhi.n	e9a <display_update+0xd6>
     e8e:	4b6a      	ldr	r3, [pc, #424]	; (1038 <display_update+0x274>)
     e90:	789b      	ldrb	r3, [r3, #2]
     e92:	3301      	adds	r3, #1
     e94:	b2da      	uxtb	r2, r3
     e96:	4b68      	ldr	r3, [pc, #416]	; (1038 <display_update+0x274>)
     e98:	709a      	strb	r2, [r3, #2]
		if (display.hour_debounce_counter == BUTTON_DEBOUNCE_COUNT) {
     e9a:	4b67      	ldr	r3, [pc, #412]	; (1038 <display_update+0x274>)
     e9c:	789b      	ldrb	r3, [r3, #2]
     e9e:	2b05      	cmp	r3, #5
     ea0:	d11e      	bne.n	ee0 <display_update+0x11c>
			if (!display.hour_pushed) {
     ea2:	4b65      	ldr	r3, [pc, #404]	; (1038 <display_update+0x274>)
     ea4:	78db      	ldrb	r3, [r3, #3]
     ea6:	2201      	movs	r2, #1
     ea8:	4053      	eors	r3, r2
     eaa:	b2db      	uxtb	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	d017      	beq.n	ee0 <display_update+0x11c>
				hour_push_edge = true;
     eb0:	1dbb      	adds	r3, r7, #6
     eb2:	2201      	movs	r2, #1
     eb4:	701a      	strb	r2, [r3, #0]
				display.hour_pushed = true;
     eb6:	4b60      	ldr	r3, [pc, #384]	; (1038 <display_update+0x274>)
     eb8:	2201      	movs	r2, #1
     eba:	70da      	strb	r2, [r3, #3]
     ebc:	e010      	b.n	ee0 <display_update+0x11c>
			}
		}
	} else {
		if (display.hour_debounce_counter) display.hour_debounce_counter--;
     ebe:	4b5e      	ldr	r3, [pc, #376]	; (1038 <display_update+0x274>)
     ec0:	789b      	ldrb	r3, [r3, #2]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d005      	beq.n	ed2 <display_update+0x10e>
     ec6:	4b5c      	ldr	r3, [pc, #368]	; (1038 <display_update+0x274>)
     ec8:	789b      	ldrb	r3, [r3, #2]
     eca:	3b01      	subs	r3, #1
     ecc:	b2da      	uxtb	r2, r3
     ece:	4b5a      	ldr	r3, [pc, #360]	; (1038 <display_update+0x274>)
     ed0:	709a      	strb	r2, [r3, #2]
		if (display.hour_debounce_counter == 0) display.hour_pushed = false;
     ed2:	4b59      	ldr	r3, [pc, #356]	; (1038 <display_update+0x274>)
     ed4:	789b      	ldrb	r3, [r3, #2]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d102      	bne.n	ee0 <display_update+0x11c>
     eda:	4b57      	ldr	r3, [pc, #348]	; (1038 <display_update+0x274>)
     edc:	2200      	movs	r2, #0
     ede:	70da      	strb	r2, [r3, #3]
	}
	
	// step #3 - increment time
	
	// priority #1 - if both buttons held, reset time to 0000
	if (display.hour_pushed && display.minute_pushed) {
     ee0:	4b55      	ldr	r3, [pc, #340]	; (1038 <display_update+0x274>)
     ee2:	78db      	ldrb	r3, [r3, #3]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d017      	beq.n	f18 <display_update+0x154>
     ee8:	4b53      	ldr	r3, [pc, #332]	; (1038 <display_update+0x274>)
     eea:	785b      	ldrb	r3, [r3, #1]
     eec:	2b00      	cmp	r3, #0
     eee:	d013      	beq.n	f18 <display_update+0x154>
		display.displaytime.seconds = 0;
     ef0:	4b51      	ldr	r3, [pc, #324]	; (1038 <display_update+0x274>)
     ef2:	2200      	movs	r2, #0
     ef4:	719a      	strb	r2, [r3, #6]
		display.displaytime.minutes = 0;
     ef6:	4b50      	ldr	r3, [pc, #320]	; (1038 <display_update+0x274>)
     ef8:	2200      	movs	r2, #0
     efa:	71da      	strb	r2, [r3, #7]
		display.displaytime.tenminutes = 0;
     efc:	4b4e      	ldr	r3, [pc, #312]	; (1038 <display_update+0x274>)
     efe:	2200      	movs	r2, #0
     f00:	721a      	strb	r2, [r3, #8]
		display.displaytime.hours = 0;
     f02:	4b4d      	ldr	r3, [pc, #308]	; (1038 <display_update+0x274>)
     f04:	2200      	movs	r2, #0
     f06:	725a      	strb	r2, [r3, #9]
		display.displaytime.tenhours = 0;
     f08:	4b4b      	ldr	r3, [pc, #300]	; (1038 <display_update+0x274>)
     f0a:	2200      	movs	r2, #0
     f0c:	729a      	strb	r2, [r3, #10]
		display.rtc_handoff_counter = RTC_HANDOFF_DELAY;
     f0e:	4b4a      	ldr	r3, [pc, #296]	; (1038 <display_update+0x274>)
     f10:	22a0      	movs	r2, #160	; 0xa0
     f12:	00d2      	lsls	r2, r2, #3
     f14:	819a      	strh	r2, [r3, #12]
     f16:	e02a      	b.n	f6e <display_update+0x1aa>
	}
	// priority #2 - if minute newly pushed, increment minutes
	else if (minute_push_edge) {
     f18:	1dfb      	adds	r3, r7, #7
     f1a:	781b      	ldrb	r3, [r3, #0]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d00d      	beq.n	f3c <display_update+0x178>
		display.displaytime.minutes++;
     f20:	4b45      	ldr	r3, [pc, #276]	; (1038 <display_update+0x274>)
     f22:	79db      	ldrb	r3, [r3, #7]
     f24:	3301      	adds	r3, #1
     f26:	b2da      	uxtb	r2, r3
     f28:	4b43      	ldr	r3, [pc, #268]	; (1038 <display_update+0x274>)
     f2a:	71da      	strb	r2, [r3, #7]
		display.displaytime.seconds = 0;
     f2c:	4b42      	ldr	r3, [pc, #264]	; (1038 <display_update+0x274>)
     f2e:	2200      	movs	r2, #0
     f30:	719a      	strb	r2, [r3, #6]
		display.rtc_handoff_counter = RTC_HANDOFF_DELAY;
     f32:	4b41      	ldr	r3, [pc, #260]	; (1038 <display_update+0x274>)
     f34:	22a0      	movs	r2, #160	; 0xa0
     f36:	00d2      	lsls	r2, r2, #3
     f38:	819a      	strh	r2, [r3, #12]
     f3a:	e018      	b.n	f6e <display_update+0x1aa>
	}
	// priority #3 - if hour newly pushed, increment hours
	else if (hour_push_edge) {
     f3c:	1dbb      	adds	r3, r7, #6
     f3e:	781b      	ldrb	r3, [r3, #0]
     f40:	2b00      	cmp	r3, #0
     f42:	d00a      	beq.n	f5a <display_update+0x196>
		display.displaytime.hours++;
     f44:	4b3c      	ldr	r3, [pc, #240]	; (1038 <display_update+0x274>)
     f46:	7a5b      	ldrb	r3, [r3, #9]
     f48:	3301      	adds	r3, #1
     f4a:	b2da      	uxtb	r2, r3
     f4c:	4b3a      	ldr	r3, [pc, #232]	; (1038 <display_update+0x274>)
     f4e:	725a      	strb	r2, [r3, #9]
		display.rtc_handoff_counter = RTC_HANDOFF_DELAY;
     f50:	4b39      	ldr	r3, [pc, #228]	; (1038 <display_update+0x274>)
     f52:	22a0      	movs	r2, #160	; 0xa0
     f54:	00d2      	lsls	r2, r2, #3
     f56:	819a      	strh	r2, [r3, #12]
     f58:	e009      	b.n	f6e <display_update+0x1aa>
	}
	// priority #4 - if interrupt edge happens, increment seconds.
	else if (int_edge) {
     f5a:	1d3b      	adds	r3, r7, #4
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	2b00      	cmp	r3, #0
     f60:	d005      	beq.n	f6e <display_update+0x1aa>
		display.displaytime.seconds++;
     f62:	4b35      	ldr	r3, [pc, #212]	; (1038 <display_update+0x274>)
     f64:	799b      	ldrb	r3, [r3, #6]
     f66:	3301      	adds	r3, #1
     f68:	b2da      	uxtb	r2, r3
     f6a:	4b33      	ldr	r3, [pc, #204]	; (1038 <display_update+0x274>)
     f6c:	719a      	strb	r2, [r3, #6]
	}
	
	// step #4 - handle time overflows from incrementing stuff
	if (display.displaytime.seconds >= 60) {
     f6e:	4b32      	ldr	r3, [pc, #200]	; (1038 <display_update+0x274>)
     f70:	799b      	ldrb	r3, [r3, #6]
     f72:	2b3b      	cmp	r3, #59	; 0x3b
     f74:	d908      	bls.n	f88 <display_update+0x1c4>
		display.displaytime.seconds = 0; display.displaytime.minutes++;
     f76:	4b30      	ldr	r3, [pc, #192]	; (1038 <display_update+0x274>)
     f78:	2200      	movs	r2, #0
     f7a:	719a      	strb	r2, [r3, #6]
     f7c:	4b2e      	ldr	r3, [pc, #184]	; (1038 <display_update+0x274>)
     f7e:	79db      	ldrb	r3, [r3, #7]
     f80:	3301      	adds	r3, #1
     f82:	b2da      	uxtb	r2, r3
     f84:	4b2c      	ldr	r3, [pc, #176]	; (1038 <display_update+0x274>)
     f86:	71da      	strb	r2, [r3, #7]
	}
	if (display.displaytime.minutes >= 10) {
     f88:	4b2b      	ldr	r3, [pc, #172]	; (1038 <display_update+0x274>)
     f8a:	79db      	ldrb	r3, [r3, #7]
     f8c:	2b09      	cmp	r3, #9
     f8e:	d908      	bls.n	fa2 <display_update+0x1de>
		display.displaytime.minutes = 0; display.displaytime.tenminutes++;
     f90:	4b29      	ldr	r3, [pc, #164]	; (1038 <display_update+0x274>)
     f92:	2200      	movs	r2, #0
     f94:	71da      	strb	r2, [r3, #7]
     f96:	4b28      	ldr	r3, [pc, #160]	; (1038 <display_update+0x274>)
     f98:	7a1b      	ldrb	r3, [r3, #8]
     f9a:	3301      	adds	r3, #1
     f9c:	b2da      	uxtb	r2, r3
     f9e:	4b26      	ldr	r3, [pc, #152]	; (1038 <display_update+0x274>)
     fa0:	721a      	strb	r2, [r3, #8]
	}
	if (display.displaytime.tenminutes >= 6) {
     fa2:	4b25      	ldr	r3, [pc, #148]	; (1038 <display_update+0x274>)
     fa4:	7a1b      	ldrb	r3, [r3, #8]
     fa6:	2b05      	cmp	r3, #5
     fa8:	d908      	bls.n	fbc <display_update+0x1f8>
		display.displaytime.tenminutes = 0; display.displaytime.hours++;
     faa:	4b23      	ldr	r3, [pc, #140]	; (1038 <display_update+0x274>)
     fac:	2200      	movs	r2, #0
     fae:	721a      	strb	r2, [r3, #8]
     fb0:	4b21      	ldr	r3, [pc, #132]	; (1038 <display_update+0x274>)
     fb2:	7a5b      	ldrb	r3, [r3, #9]
     fb4:	3301      	adds	r3, #1
     fb6:	b2da      	uxtb	r2, r3
     fb8:	4b1f      	ldr	r3, [pc, #124]	; (1038 <display_update+0x274>)
     fba:	725a      	strb	r2, [r3, #9]
	}
	if (display.displaytime.hours >= 10) {
     fbc:	4b1e      	ldr	r3, [pc, #120]	; (1038 <display_update+0x274>)
     fbe:	7a5b      	ldrb	r3, [r3, #9]
     fc0:	2b09      	cmp	r3, #9
     fc2:	d908      	bls.n	fd6 <display_update+0x212>
		display.displaytime.hours = 0; display.displaytime.tenhours++;
     fc4:	4b1c      	ldr	r3, [pc, #112]	; (1038 <display_update+0x274>)
     fc6:	2200      	movs	r2, #0
     fc8:	725a      	strb	r2, [r3, #9]
     fca:	4b1b      	ldr	r3, [pc, #108]	; (1038 <display_update+0x274>)
     fcc:	7a9b      	ldrb	r3, [r3, #10]
     fce:	3301      	adds	r3, #1
     fd0:	b2da      	uxtb	r2, r3
     fd2:	4b19      	ldr	r3, [pc, #100]	; (1038 <display_update+0x274>)
     fd4:	729a      	strb	r2, [r3, #10]
	}
	if ((display.displaytime.tenhours >= 2) && (display.displaytime.hours >= 4)) {
     fd6:	4b18      	ldr	r3, [pc, #96]	; (1038 <display_update+0x274>)
     fd8:	7a9b      	ldrb	r3, [r3, #10]
     fda:	2b01      	cmp	r3, #1
     fdc:	d909      	bls.n	ff2 <display_update+0x22e>
     fde:	4b16      	ldr	r3, [pc, #88]	; (1038 <display_update+0x274>)
     fe0:	7a5b      	ldrb	r3, [r3, #9]
     fe2:	2b03      	cmp	r3, #3
     fe4:	d905      	bls.n	ff2 <display_update+0x22e>
		display.displaytime.hours = 0; display.displaytime.tenhours = 0;
     fe6:	4b14      	ldr	r3, [pc, #80]	; (1038 <display_update+0x274>)
     fe8:	2200      	movs	r2, #0
     fea:	725a      	strb	r2, [r3, #9]
     fec:	4b12      	ldr	r3, [pc, #72]	; (1038 <display_update+0x274>)
     fee:	2200      	movs	r2, #0
     ff0:	729a      	strb	r2, [r3, #10]
	}
	
	
	// step #5 - copy time to handoff array when handoff counter expires,
	// and kick write-to-RTC interrupt
	if (display.rtc_handoff_counter) {
     ff2:	4b11      	ldr	r3, [pc, #68]	; (1038 <display_update+0x274>)
     ff4:	899b      	ldrh	r3, [r3, #12]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d018      	beq.n	102c <display_update+0x268>
		if (--display.rtc_handoff_counter == 0) {
     ffa:	4b0f      	ldr	r3, [pc, #60]	; (1038 <display_update+0x274>)
     ffc:	899b      	ldrh	r3, [r3, #12]
     ffe:	3b01      	subs	r3, #1
    1000:	b29a      	uxth	r2, r3
    1002:	4b0d      	ldr	r3, [pc, #52]	; (1038 <display_update+0x274>)
    1004:	819a      	strh	r2, [r3, #12]
    1006:	4b0c      	ldr	r3, [pc, #48]	; (1038 <display_update+0x274>)
    1008:	899b      	ldrh	r3, [r3, #12]
    100a:	2b00      	cmp	r3, #0
    100c:	d10e      	bne.n	102c <display_update+0x268>
			display.rtc_handoff_time = display.displaytime;
    100e:	4a0a      	ldr	r2, [pc, #40]	; (1038 <display_update+0x274>)
    1010:	200e      	movs	r0, #14
    1012:	4b09      	ldr	r3, [pc, #36]	; (1038 <display_update+0x274>)
    1014:	2106      	movs	r1, #6
    1016:	1812      	adds	r2, r2, r0
    1018:	185b      	adds	r3, r3, r1
    101a:	2405      	movs	r4, #5
    101c:	1c10      	adds	r0, r2, #0
    101e:	1c19      	adds	r1, r3, #0
    1020:	1c22      	adds	r2, r4, #0
    1022:	4b06      	ldr	r3, [pc, #24]	; (103c <display_update+0x278>)
    1024:	4798      	blx	r3
			NVIC_SetPendingIRQ(TC1_IRQn);
    1026:	200e      	movs	r0, #14
    1028:	4b05      	ldr	r3, [pc, #20]	; (1040 <display_update+0x27c>)
    102a:	4798      	blx	r3
		}
	}
}
    102c:	46bd      	mov	sp, r7
    102e:	b003      	add	sp, #12
    1030:	bd90      	pop	{r4, r7, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	41004400 	.word	0x41004400
    1038:	20000574 	.word	0x20000574
    103c:	00001b15 	.word	0x00001b15
    1040:	00000a05 	.word	0x00000a05

00001044 <clock_init>:
#define SYSCTRL_FUSES_OSC32K_CAL_ADDR   (NVMCTRL_OTP4 + 4)
#define SYSCTRL_FUSES_OSC32K_CAL_Msk   (0x7Fu << SYSCTRL_FUSES_OSC32K_CAL_Pos)
#define SYSCTRL_FUSES_OSC32K_CAL_Pos   6


void clock_init(void){
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
	
	// use 8M oscillator as main clock, /1 prescaler
	// core switches to 8MHz operation after PRESC write
	SYSCTRL->OSC8M.bit.PRESC = 0;
    1048:	4b1e      	ldr	r3, [pc, #120]	; (10c4 <clock_init+0x80>)
    104a:	6a1a      	ldr	r2, [r3, #32]
    104c:	491e      	ldr	r1, [pc, #120]	; (10c8 <clock_init+0x84>)
    104e:	400a      	ands	r2, r1
    1050:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 1;
    1052:	4b1c      	ldr	r3, [pc, #112]	; (10c4 <clock_init+0x80>)
    1054:	6a1a      	ldr	r2, [r3, #32]
    1056:	2180      	movs	r1, #128	; 0x80
    1058:	430a      	orrs	r2, r1
    105a:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.RUNSTDBY = 0;
    105c:	4b19      	ldr	r3, [pc, #100]	; (10c4 <clock_init+0x80>)
    105e:	6a1a      	ldr	r2, [r3, #32]
    1060:	2140      	movs	r1, #64	; 0x40
    1062:	438a      	bics	r2, r1
    1064:	621a      	str	r2, [r3, #32]
	// GCLK2 = leave alone (ULP 32K oscillator for WDT)
	// GCLK3 = OSC32K for display
	
	
	// GCLK1 = 10MHz calibration input (on PB23) - function H
	PORT->Group[1].PMUX[23/2].bit.PMUXO = PORT_PMUX_PMUXO_H_Val;
    1066:	4a19      	ldr	r2, [pc, #100]	; (10cc <clock_init+0x88>)
    1068:	23bb      	movs	r3, #187	; 0xbb
    106a:	5cd1      	ldrb	r1, [r2, r3]
    106c:	200f      	movs	r0, #15
    106e:	4001      	ands	r1, r0
    1070:	1c08      	adds	r0, r1, #0
    1072:	2170      	movs	r1, #112	; 0x70
    1074:	4301      	orrs	r1, r0
    1076:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[23].bit.PMUXEN = 1;
    1078:	4a14      	ldr	r2, [pc, #80]	; (10cc <clock_init+0x88>)
    107a:	23d7      	movs	r3, #215	; 0xd7
    107c:	5cd1      	ldrb	r1, [r2, r3]
    107e:	2001      	movs	r0, #1
    1080:	4301      	orrs	r1, r0
    1082:	54d1      	strb	r1, [r2, r3]
	
	GCLK->GENDIV.reg = GCLK_GENDIV_DIV(0) | GCLK_GENDIV_ID_GCLK1;
    1084:	4b12      	ldr	r3, [pc, #72]	; (10d0 <clock_init+0x8c>)
    1086:	2201      	movs	r2, #1
    1088:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg =		(1 << GCLK_GENCTRL_RUNSTDBY_Pos) |
    108a:	4b11      	ldr	r3, [pc, #68]	; (10d0 <clock_init+0x8c>)
    108c:	4a11      	ldr	r2, [pc, #68]	; (10d4 <clock_init+0x90>)
    108e:	605a      	str	r2, [r3, #4]
							GCLK_GENCTRL_SRC_GCLKIN |
							GCLK_GENCTRL_ID_GCLK1;
	

	// enable OSC32K
	SYSCTRL->OSC32K.reg =	((*(uint32_t *)SYSCTRL_FUSES_OSC32K_CAL_ADDR >> SYSCTRL_FUSES_OSC32K_CAL_Pos) << SYSCTRL_OSC32K_CALIB_Pos) |
    1090:	4b0c      	ldr	r3, [pc, #48]	; (10c4 <clock_init+0x80>)
    1092:	4a11      	ldr	r2, [pc, #68]	; (10d8 <clock_init+0x94>)
    1094:	6812      	ldr	r2, [r2, #0]
    1096:	0992      	lsrs	r2, r2, #6
    1098:	0412      	lsls	r2, r2, #16
							(2 << SYSCTRL_OSC32K_STARTUP_Pos) |
							(1 << SYSCTRL_OSC32K_RUNSTDBY_Pos) |
							(1 << SYSCTRL_OSC32K_EN32K_Pos) |
    109a:	4910      	ldr	r1, [pc, #64]	; (10dc <clock_init+0x98>)
    109c:	430a      	orrs	r2, r1
							GCLK_GENCTRL_SRC_GCLKIN |
							GCLK_GENCTRL_ID_GCLK1;
	

	// enable OSC32K
	SYSCTRL->OSC32K.reg =	((*(uint32_t *)SYSCTRL_FUSES_OSC32K_CAL_ADDR >> SYSCTRL_FUSES_OSC32K_CAL_Pos) << SYSCTRL_OSC32K_CALIB_Pos) |
    109e:	619a      	str	r2, [r3, #24]
							(2 << SYSCTRL_OSC32K_STARTUP_Pos) |
							(1 << SYSCTRL_OSC32K_RUNSTDBY_Pos) |
							(1 << SYSCTRL_OSC32K_EN32K_Pos) |
							(1 << SYSCTRL_OSC32K_ENABLE_Pos);
	// wait for it to start
	while ((SYSCTRL->PCLKSR.bit.OSC32KRDY) == 0);
    10a0:	46c0      	nop			; (mov r8, r8)
    10a2:	4b08      	ldr	r3, [pc, #32]	; (10c4 <clock_init+0x80>)
    10a4:	68db      	ldr	r3, [r3, #12]
    10a6:	089b      	lsrs	r3, r3, #2
    10a8:	1c1a      	adds	r2, r3, #0
    10aa:	2301      	movs	r3, #1
    10ac:	4013      	ands	r3, r2
    10ae:	b2db      	uxtb	r3, r3
    10b0:	2b00      	cmp	r3, #0
    10b2:	d0f6      	beq.n	10a2 <clock_init+0x5e>

	// configure GCLK3, pointed at OSC32K
	GCLK->GENDIV.reg = GCLK_GENDIV_DIV(0) | GCLK_GENDIV_ID_GCLK3;
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <clock_init+0x8c>)
    10b6:	2203      	movs	r2, #3
    10b8:	609a      	str	r2, [r3, #8]
	GCLK->GENCTRL.reg =		(1<<GCLK_GENCTRL_RUNSTDBY_Pos) |
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <clock_init+0x8c>)
    10bc:	4a08      	ldr	r2, [pc, #32]	; (10e0 <clock_init+0x9c>)
    10be:	605a      	str	r2, [r3, #4]
							(0 << GCLK_GENCTRL_OE_Pos) |
							(1 << GCLK_GENCTRL_GENEN_Pos) |
							GCLK_GENCTRL_SRC_OSC32K |
							GCLK_GENCTRL_ID_GCLK3;

}
    10c0:	46bd      	mov	sp, r7
    10c2:	bd80      	pop	{r7, pc}
    10c4:	40000800 	.word	0x40000800
    10c8:	fffffcff 	.word	0xfffffcff
    10cc:	41004400 	.word	0x41004400
    10d0:	40000c00 	.word	0x40000c00
    10d4:	00210101 	.word	0x00210101
    10d8:	00806024 	.word	0x00806024
    10dc:	00000246 	.word	0x00000246
    10e0:	00210403 	.word	0x00210403

000010e4 <gpio_init>:

void gpio_init(void) {
    10e4:	b580      	push	{r7, lr}
    10e6:	af00      	add	r7, sp, #0
	// PA15 (RX from FTDI) - input, weak pull-up
	// PA14 (TX to FTDI) - output, driven high
	// PA05 (CBUS2), PA04 (CBUS3) - use weak pulldowns
	// PA1 (minute button), PA0 - use weak pullups
	
	PORT->Group[0].OUT.reg =	(1<<13)|(1<<1)|(1<<0);
    10e8:	4b1b      	ldr	r3, [pc, #108]	; (1158 <gpio_init+0x74>)
    10ea:	4a1c      	ldr	r2, [pc, #112]	; (115c <gpio_init+0x78>)
    10ec:	611a      	str	r2, [r3, #16]
	PORT->Group[0].DIR.reg =	(0<<31)|(0<<30)|(1<<29)|(1<<28)|(1<<27)|(1<<26)|(1<<25)|(1<<24)|\
    10ee:	4b1a      	ldr	r3, [pc, #104]	; (1158 <gpio_init+0x74>)
    10f0:	4a1b      	ldr	r2, [pc, #108]	; (1160 <gpio_init+0x7c>)
    10f2:	601a      	str	r2, [r3, #0]
	//PORT->Group[0].PINCFG[31].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(1<<PORT_PINCFG_PMUXEN_Pos);
	//PORT->Group[0].PINCFG[30].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(1<<PORT_PINCFG_PMUXEN_Pos);
	
	// PA23 = SCL = SC3[1]
	// PA22 = SDA = SC3[0]
	PORT->Group[0].PINCFG[23].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(0<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    10f4:	4a18      	ldr	r2, [pc, #96]	; (1158 <gpio_init+0x74>)
    10f6:	2357      	movs	r3, #87	; 0x57
    10f8:	2102      	movs	r1, #2
    10fa:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[22].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(0<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    10fc:	4a16      	ldr	r2, [pc, #88]	; (1158 <gpio_init+0x74>)
    10fe:	2356      	movs	r3, #86	; 0x56
    1100:	2102      	movs	r1, #2
    1102:	54d1      	strb	r1, [r2, r3]
	// PA21 = /INT
	PORT->Group[0].PINCFG[21].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(0<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    1104:	4a14      	ldr	r2, [pc, #80]	; (1158 <gpio_init+0x74>)
    1106:	2355      	movs	r3, #85	; 0x55
    1108:	2102      	movs	r1, #2
    110a:	54d1      	strb	r1, [r2, r3]
	
	// PA15 = RX from FTDI = SC2[3] = function C
	// PA14 = TX to FTDI = SC2[2] = function C
	PORT->Group[0].PINCFG[15].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    110c:	4a12      	ldr	r2, [pc, #72]	; (1158 <gpio_init+0x74>)
    110e:	234f      	movs	r3, #79	; 0x4f
    1110:	2106      	movs	r1, #6
    1112:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[13].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(0<<PORT_PINCFG_PULLEN_Pos)|(0<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    1114:	4a10      	ldr	r2, [pc, #64]	; (1158 <gpio_init+0x74>)
    1116:	234d      	movs	r3, #77	; 0x4d
    1118:	2100      	movs	r1, #0
    111a:	54d1      	strb	r1, [r2, r3]
	
	// PA05/PA04 (CBUS pins from FTDI) - enable pulldowns and inputs
	PORT->Group[0].PINCFG[5].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    111c:	4a0e      	ldr	r2, [pc, #56]	; (1158 <gpio_init+0x74>)
    111e:	2345      	movs	r3, #69	; 0x45
    1120:	2106      	movs	r1, #6
    1122:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[4].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    1124:	4a0c      	ldr	r2, [pc, #48]	; (1158 <gpio_init+0x74>)
    1126:	2344      	movs	r3, #68	; 0x44
    1128:	2106      	movs	r1, #6
    112a:	54d1      	strb	r1, [r2, r3]
	
	// PA1, PA0 = enable pullups and inputs
	PORT->Group[0].PINCFG[1].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    112c:	4a0a      	ldr	r2, [pc, #40]	; (1158 <gpio_init+0x74>)
    112e:	2341      	movs	r3, #65	; 0x41
    1130:	2106      	movs	r1, #6
    1132:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[0].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(1<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    1134:	4a08      	ldr	r2, [pc, #32]	; (1158 <gpio_init+0x74>)
    1136:	2340      	movs	r3, #64	; 0x40
    1138:	2106      	movs	r1, #6
    113a:	54d1      	strb	r1, [r2, r3]
	// Inputs on this pin:
	
	// Most outputs are either NC or tube drive outputs, both are driven low at startup.
	// Only exception is PB23 (calibration input) - input, driven by external gate.

	PORT->Group[1].OUT.reg =	0;
    113c:	4a06      	ldr	r2, [pc, #24]	; (1158 <gpio_init+0x74>)
    113e:	2390      	movs	r3, #144	; 0x90
    1140:	2100      	movs	r1, #0
    1142:	50d1      	str	r1, [r2, r3]
	PORT->Group[1].DIR.reg =	(1<<31)|(1<<30)|(1<<29)|(1<<28)|(1<<27)|(1<<26)|(1<<25)|(1<<24)|\
    1144:	4a04      	ldr	r2, [pc, #16]	; (1158 <gpio_init+0x74>)
    1146:	2380      	movs	r3, #128	; 0x80
    1148:	4906      	ldr	r1, [pc, #24]	; (1164 <gpio_init+0x80>)
    114a:	50d1      	str	r1, [r2, r3]
								(0<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16)|\
								(1<<15)|(1<14)|(1<<13)|(1<<12)|(1<<11)|(1<<10)|(1<<9)|(1<<8)|\
								(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0);

	PORT->Group[1].PINCFG[23].reg = (0<<PORT_PINCFG_DRVSTR_Pos)|(0<<PORT_PINCFG_PULLEN_Pos)|(1<<PORT_PINCFG_INEN_Pos)|(0<<PORT_PINCFG_PMUXEN_Pos);
    114c:	4a02      	ldr	r2, [pc, #8]	; (1158 <gpio_init+0x74>)
    114e:	23d7      	movs	r3, #215	; 0xd7
    1150:	2102      	movs	r1, #2
    1152:	54d1      	strb	r1, [r2, r3]



}
    1154:	46bd      	mov	sp, r7
    1156:	bd80      	pop	{r7, pc}
    1158:	41004400 	.word	0x41004400
    115c:	00002003 	.word	0x00002003
    1160:	3f1f3fcd 	.word	0x3f1f3fcd
    1164:	ff7fbfff 	.word	0xff7fbfff

00001168 <main>:
#include "init.h"
#include "cal.h"
#include "menu.h"
#include "delay.h"

int main(void) {
    1168:	b580      	push	{r7, lr}
    116a:	af00      	add	r7, sp, #0

	// init clocks
	clock_init();
    116c:	4b0b      	ldr	r3, [pc, #44]	; (119c <main+0x34>)
    116e:	4798      	blx	r3
	
	// init GPIO pin states
	gpio_init();
    1170:	4b0b      	ldr	r3, [pc, #44]	; (11a0 <main+0x38>)
    1172:	4798      	blx	r3

	// init serial console
	console_init();
    1174:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <main+0x3c>)
    1176:	4798      	blx	r3
	
	// wait for RTC to start up
	delay_ms(1000);
    1178:	23fa      	movs	r3, #250	; 0xfa
    117a:	009b      	lsls	r3, r3, #2
    117c:	1c18      	adds	r0, r3, #0
    117e:	4b0a      	ldr	r3, [pc, #40]	; (11a8 <main+0x40>)
    1180:	4798      	blx	r3
	
	// init RTC
	rtc_init();
    1182:	4b0a      	ldr	r3, [pc, #40]	; (11ac <main+0x44>)
    1184:	4798      	blx	r3
	
	// init calibration
	cal_init();
    1186:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <main+0x48>)
    1188:	4798      	blx	r3

	// init display (rtc_init(), cal_init() must must be called first!)
	display_init();
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <main+0x4c>)
    118c:	4798      	blx	r3

	// call menu
	menu();
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <main+0x50>)
    1190:	4798      	blx	r3
    1192:	2300      	movs	r3, #0
}
    1194:	1c18      	adds	r0, r3, #0
    1196:	46bd      	mov	sp, r7
    1198:	bd80      	pop	{r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	00001045 	.word	0x00001045
    11a0:	000010e5 	.word	0x000010e5
    11a4:	0000063d 	.word	0x0000063d
    11a8:	00000921 	.word	0x00000921
    11ac:	00001559 	.word	0x00001559
    11b0:	00000295 	.word	0x00000295
    11b4:	00000c91 	.word	0x00000c91
    11b8:	000011bd 	.word	0x000011bd

000011bc <menu>:
 
extern struct display_struct display;



 void menu(void) {
    11bc:	b580      	push	{r7, lr}
    11be:	b094      	sub	sp, #80	; 0x50
    11c0:	af00      	add	r7, sp, #0
	uint32_t cal_value;


	while(1) {
		
		console_puts((uint8_t *) "\r\n\r\n== thIN-18 debug menu ==\r\n\r\n");
    11c2:	4bc5      	ldr	r3, [pc, #788]	; (14d8 <menu+0x31c>)
    11c4:	1c18      	adds	r0, r3, #0
    11c6:	4bc5      	ldr	r3, [pc, #788]	; (14dc <menu+0x320>)
    11c8:	4798      	blx	r3

		console_puts((uint8_t *) "C) Test calibration\r\n");
    11ca:	4bc5      	ldr	r3, [pc, #788]	; (14e0 <menu+0x324>)
    11cc:	1c18      	adds	r0, r3, #0
    11ce:	4bc3      	ldr	r3, [pc, #780]	; (14dc <menu+0x320>)
    11d0:	4798      	blx	r3
		console_puts((uint8_t* ) "S) Select calibration source\r\n");
    11d2:	4bc4      	ldr	r3, [pc, #784]	; (14e4 <menu+0x328>)
    11d4:	1c18      	adds	r0, r3, #0
    11d6:	4bc1      	ldr	r3, [pc, #772]	; (14dc <menu+0x320>)
    11d8:	4798      	blx	r3
		console_puts((uint8_t *) "E) Enable/disable HV DC/DC converter\r\n");
    11da:	4bc3      	ldr	r3, [pc, #780]	; (14e8 <menu+0x32c>)
    11dc:	1c18      	adds	r0, r3, #0
    11de:	4bbf      	ldr	r3, [pc, #764]	; (14dc <menu+0x320>)
    11e0:	4798      	blx	r3
		console_puts((uint8_t *) "R) Read RTC register\r\n");
    11e2:	4bc2      	ldr	r3, [pc, #776]	; (14ec <menu+0x330>)
    11e4:	1c18      	adds	r0, r3, #0
    11e6:	4bbd      	ldr	r3, [pc, #756]	; (14dc <menu+0x320>)
    11e8:	4798      	blx	r3
		console_puts((uint8_t *) "W) Write RTC register\r\n");
    11ea:	4bc1      	ldr	r3, [pc, #772]	; (14f0 <menu+0x334>)
    11ec:	1c18      	adds	r0, r3, #0
    11ee:	4bbb      	ldr	r3, [pc, #748]	; (14dc <menu+0x320>)
    11f0:	4798      	blx	r3
		
		console_puts((uint8_t *) "1) Set 10H tube\r\n");
    11f2:	4bc0      	ldr	r3, [pc, #768]	; (14f4 <menu+0x338>)
    11f4:	1c18      	adds	r0, r3, #0
    11f6:	4bb9      	ldr	r3, [pc, #740]	; (14dc <menu+0x320>)
    11f8:	4798      	blx	r3
		console_puts((uint8_t *) "2) Set 1H tube\r\n");
    11fa:	4bbf      	ldr	r3, [pc, #764]	; (14f8 <menu+0x33c>)
    11fc:	1c18      	adds	r0, r3, #0
    11fe:	4bb7      	ldr	r3, [pc, #732]	; (14dc <menu+0x320>)
    1200:	4798      	blx	r3
		console_puts((uint8_t *) "3) Set 10M tube\r\n");
    1202:	4bbe      	ldr	r3, [pc, #760]	; (14fc <menu+0x340>)
    1204:	1c18      	adds	r0, r3, #0
    1206:	4bb5      	ldr	r3, [pc, #724]	; (14dc <menu+0x320>)
    1208:	4798      	blx	r3
		console_puts((uint8_t *) "4) Set 1M tube\r\n");
    120a:	4bbd      	ldr	r3, [pc, #756]	; (1500 <menu+0x344>)
    120c:	1c18      	adds	r0, r3, #0
    120e:	4bb3      	ldr	r3, [pc, #716]	; (14dc <menu+0x320>)
    1210:	4798      	blx	r3
	
		console_puts((uint8_t *) "\r\n>> ");
    1212:	4bbc      	ldr	r3, [pc, #752]	; (1504 <menu+0x348>)
    1214:	1c18      	adds	r0, r3, #0
    1216:	4bb1      	ldr	r3, [pc, #708]	; (14dc <menu+0x320>)
    1218:	4798      	blx	r3

		if (console_gets(str,63) == 0) continue;
    121a:	230c      	movs	r3, #12
    121c:	18fb      	adds	r3, r7, r3
    121e:	1c18      	adds	r0, r3, #0
    1220:	213f      	movs	r1, #63	; 0x3f
    1222:	4bb9      	ldr	r3, [pc, #740]	; (1508 <menu+0x34c>)
    1224:	4798      	blx	r3
    1226:	1e03      	subs	r3, r0, #0
    1228:	d100      	bne.n	122c <menu+0x70>
    122a:	e153      	b.n	14d4 <menu+0x318>

		console_puts((uint8_t *) "\r\n");
    122c:	4bb7      	ldr	r3, [pc, #732]	; (150c <menu+0x350>)
    122e:	1c18      	adds	r0, r3, #0
    1230:	4baa      	ldr	r3, [pc, #680]	; (14dc <menu+0x320>)
    1232:	4798      	blx	r3

		switch(str[0]) {
    1234:	230c      	movs	r3, #12
    1236:	18fb      	adds	r3, r7, r3
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	3b31      	subs	r3, #49	; 0x31
    123c:	2b46      	cmp	r3, #70	; 0x46
    123e:	d8c0      	bhi.n	11c2 <menu+0x6>
    1240:	009a      	lsls	r2, r3, #2
    1242:	4bb3      	ldr	r3, [pc, #716]	; (1510 <menu+0x354>)
    1244:	18d3      	adds	r3, r2, r3
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	469f      	mov	pc, r3
			
			case '1':
				console_puts((uint8_t *) "Digit: ");
    124a:	4bb2      	ldr	r3, [pc, #712]	; (1514 <menu+0x358>)
    124c:	1c18      	adds	r0, r3, #0
    124e:	4ba3      	ldr	r3, [pc, #652]	; (14dc <menu+0x320>)
    1250:	4798      	blx	r3
				if (console_gets(str,2)) {
    1252:	230c      	movs	r3, #12
    1254:	18fb      	adds	r3, r7, r3
    1256:	1c18      	adds	r0, r3, #0
    1258:	2102      	movs	r1, #2
    125a:	4bab      	ldr	r3, [pc, #684]	; (1508 <menu+0x34c>)
    125c:	4798      	blx	r3
    125e:	1e03      	subs	r3, r0, #0
    1260:	d00b      	beq.n	127a <menu+0xbe>
					display.displaytime.tenhours = (uint8_t) strtoul((char *) str,NULL,10);
    1262:	230c      	movs	r3, #12
    1264:	18fb      	adds	r3, r7, r3
    1266:	1c18      	adds	r0, r3, #0
    1268:	2100      	movs	r1, #0
    126a:	220a      	movs	r2, #10
    126c:	4baa      	ldr	r3, [pc, #680]	; (1518 <menu+0x35c>)
    126e:	4798      	blx	r3
    1270:	1c03      	adds	r3, r0, #0
    1272:	b2da      	uxtb	r2, r3
    1274:	4ba9      	ldr	r3, [pc, #676]	; (151c <menu+0x360>)
    1276:	729a      	strb	r2, [r3, #10]
				}
			break;
    1278:	e12c      	b.n	14d4 <menu+0x318>
    127a:	e12b      	b.n	14d4 <menu+0x318>
			
			case '2':
				console_puts((uint8_t *) "Digit: ");
    127c:	4ba5      	ldr	r3, [pc, #660]	; (1514 <menu+0x358>)
    127e:	1c18      	adds	r0, r3, #0
    1280:	4b96      	ldr	r3, [pc, #600]	; (14dc <menu+0x320>)
    1282:	4798      	blx	r3
				if (console_gets(str,2)) {
    1284:	230c      	movs	r3, #12
    1286:	18fb      	adds	r3, r7, r3
    1288:	1c18      	adds	r0, r3, #0
    128a:	2102      	movs	r1, #2
    128c:	4b9e      	ldr	r3, [pc, #632]	; (1508 <menu+0x34c>)
    128e:	4798      	blx	r3
    1290:	1e03      	subs	r3, r0, #0
    1292:	d00b      	beq.n	12ac <menu+0xf0>
					display.displaytime.hours = (uint8_t) strtoul((char *) str,NULL,10);
    1294:	230c      	movs	r3, #12
    1296:	18fb      	adds	r3, r7, r3
    1298:	1c18      	adds	r0, r3, #0
    129a:	2100      	movs	r1, #0
    129c:	220a      	movs	r2, #10
    129e:	4b9e      	ldr	r3, [pc, #632]	; (1518 <menu+0x35c>)
    12a0:	4798      	blx	r3
    12a2:	1c03      	adds	r3, r0, #0
    12a4:	b2da      	uxtb	r2, r3
    12a6:	4b9d      	ldr	r3, [pc, #628]	; (151c <menu+0x360>)
    12a8:	725a      	strb	r2, [r3, #9]
				}
			break;
    12aa:	e113      	b.n	14d4 <menu+0x318>
    12ac:	e112      	b.n	14d4 <menu+0x318>
			
			case '3':
				console_puts((uint8_t *) "Digit: ");
    12ae:	4b99      	ldr	r3, [pc, #612]	; (1514 <menu+0x358>)
    12b0:	1c18      	adds	r0, r3, #0
    12b2:	4b8a      	ldr	r3, [pc, #552]	; (14dc <menu+0x320>)
    12b4:	4798      	blx	r3
				if (console_gets(str,2)) {
    12b6:	230c      	movs	r3, #12
    12b8:	18fb      	adds	r3, r7, r3
    12ba:	1c18      	adds	r0, r3, #0
    12bc:	2102      	movs	r1, #2
    12be:	4b92      	ldr	r3, [pc, #584]	; (1508 <menu+0x34c>)
    12c0:	4798      	blx	r3
    12c2:	1e03      	subs	r3, r0, #0
    12c4:	d00b      	beq.n	12de <menu+0x122>
					display.displaytime.tenminutes = (uint8_t) strtoul((char *) str,NULL,10);
    12c6:	230c      	movs	r3, #12
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	1c18      	adds	r0, r3, #0
    12cc:	2100      	movs	r1, #0
    12ce:	220a      	movs	r2, #10
    12d0:	4b91      	ldr	r3, [pc, #580]	; (1518 <menu+0x35c>)
    12d2:	4798      	blx	r3
    12d4:	1c03      	adds	r3, r0, #0
    12d6:	b2da      	uxtb	r2, r3
    12d8:	4b90      	ldr	r3, [pc, #576]	; (151c <menu+0x360>)
    12da:	721a      	strb	r2, [r3, #8]
				}
			break;
    12dc:	e0fa      	b.n	14d4 <menu+0x318>
    12de:	e0f9      	b.n	14d4 <menu+0x318>
			
			case '4':
				console_puts((uint8_t *) "Digit: ");
    12e0:	4b8c      	ldr	r3, [pc, #560]	; (1514 <menu+0x358>)
    12e2:	1c18      	adds	r0, r3, #0
    12e4:	4b7d      	ldr	r3, [pc, #500]	; (14dc <menu+0x320>)
    12e6:	4798      	blx	r3
				if (console_gets(str,2)) {
    12e8:	230c      	movs	r3, #12
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	1c18      	adds	r0, r3, #0
    12ee:	2102      	movs	r1, #2
    12f0:	4b85      	ldr	r3, [pc, #532]	; (1508 <menu+0x34c>)
    12f2:	4798      	blx	r3
    12f4:	1e03      	subs	r3, r0, #0
    12f6:	d00b      	beq.n	1310 <menu+0x154>
					display.displaytime.minutes = (uint8_t) strtoul((char *) str,NULL,10);
    12f8:	230c      	movs	r3, #12
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	1c18      	adds	r0, r3, #0
    12fe:	2100      	movs	r1, #0
    1300:	220a      	movs	r2, #10
    1302:	4b85      	ldr	r3, [pc, #532]	; (1518 <menu+0x35c>)
    1304:	4798      	blx	r3
    1306:	1c03      	adds	r3, r0, #0
    1308:	b2da      	uxtb	r2, r3
    130a:	4b84      	ldr	r3, [pc, #528]	; (151c <menu+0x360>)
    130c:	71da      	strb	r2, [r3, #7]
				}
			break;
    130e:	e0e1      	b.n	14d4 <menu+0x318>
    1310:	e0e0      	b.n	14d4 <menu+0x318>
			
			case 's':
			case 'S':
				console_puts((uint8_t *) "Source? 1=ext, 0=OSC8M: ");
    1312:	4b83      	ldr	r3, [pc, #524]	; (1520 <menu+0x364>)
    1314:	1c18      	adds	r0, r3, #0
    1316:	4b71      	ldr	r3, [pc, #452]	; (14dc <menu+0x320>)
    1318:	4798      	blx	r3
				if (console_gets(str,2)) {
    131a:	230c      	movs	r3, #12
    131c:	18fb      	adds	r3, r7, r3
    131e:	1c18      	adds	r0, r3, #0
    1320:	2102      	movs	r1, #2
    1322:	4b79      	ldr	r3, [pc, #484]	; (1508 <menu+0x34c>)
    1324:	4798      	blx	r3
    1326:	1e03      	subs	r3, r0, #0
    1328:	d010      	beq.n	134c <menu+0x190>
					if (str[0] == '0') {
    132a:	230c      	movs	r3, #12
    132c:	18fb      	adds	r3, r7, r3
    132e:	781b      	ldrb	r3, [r3, #0]
    1330:	2b30      	cmp	r3, #48	; 0x30
    1332:	d102      	bne.n	133a <menu+0x17e>
						cal_input_select(false);
    1334:	2000      	movs	r0, #0
    1336:	4b7b      	ldr	r3, [pc, #492]	; (1524 <menu+0x368>)
    1338:	4798      	blx	r3
					}
					if (str[0] == '1') {
    133a:	230c      	movs	r3, #12
    133c:	18fb      	adds	r3, r7, r3
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	2b31      	cmp	r3, #49	; 0x31
    1342:	d103      	bne.n	134c <menu+0x190>
						cal_input_select(true);
    1344:	2001      	movs	r0, #1
    1346:	4b77      	ldr	r3, [pc, #476]	; (1524 <menu+0x368>)
    1348:	4798      	blx	r3
					}
				}
			break;
    134a:	e0c3      	b.n	14d4 <menu+0x318>
    134c:	e0c2      	b.n	14d4 <menu+0x318>
			
			case 'c':
			case 'C':

				if (!cal_ready()) {
    134e:	4b76      	ldr	r3, [pc, #472]	; (1528 <menu+0x36c>)
    1350:	4798      	blx	r3
    1352:	1c03      	adds	r3, r0, #0
    1354:	1c1a      	adds	r2, r3, #0
    1356:	2301      	movs	r3, #1
    1358:	4053      	eors	r3, r2
    135a:	b2db      	uxtb	r3, r3
    135c:	2b00      	cmp	r3, #0
    135e:	d004      	beq.n	136a <menu+0x1ae>
					console_puts((uint8_t *) "Cal not ready.");
    1360:	4b72      	ldr	r3, [pc, #456]	; (152c <menu+0x370>)
    1362:	1c18      	adds	r0, r3, #0
    1364:	4b5d      	ldr	r3, [pc, #372]	; (14dc <menu+0x320>)
    1366:	4798      	blx	r3
					break;
    1368:	e0b4      	b.n	14d4 <menu+0x318>
				}
				
				while(1) {
					if (cal_fetch(&cal_value)) {
    136a:	1d3b      	adds	r3, r7, #4
    136c:	1c18      	adds	r0, r3, #0
    136e:	4b70      	ldr	r3, [pc, #448]	; (1530 <menu+0x374>)
    1370:	4798      	blx	r3
    1372:	1e03      	subs	r3, r0, #0
    1374:	d011      	beq.n	139a <menu+0x1de>
						itoa(cal_value,(char *) str,10);
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	1c1a      	adds	r2, r3, #0
    137a:	230c      	movs	r3, #12
    137c:	18fb      	adds	r3, r7, r3
    137e:	1c10      	adds	r0, r2, #0
    1380:	1c19      	adds	r1, r3, #0
    1382:	220a      	movs	r2, #10
    1384:	4b6b      	ldr	r3, [pc, #428]	; (1534 <menu+0x378>)
    1386:	4798      	blx	r3
						console_puts(str);
    1388:	230c      	movs	r3, #12
    138a:	18fb      	adds	r3, r7, r3
    138c:	1c18      	adds	r0, r3, #0
    138e:	4b53      	ldr	r3, [pc, #332]	; (14dc <menu+0x320>)
    1390:	4798      	blx	r3
						console_puts((uint8_t *) "\r\n");
    1392:	4b5e      	ldr	r3, [pc, #376]	; (150c <menu+0x350>)
    1394:	1c18      	adds	r0, r3, #0
    1396:	4b51      	ldr	r3, [pc, #324]	; (14dc <menu+0x320>)
    1398:	4798      	blx	r3
					}
					if (console_getc(&str[0])) break;
    139a:	230c      	movs	r3, #12
    139c:	18fb      	adds	r3, r7, r3
    139e:	1c18      	adds	r0, r3, #0
    13a0:	4b65      	ldr	r3, [pc, #404]	; (1538 <menu+0x37c>)
    13a2:	4798      	blx	r3
    13a4:	1e03      	subs	r3, r0, #0
    13a6:	d001      	beq.n	13ac <menu+0x1f0>
    13a8:	46c0      	nop			; (mov r8, r8)
				}

			break;
    13aa:	e093      	b.n	14d4 <menu+0x318>
						itoa(cal_value,(char *) str,10);
						console_puts(str);
						console_puts((uint8_t *) "\r\n");
					}
					if (console_getc(&str[0])) break;
				}
    13ac:	e7dd      	b.n	136a <menu+0x1ae>


			case 'e':
			case 'E':
				while(1) {
					console_puts((uint8_t *) "\r\nEnable? [1,0]: ");
    13ae:	4b63      	ldr	r3, [pc, #396]	; (153c <menu+0x380>)
    13b0:	1c18      	adds	r0, r3, #0
    13b2:	4b4a      	ldr	r3, [pc, #296]	; (14dc <menu+0x320>)
    13b4:	4798      	blx	r3
					if (console_gets(str,2) == 0) break;
    13b6:	230c      	movs	r3, #12
    13b8:	18fb      	adds	r3, r7, r3
    13ba:	1c18      	adds	r0, r3, #0
    13bc:	2102      	movs	r1, #2
    13be:	4b52      	ldr	r3, [pc, #328]	; (1508 <menu+0x34c>)
    13c0:	4798      	blx	r3
    13c2:	1e03      	subs	r3, r0, #0
    13c4:	d101      	bne.n	13ca <menu+0x20e>
    13c6:	46c0      	nop			; (mov r8, r8)
					if (str[0] == '1') PORT->Group[0].OUTSET.reg = (1<<6);
					else if (str[0] == '0') PORT->Group[0].OUTCLR.reg = (1<<6);
				}
			break;
    13c8:	e084      	b.n	14d4 <menu+0x318>
			case 'e':
			case 'E':
				while(1) {
					console_puts((uint8_t *) "\r\nEnable? [1,0]: ");
					if (console_gets(str,2) == 0) break;
					if (str[0] == '1') PORT->Group[0].OUTSET.reg = (1<<6);
    13ca:	230c      	movs	r3, #12
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	2b31      	cmp	r3, #49	; 0x31
    13d2:	d103      	bne.n	13dc <menu+0x220>
    13d4:	4b5a      	ldr	r3, [pc, #360]	; (1540 <menu+0x384>)
    13d6:	2240      	movs	r2, #64	; 0x40
    13d8:	619a      	str	r2, [r3, #24]
    13da:	e007      	b.n	13ec <menu+0x230>
					else if (str[0] == '0') PORT->Group[0].OUTCLR.reg = (1<<6);
    13dc:	230c      	movs	r3, #12
    13de:	18fb      	adds	r3, r7, r3
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	2b30      	cmp	r3, #48	; 0x30
    13e4:	d102      	bne.n	13ec <menu+0x230>
    13e6:	4b56      	ldr	r3, [pc, #344]	; (1540 <menu+0x384>)
    13e8:	2240      	movs	r2, #64	; 0x40
    13ea:	615a      	str	r2, [r3, #20]
				}
    13ec:	e7df      	b.n	13ae <menu+0x1f2>
			break;

			case 'r':
			case 'R':
				console_puts((uint8_t *) "Address: 0x");
    13ee:	4b55      	ldr	r3, [pc, #340]	; (1544 <menu+0x388>)
    13f0:	1c18      	adds	r0, r3, #0
    13f2:	4b3a      	ldr	r3, [pc, #232]	; (14dc <menu+0x320>)
    13f4:	4798      	blx	r3
				if (console_gets(str,63) == 0) break;
    13f6:	230c      	movs	r3, #12
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	1c18      	adds	r0, r3, #0
    13fc:	213f      	movs	r1, #63	; 0x3f
    13fe:	4b42      	ldr	r3, [pc, #264]	; (1508 <menu+0x34c>)
    1400:	4798      	blx	r3
    1402:	1e03      	subs	r3, r0, #0
    1404:	d100      	bne.n	1408 <menu+0x24c>
    1406:	e065      	b.n	14d4 <menu+0x318>
				rtc_address = (uint8_t) strtol((char *) str, NULL, 16);
    1408:	230c      	movs	r3, #12
    140a:	18fb      	adds	r3, r7, r3
    140c:	1c18      	adds	r0, r3, #0
    140e:	2100      	movs	r1, #0
    1410:	2210      	movs	r2, #16
    1412:	4b4d      	ldr	r3, [pc, #308]	; (1548 <menu+0x38c>)
    1414:	4798      	blx	r3
    1416:	1c02      	adds	r2, r0, #0
    1418:	234f      	movs	r3, #79	; 0x4f
    141a:	18fb      	adds	r3, r7, r3
    141c:	701a      	strb	r2, [r3, #0]
				rtc_read(rtc_address,&rtc_data,1);
    141e:	234f      	movs	r3, #79	; 0x4f
    1420:	18fb      	adds	r3, r7, r3
    1422:	781a      	ldrb	r2, [r3, #0]
    1424:	230b      	movs	r3, #11
    1426:	18fb      	adds	r3, r7, r3
    1428:	1c10      	adds	r0, r2, #0
    142a:	1c19      	adds	r1, r3, #0
    142c:	2201      	movs	r2, #1
    142e:	4b47      	ldr	r3, [pc, #284]	; (154c <menu+0x390>)
    1430:	4798      	blx	r3
				console_puts((uint8_t *) "\r\nData: 0x");
    1432:	4b47      	ldr	r3, [pc, #284]	; (1550 <menu+0x394>)
    1434:	1c18      	adds	r0, r3, #0
    1436:	4b29      	ldr	r3, [pc, #164]	; (14dc <menu+0x320>)
    1438:	4798      	blx	r3
				itoa(rtc_data,(char *) str,16); console_puts(str);
    143a:	230b      	movs	r3, #11
    143c:	18fb      	adds	r3, r7, r3
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	1c1a      	adds	r2, r3, #0
    1442:	230c      	movs	r3, #12
    1444:	18fb      	adds	r3, r7, r3
    1446:	1c10      	adds	r0, r2, #0
    1448:	1c19      	adds	r1, r3, #0
    144a:	2210      	movs	r2, #16
    144c:	4b39      	ldr	r3, [pc, #228]	; (1534 <menu+0x378>)
    144e:	4798      	blx	r3
    1450:	230c      	movs	r3, #12
    1452:	18fb      	adds	r3, r7, r3
    1454:	1c18      	adds	r0, r3, #0
    1456:	4b21      	ldr	r3, [pc, #132]	; (14dc <menu+0x320>)
    1458:	4798      	blx	r3
			break;
    145a:	e03b      	b.n	14d4 <menu+0x318>

			case 'w':
			case 'W':
				console_puts((uint8_t *) "Address: 0x");
    145c:	4b39      	ldr	r3, [pc, #228]	; (1544 <menu+0x388>)
    145e:	1c18      	adds	r0, r3, #0
    1460:	4b1e      	ldr	r3, [pc, #120]	; (14dc <menu+0x320>)
    1462:	4798      	blx	r3
				if (console_gets(str,63) == 0) break;
    1464:	230c      	movs	r3, #12
    1466:	18fb      	adds	r3, r7, r3
    1468:	1c18      	adds	r0, r3, #0
    146a:	213f      	movs	r1, #63	; 0x3f
    146c:	4b26      	ldr	r3, [pc, #152]	; (1508 <menu+0x34c>)
    146e:	4798      	blx	r3
    1470:	1e03      	subs	r3, r0, #0
    1472:	d100      	bne.n	1476 <menu+0x2ba>
    1474:	e02e      	b.n	14d4 <menu+0x318>
				rtc_address = (uint8_t) strtol((char *) str, NULL, 16);
    1476:	230c      	movs	r3, #12
    1478:	18fb      	adds	r3, r7, r3
    147a:	1c18      	adds	r0, r3, #0
    147c:	2100      	movs	r1, #0
    147e:	2210      	movs	r2, #16
    1480:	4b31      	ldr	r3, [pc, #196]	; (1548 <menu+0x38c>)
    1482:	4798      	blx	r3
    1484:	1c02      	adds	r2, r0, #0
    1486:	234f      	movs	r3, #79	; 0x4f
    1488:	18fb      	adds	r3, r7, r3
    148a:	701a      	strb	r2, [r3, #0]
				console_puts((uint8_t *) "\r\nData: 0x");
    148c:	4b30      	ldr	r3, [pc, #192]	; (1550 <menu+0x394>)
    148e:	1c18      	adds	r0, r3, #0
    1490:	4b12      	ldr	r3, [pc, #72]	; (14dc <menu+0x320>)
    1492:	4798      	blx	r3
				if (console_gets(str,63) == 0) break;
    1494:	230c      	movs	r3, #12
    1496:	18fb      	adds	r3, r7, r3
    1498:	1c18      	adds	r0, r3, #0
    149a:	213f      	movs	r1, #63	; 0x3f
    149c:	4b1a      	ldr	r3, [pc, #104]	; (1508 <menu+0x34c>)
    149e:	4798      	blx	r3
    14a0:	1e03      	subs	r3, r0, #0
    14a2:	d100      	bne.n	14a6 <menu+0x2ea>
    14a4:	e016      	b.n	14d4 <menu+0x318>
				rtc_data = (uint8_t) strtol((char *) str, NULL, 16);
    14a6:	230c      	movs	r3, #12
    14a8:	18fb      	adds	r3, r7, r3
    14aa:	1c18      	adds	r0, r3, #0
    14ac:	2100      	movs	r1, #0
    14ae:	2210      	movs	r2, #16
    14b0:	4b25      	ldr	r3, [pc, #148]	; (1548 <menu+0x38c>)
    14b2:	4798      	blx	r3
    14b4:	1c03      	adds	r3, r0, #0
    14b6:	b2da      	uxtb	r2, r3
    14b8:	230b      	movs	r3, #11
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	701a      	strb	r2, [r3, #0]
				rtc_write(rtc_address,&rtc_data,1);
    14be:	234f      	movs	r3, #79	; 0x4f
    14c0:	18fb      	adds	r3, r7, r3
    14c2:	781a      	ldrb	r2, [r3, #0]
    14c4:	230b      	movs	r3, #11
    14c6:	18fb      	adds	r3, r7, r3
    14c8:	1c10      	adds	r0, r2, #0
    14ca:	1c19      	adds	r1, r3, #0
    14cc:	2201      	movs	r2, #1
    14ce:	4b21      	ldr	r3, [pc, #132]	; (1554 <menu+0x398>)
    14d0:	4798      	blx	r3
			break;
    14d2:	46c0      	nop			; (mov r8, r8)

		}

	}
    14d4:	e675      	b.n	11c2 <menu+0x6>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	000022e0 	.word	0x000022e0
    14dc:	000007f1 	.word	0x000007f1
    14e0:	00002304 	.word	0x00002304
    14e4:	0000231c 	.word	0x0000231c
    14e8:	0000233c 	.word	0x0000233c
    14ec:	00002364 	.word	0x00002364
    14f0:	0000237c 	.word	0x0000237c
    14f4:	00002394 	.word	0x00002394
    14f8:	000023a8 	.word	0x000023a8
    14fc:	000023bc 	.word	0x000023bc
    1500:	000023d0 	.word	0x000023d0
    1504:	000023e4 	.word	0x000023e4
    1508:	0000081d 	.word	0x0000081d
    150c:	000023ec 	.word	0x000023ec
    1510:	00002450 	.word	0x00002450
    1514:	000023f0 	.word	0x000023f0
    1518:	00001e95 	.word	0x00001e95
    151c:	20000574 	.word	0x20000574
    1520:	000023f8 	.word	0x000023f8
    1524:	00000411 	.word	0x00000411
    1528:	00000221 	.word	0x00000221
    152c:	00002414 	.word	0x00002414
    1530:	0000023d 	.word	0x0000023d
    1534:	00001b0d 	.word	0x00001b0d
    1538:	00000729 	.word	0x00000729
    153c:	00002424 	.word	0x00002424
    1540:	41004400 	.word	0x41004400
    1544:	00002438 	.word	0x00002438
    1548:	00001cfd 	.word	0x00001cfd
    154c:	00001725 	.word	0x00001725
    1550:	00002444 	.word	0x00002444
    1554:	00001865 	.word	0x00001865

00001558 <rtc_init>:
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
    155e:	4b65      	ldr	r3, [pc, #404]	; (16f4 <rtc_init+0x19c>)
    1560:	4a65      	ldr	r2, [pc, #404]	; (16f8 <rtc_init+0x1a0>)
    1562:	805a      	strh	r2, [r3, #2]
    1564:	4b63      	ldr	r3, [pc, #396]	; (16f4 <rtc_init+0x19c>)
    1566:	4a65      	ldr	r2, [pc, #404]	; (16fc <rtc_init+0x1a4>)
    1568:	805a      	strh	r2, [r3, #2]
    156a:	4b65      	ldr	r3, [pc, #404]	; (1700 <rtc_init+0x1a8>)
    156c:	4a64      	ldr	r2, [pc, #400]	; (1700 <rtc_init+0x1a8>)
    156e:	6a12      	ldr	r2, [r2, #32]
    1570:	2120      	movs	r1, #32
    1572:	430a      	orrs	r2, r1
    1574:	621a      	str	r2, [r3, #32]
    1576:	4a63      	ldr	r2, [pc, #396]	; (1704 <rtc_init+0x1ac>)
    1578:	233b      	movs	r3, #59	; 0x3b
    157a:	5cd1      	ldrb	r1, [r2, r3]
    157c:	200f      	movs	r0, #15
    157e:	4001      	ands	r1, r0
    1580:	1c08      	adds	r0, r1, #0
    1582:	2120      	movs	r1, #32
    1584:	4301      	orrs	r1, r0
    1586:	54d1      	strb	r1, [r2, r3]
    1588:	4a5e      	ldr	r2, [pc, #376]	; (1704 <rtc_init+0x1ac>)
    158a:	233b      	movs	r3, #59	; 0x3b
    158c:	5cd1      	ldrb	r1, [r2, r3]
    158e:	200f      	movs	r0, #15
    1590:	4381      	bics	r1, r0
    1592:	1c08      	adds	r0, r1, #0
    1594:	2102      	movs	r1, #2
    1596:	4301      	orrs	r1, r0
    1598:	54d1      	strb	r1, [r2, r3]
    159a:	4a5a      	ldr	r2, [pc, #360]	; (1704 <rtc_init+0x1ac>)
    159c:	2357      	movs	r3, #87	; 0x57
    159e:	5cd1      	ldrb	r1, [r2, r3]
    15a0:	2001      	movs	r0, #1
    15a2:	4301      	orrs	r1, r0
    15a4:	54d1      	strb	r1, [r2, r3]
    15a6:	4a57      	ldr	r2, [pc, #348]	; (1704 <rtc_init+0x1ac>)
    15a8:	2356      	movs	r3, #86	; 0x56
    15aa:	5cd1      	ldrb	r1, [r2, r3]
    15ac:	2001      	movs	r0, #1
    15ae:	4301      	orrs	r1, r0
    15b0:	54d1      	strb	r1, [r2, r3]
    15b2:	4b55      	ldr	r3, [pc, #340]	; (1708 <rtc_init+0x1b0>)
    15b4:	4a55      	ldr	r2, [pc, #340]	; (170c <rtc_init+0x1b4>)
    15b6:	815a      	strh	r2, [r3, #10]
    15b8:	46c0      	nop			; (mov r8, r8)
    15ba:	4b53      	ldr	r3, [pc, #332]	; (1708 <rtc_init+0x1b0>)
    15bc:	8a1b      	ldrh	r3, [r3, #16]
    15be:	b29b      	uxth	r3, r3
    15c0:	0bdb      	lsrs	r3, r3, #15
    15c2:	b2db      	uxtb	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	d1f8      	bne.n	15ba <rtc_init+0x62>
    15c8:	4b4f      	ldr	r3, [pc, #316]	; (1708 <rtc_init+0x1b0>)
    15ca:	4a51      	ldr	r2, [pc, #324]	; (1710 <rtc_init+0x1b8>)
    15cc:	601a      	str	r2, [r3, #0]
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	4b4d      	ldr	r3, [pc, #308]	; (1708 <rtc_init+0x1b0>)
    15d2:	8a1b      	ldrh	r3, [r3, #16]
    15d4:	b29b      	uxth	r3, r3
    15d6:	0bdb      	lsrs	r3, r3, #15
    15d8:	b2db      	uxtb	r3, r3
    15da:	2b00      	cmp	r3, #0
    15dc:	d1f8      	bne.n	15d0 <rtc_init+0x78>
    15de:	4b4a      	ldr	r3, [pc, #296]	; (1708 <rtc_init+0x1b0>)
    15e0:	2200      	movs	r2, #0
    15e2:	605a      	str	r2, [r3, #4]
    15e4:	46c0      	nop			; (mov r8, r8)
    15e6:	4b48      	ldr	r3, [pc, #288]	; (1708 <rtc_init+0x1b0>)
    15e8:	8a1b      	ldrh	r3, [r3, #16]
    15ea:	b29b      	uxth	r3, r3
    15ec:	0bdb      	lsrs	r3, r3, #15
    15ee:	b2db      	uxtb	r3, r3
    15f0:	2b00      	cmp	r3, #0
    15f2:	d1f8      	bne.n	15e6 <rtc_init+0x8e>
    15f4:	4b44      	ldr	r3, [pc, #272]	; (1708 <rtc_init+0x1b0>)
    15f6:	8a1a      	ldrh	r2, [r3, #16]
    15f8:	2130      	movs	r1, #48	; 0x30
    15fa:	438a      	bics	r2, r1
    15fc:	1c11      	adds	r1, r2, #0
    15fe:	2210      	movs	r2, #16
    1600:	430a      	orrs	r2, r1
    1602:	821a      	strh	r2, [r3, #16]
    1604:	46c0      	nop			; (mov r8, r8)
    1606:	4b40      	ldr	r3, [pc, #256]	; (1708 <rtc_init+0x1b0>)
    1608:	8a1b      	ldrh	r3, [r3, #16]
    160a:	b29b      	uxth	r3, r3
    160c:	0bdb      	lsrs	r3, r3, #15
    160e:	b2db      	uxtb	r3, r3
    1610:	2b00      	cmp	r3, #0
    1612:	d1f8      	bne.n	1606 <rtc_init+0xae>
    1614:	4b3c      	ldr	r3, [pc, #240]	; (1708 <rtc_init+0x1b0>)
    1616:	681a      	ldr	r2, [r3, #0]
    1618:	2102      	movs	r1, #2
    161a:	430a      	orrs	r2, r1
    161c:	601a      	str	r2, [r3, #0]
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	4b39      	ldr	r3, [pc, #228]	; (1708 <rtc_init+0x1b0>)
    1622:	8a1b      	ldrh	r3, [r3, #16]
    1624:	b29b      	uxth	r3, r3
    1626:	0bdb      	lsrs	r3, r3, #15
    1628:	b2db      	uxtb	r3, r3
    162a:	2b00      	cmp	r3, #0
    162c:	d1f8      	bne.n	1620 <rtc_init+0xc8>
    162e:	4b36      	ldr	r3, [pc, #216]	; (1708 <rtc_init+0x1b0>)
    1630:	8a1a      	ldrh	r2, [r3, #16]
    1632:	2130      	movs	r1, #48	; 0x30
    1634:	438a      	bics	r2, r1
    1636:	1c11      	adds	r1, r2, #0
    1638:	2210      	movs	r2, #16
    163a:	430a      	orrs	r2, r1
    163c:	821a      	strh	r2, [r3, #16]
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	4b31      	ldr	r3, [pc, #196]	; (1708 <rtc_init+0x1b0>)
    1642:	8a1b      	ldrh	r3, [r3, #16]
    1644:	b29b      	uxth	r3, r3
    1646:	0bdb      	lsrs	r3, r3, #15
    1648:	b2db      	uxtb	r3, r3
    164a:	2b00      	cmp	r3, #0
    164c:	d1f8      	bne.n	1640 <rtc_init+0xe8>
    164e:	4b31      	ldr	r3, [pc, #196]	; (1714 <rtc_init+0x1bc>)
    1650:	2000      	movs	r0, #0
    1652:	1c19      	adds	r1, r3, #0
    1654:	2230      	movs	r2, #48	; 0x30
    1656:	4b30      	ldr	r3, [pc, #192]	; (1718 <rtc_init+0x1c0>)
    1658:	4798      	blx	r3
    165a:	1dfb      	adds	r3, r7, #7
    165c:	4a2d      	ldr	r2, [pc, #180]	; (1714 <rtc_init+0x1bc>)
    165e:	7a12      	ldrb	r2, [r2, #8]
    1660:	701a      	strb	r2, [r3, #0]
    1662:	4b2c      	ldr	r3, [pc, #176]	; (1714 <rtc_init+0x1bc>)
    1664:	225a      	movs	r2, #90	; 0x5a
    1666:	721a      	strb	r2, [r3, #8]
    1668:	4b2a      	ldr	r3, [pc, #168]	; (1714 <rtc_init+0x1bc>)
    166a:	2282      	movs	r2, #130	; 0x82
    166c:	725a      	strb	r2, [r3, #9]
    166e:	4b29      	ldr	r3, [pc, #164]	; (1714 <rtc_init+0x1bc>)
    1670:	221b      	movs	r2, #27
    1672:	729a      	strb	r2, [r3, #10]
    1674:	4b27      	ldr	r3, [pc, #156]	; (1714 <rtc_init+0x1bc>)
    1676:	2200      	movs	r2, #0
    1678:	741a      	strb	r2, [r3, #16]
    167a:	4b26      	ldr	r3, [pc, #152]	; (1714 <rtc_init+0x1bc>)
    167c:	2200      	movs	r2, #0
    167e:	745a      	strb	r2, [r3, #17]
    1680:	4b24      	ldr	r3, [pc, #144]	; (1714 <rtc_init+0x1bc>)
    1682:	2200      	movs	r2, #0
    1684:	749a      	strb	r2, [r3, #18]
    1686:	4b23      	ldr	r3, [pc, #140]	; (1714 <rtc_init+0x1bc>)
    1688:	2200      	movs	r2, #0
    168a:	74da      	strb	r2, [r3, #19]
    168c:	4b21      	ldr	r3, [pc, #132]	; (1714 <rtc_init+0x1bc>)
    168e:	2200      	movs	r2, #0
    1690:	751a      	strb	r2, [r3, #20]
    1692:	4b20      	ldr	r3, [pc, #128]	; (1714 <rtc_init+0x1bc>)
    1694:	2200      	movs	r2, #0
    1696:	755a      	strb	r2, [r3, #21]
    1698:	4b1e      	ldr	r3, [pc, #120]	; (1714 <rtc_init+0x1bc>)
    169a:	2220      	movs	r2, #32
    169c:	2100      	movs	r1, #0
    169e:	5499      	strb	r1, [r3, r2]
    16a0:	4b1e      	ldr	r3, [pc, #120]	; (171c <rtc_init+0x1c4>)
    16a2:	2007      	movs	r0, #7
    16a4:	1c19      	adds	r1, r3, #0
    16a6:	222a      	movs	r2, #42	; 0x2a
    16a8:	4b1d      	ldr	r3, [pc, #116]	; (1720 <rtc_init+0x1c8>)
    16aa:	4798      	blx	r3
    16ac:	1dfb      	adds	r3, r7, #7
    16ae:	781b      	ldrb	r3, [r3, #0]
    16b0:	2201      	movs	r2, #1
    16b2:	4013      	ands	r3, r2
    16b4:	d01a      	beq.n	16ec <rtc_init+0x194>
    16b6:	4b17      	ldr	r3, [pc, #92]	; (1714 <rtc_init+0x1bc>)
    16b8:	2200      	movs	r2, #0
    16ba:	701a      	strb	r2, [r3, #0]
    16bc:	4b15      	ldr	r3, [pc, #84]	; (1714 <rtc_init+0x1bc>)
    16be:	2200      	movs	r2, #0
    16c0:	705a      	strb	r2, [r3, #1]
    16c2:	4b14      	ldr	r3, [pc, #80]	; (1714 <rtc_init+0x1bc>)
    16c4:	2200      	movs	r2, #0
    16c6:	709a      	strb	r2, [r3, #2]
    16c8:	4b12      	ldr	r3, [pc, #72]	; (1714 <rtc_init+0x1bc>)
    16ca:	2201      	movs	r2, #1
    16cc:	70da      	strb	r2, [r3, #3]
    16ce:	4b11      	ldr	r3, [pc, #68]	; (1714 <rtc_init+0x1bc>)
    16d0:	2201      	movs	r2, #1
    16d2:	711a      	strb	r2, [r3, #4]
    16d4:	4b0f      	ldr	r3, [pc, #60]	; (1714 <rtc_init+0x1bc>)
    16d6:	2216      	movs	r2, #22
    16d8:	715a      	strb	r2, [r3, #5]
    16da:	4b0e      	ldr	r3, [pc, #56]	; (1714 <rtc_init+0x1bc>)
    16dc:	2200      	movs	r2, #0
    16de:	719a      	strb	r2, [r3, #6]
    16e0:	4b0c      	ldr	r3, [pc, #48]	; (1714 <rtc_init+0x1bc>)
    16e2:	2000      	movs	r0, #0
    16e4:	1c19      	adds	r1, r3, #0
    16e6:	2207      	movs	r2, #7
    16e8:	4b0d      	ldr	r3, [pc, #52]	; (1720 <rtc_init+0x1c8>)
    16ea:	4798      	blx	r3
    16ec:	46bd      	mov	sp, r7
    16ee:	b002      	add	sp, #8
    16f0:	bd80      	pop	{r7, pc}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	40000c00 	.word	0x40000c00
    16f8:	00004010 	.word	0x00004010
    16fc:	0000420c 	.word	0x0000420c
    1700:	40000400 	.word	0x40000400
    1704:	41004400 	.word	0x41004400
    1708:	42001400 	.word	0x42001400
    170c:	00000f0f 	.word	0x00000f0f
    1710:	00300014 	.word	0x00300014
    1714:	20000588 	.word	0x20000588
    1718:	00001725 	.word	0x00001725
    171c:	2000058f 	.word	0x2000058f
    1720:	00001865 	.word	0x00001865

00001724 <rtc_read>:
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
    172a:	6039      	str	r1, [r7, #0]
    172c:	1c11      	adds	r1, r2, #0
    172e:	1dfb      	adds	r3, r7, #7
    1730:	1c02      	adds	r2, r0, #0
    1732:	701a      	strb	r2, [r3, #0]
    1734:	1dbb      	adds	r3, r7, #6
    1736:	1c0a      	adds	r2, r1, #0
    1738:	701a      	strb	r2, [r3, #0]
    173a:	1dbb      	adds	r3, r7, #6
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	2b00      	cmp	r3, #0
    1740:	d101      	bne.n	1746 <rtc_read+0x22>
    1742:	2301      	movs	r3, #1
    1744:	e087      	b.n	1856 <rtc_read+0x132>
    1746:	4b46      	ldr	r3, [pc, #280]	; (1860 <rtc_read+0x13c>)
    1748:	22de      	movs	r2, #222	; 0xde
    174a:	751a      	strb	r2, [r3, #20]
    174c:	46c0      	nop			; (mov r8, r8)
    174e:	4b44      	ldr	r3, [pc, #272]	; (1860 <rtc_read+0x13c>)
    1750:	8a1b      	ldrh	r3, [r3, #16]
    1752:	b29b      	uxth	r3, r3
    1754:	0bdb      	lsrs	r3, r3, #15
    1756:	b2db      	uxtb	r3, r3
    1758:	2b00      	cmp	r3, #0
    175a:	d1f8      	bne.n	174e <rtc_read+0x2a>
    175c:	46c0      	nop			; (mov r8, r8)
    175e:	4b40      	ldr	r3, [pc, #256]	; (1860 <rtc_read+0x13c>)
    1760:	7b9b      	ldrb	r3, [r3, #14]
    1762:	2201      	movs	r2, #1
    1764:	4013      	ands	r3, r2
    1766:	b2db      	uxtb	r3, r3
    1768:	2b00      	cmp	r3, #0
    176a:	d0f8      	beq.n	175e <rtc_read+0x3a>
    176c:	4b3c      	ldr	r3, [pc, #240]	; (1860 <rtc_read+0x13c>)
    176e:	8a1b      	ldrh	r3, [r3, #16]
    1770:	b29b      	uxth	r3, r3
    1772:	1c1a      	adds	r2, r3, #0
    1774:	2307      	movs	r3, #7
    1776:	4013      	ands	r3, r2
    1778:	d000      	beq.n	177c <rtc_read+0x58>
    177a:	e05f      	b.n	183c <rtc_read+0x118>
    177c:	4a38      	ldr	r2, [pc, #224]	; (1860 <rtc_read+0x13c>)
    177e:	1dfb      	adds	r3, r7, #7
    1780:	781b      	ldrb	r3, [r3, #0]
    1782:	7613      	strb	r3, [r2, #24]
    1784:	46c0      	nop			; (mov r8, r8)
    1786:	4b36      	ldr	r3, [pc, #216]	; (1860 <rtc_read+0x13c>)
    1788:	8a1b      	ldrh	r3, [r3, #16]
    178a:	b29b      	uxth	r3, r3
    178c:	0bdb      	lsrs	r3, r3, #15
    178e:	b2db      	uxtb	r3, r3
    1790:	2b00      	cmp	r3, #0
    1792:	d1f8      	bne.n	1786 <rtc_read+0x62>
    1794:	46c0      	nop			; (mov r8, r8)
    1796:	4b32      	ldr	r3, [pc, #200]	; (1860 <rtc_read+0x13c>)
    1798:	7b9b      	ldrb	r3, [r3, #14]
    179a:	2201      	movs	r2, #1
    179c:	4013      	ands	r3, r2
    179e:	b2db      	uxtb	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	d0f8      	beq.n	1796 <rtc_read+0x72>
    17a4:	4b2e      	ldr	r3, [pc, #184]	; (1860 <rtc_read+0x13c>)
    17a6:	8a1b      	ldrh	r3, [r3, #16]
    17a8:	b29b      	uxth	r3, r3
    17aa:	1c1a      	adds	r2, r3, #0
    17ac:	2307      	movs	r3, #7
    17ae:	4013      	ands	r3, r2
    17b0:	d000      	beq.n	17b4 <rtc_read+0x90>
    17b2:	e043      	b.n	183c <rtc_read+0x118>
    17b4:	4b2a      	ldr	r3, [pc, #168]	; (1860 <rtc_read+0x13c>)
    17b6:	22df      	movs	r2, #223	; 0xdf
    17b8:	751a      	strb	r2, [r3, #20]
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	4b28      	ldr	r3, [pc, #160]	; (1860 <rtc_read+0x13c>)
    17be:	8a1b      	ldrh	r3, [r3, #16]
    17c0:	b29b      	uxth	r3, r3
    17c2:	0bdb      	lsrs	r3, r3, #15
    17c4:	b2db      	uxtb	r3, r3
    17c6:	2b00      	cmp	r3, #0
    17c8:	d1f8      	bne.n	17bc <rtc_read+0x98>
    17ca:	e02e      	b.n	182a <rtc_read+0x106>
    17cc:	46c0      	nop			; (mov r8, r8)
    17ce:	4b24      	ldr	r3, [pc, #144]	; (1860 <rtc_read+0x13c>)
    17d0:	7b9b      	ldrb	r3, [r3, #14]
    17d2:	b2db      	uxtb	r3, r3
    17d4:	085b      	lsrs	r3, r3, #1
    17d6:	1c1a      	adds	r2, r3, #0
    17d8:	2301      	movs	r3, #1
    17da:	4013      	ands	r3, r2
    17dc:	b2db      	uxtb	r3, r3
    17de:	2b00      	cmp	r3, #0
    17e0:	d0f5      	beq.n	17ce <rtc_read+0xaa>
    17e2:	683b      	ldr	r3, [r7, #0]
    17e4:	1c5a      	adds	r2, r3, #1
    17e6:	603a      	str	r2, [r7, #0]
    17e8:	4a1d      	ldr	r2, [pc, #116]	; (1860 <rtc_read+0x13c>)
    17ea:	7e12      	ldrb	r2, [r2, #24]
    17ec:	b2d2      	uxtb	r2, r2
    17ee:	701a      	strb	r2, [r3, #0]
    17f0:	1dbb      	adds	r3, r7, #6
    17f2:	781b      	ldrb	r3, [r3, #0]
    17f4:	2b00      	cmp	r3, #0
    17f6:	d00c      	beq.n	1812 <rtc_read+0xee>
    17f8:	4b19      	ldr	r3, [pc, #100]	; (1860 <rtc_read+0x13c>)
    17fa:	2280      	movs	r2, #128	; 0x80
    17fc:	0292      	lsls	r2, r2, #10
    17fe:	605a      	str	r2, [r3, #4]
    1800:	46c0      	nop			; (mov r8, r8)
    1802:	4b17      	ldr	r3, [pc, #92]	; (1860 <rtc_read+0x13c>)
    1804:	8a1b      	ldrh	r3, [r3, #16]
    1806:	b29b      	uxth	r3, r3
    1808:	0bdb      	lsrs	r3, r3, #15
    180a:	b2db      	uxtb	r3, r3
    180c:	2b00      	cmp	r3, #0
    180e:	d1f8      	bne.n	1802 <rtc_read+0xde>
    1810:	e00b      	b.n	182a <rtc_read+0x106>
    1812:	4b13      	ldr	r3, [pc, #76]	; (1860 <rtc_read+0x13c>)
    1814:	22e0      	movs	r2, #224	; 0xe0
    1816:	02d2      	lsls	r2, r2, #11
    1818:	605a      	str	r2, [r3, #4]
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <rtc_read+0x13c>)
    181e:	8a1b      	ldrh	r3, [r3, #16]
    1820:	b29b      	uxth	r3, r3
    1822:	0bdb      	lsrs	r3, r3, #15
    1824:	b2db      	uxtb	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	d1f8      	bne.n	181c <rtc_read+0xf8>
    182a:	1dbb      	adds	r3, r7, #6
    182c:	781b      	ldrb	r3, [r3, #0]
    182e:	1dba      	adds	r2, r7, #6
    1830:	1e59      	subs	r1, r3, #1
    1832:	7011      	strb	r1, [r2, #0]
    1834:	2b00      	cmp	r3, #0
    1836:	d1c9      	bne.n	17cc <rtc_read+0xa8>
    1838:	2301      	movs	r3, #1
    183a:	e00c      	b.n	1856 <rtc_read+0x132>
    183c:	4b08      	ldr	r3, [pc, #32]	; (1860 <rtc_read+0x13c>)
    183e:	22e0      	movs	r2, #224	; 0xe0
    1840:	02d2      	lsls	r2, r2, #11
    1842:	605a      	str	r2, [r3, #4]
    1844:	46c0      	nop			; (mov r8, r8)
    1846:	4b06      	ldr	r3, [pc, #24]	; (1860 <rtc_read+0x13c>)
    1848:	8a1b      	ldrh	r3, [r3, #16]
    184a:	b29b      	uxth	r3, r3
    184c:	0bdb      	lsrs	r3, r3, #15
    184e:	b2db      	uxtb	r3, r3
    1850:	2b00      	cmp	r3, #0
    1852:	d1f8      	bne.n	1846 <rtc_read+0x122>
    1854:	2300      	movs	r3, #0
    1856:	1c18      	adds	r0, r3, #0
    1858:	46bd      	mov	sp, r7
    185a:	b002      	add	sp, #8
    185c:	bd80      	pop	{r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	42001400 	.word	0x42001400

00001864 <rtc_write>:
    1864:	b580      	push	{r7, lr}
    1866:	b084      	sub	sp, #16
    1868:	af00      	add	r7, sp, #0
    186a:	6039      	str	r1, [r7, #0]
    186c:	1c11      	adds	r1, r2, #0
    186e:	1dfb      	adds	r3, r7, #7
    1870:	1c02      	adds	r2, r0, #0
    1872:	701a      	strb	r2, [r3, #0]
    1874:	1dbb      	adds	r3, r7, #6
    1876:	1c0a      	adds	r2, r1, #0
    1878:	701a      	strb	r2, [r3, #0]
    187a:	230f      	movs	r3, #15
    187c:	18fb      	adds	r3, r7, r3
    187e:	2201      	movs	r2, #1
    1880:	701a      	strb	r2, [r3, #0]
    1882:	4b3e      	ldr	r3, [pc, #248]	; (197c <rtc_write+0x118>)
    1884:	22de      	movs	r2, #222	; 0xde
    1886:	751a      	strb	r2, [r3, #20]
    1888:	46c0      	nop			; (mov r8, r8)
    188a:	4b3c      	ldr	r3, [pc, #240]	; (197c <rtc_write+0x118>)
    188c:	8a1b      	ldrh	r3, [r3, #16]
    188e:	b29b      	uxth	r3, r3
    1890:	0bdb      	lsrs	r3, r3, #15
    1892:	b2db      	uxtb	r3, r3
    1894:	2b00      	cmp	r3, #0
    1896:	d1f8      	bne.n	188a <rtc_write+0x26>
    1898:	46c0      	nop			; (mov r8, r8)
    189a:	4b38      	ldr	r3, [pc, #224]	; (197c <rtc_write+0x118>)
    189c:	7b9b      	ldrb	r3, [r3, #14]
    189e:	2201      	movs	r2, #1
    18a0:	4013      	ands	r3, r2
    18a2:	b2db      	uxtb	r3, r3
    18a4:	2b00      	cmp	r3, #0
    18a6:	d0f8      	beq.n	189a <rtc_write+0x36>
    18a8:	4b34      	ldr	r3, [pc, #208]	; (197c <rtc_write+0x118>)
    18aa:	8a1b      	ldrh	r3, [r3, #16]
    18ac:	b29b      	uxth	r3, r3
    18ae:	1c1a      	adds	r2, r3, #0
    18b0:	2307      	movs	r3, #7
    18b2:	4013      	ands	r3, r2
    18b4:	d004      	beq.n	18c0 <rtc_write+0x5c>
    18b6:	230f      	movs	r3, #15
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	2200      	movs	r2, #0
    18bc:	701a      	strb	r2, [r3, #0]
    18be:	e049      	b.n	1954 <rtc_write+0xf0>
    18c0:	4a2e      	ldr	r2, [pc, #184]	; (197c <rtc_write+0x118>)
    18c2:	1dfb      	adds	r3, r7, #7
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	7613      	strb	r3, [r2, #24]
    18c8:	46c0      	nop			; (mov r8, r8)
    18ca:	4b2c      	ldr	r3, [pc, #176]	; (197c <rtc_write+0x118>)
    18cc:	8a1b      	ldrh	r3, [r3, #16]
    18ce:	b29b      	uxth	r3, r3
    18d0:	0bdb      	lsrs	r3, r3, #15
    18d2:	b2db      	uxtb	r3, r3
    18d4:	2b00      	cmp	r3, #0
    18d6:	d1f8      	bne.n	18ca <rtc_write+0x66>
    18d8:	46c0      	nop			; (mov r8, r8)
    18da:	4b28      	ldr	r3, [pc, #160]	; (197c <rtc_write+0x118>)
    18dc:	7b9b      	ldrb	r3, [r3, #14]
    18de:	2201      	movs	r2, #1
    18e0:	4013      	ands	r3, r2
    18e2:	b2db      	uxtb	r3, r3
    18e4:	2b00      	cmp	r3, #0
    18e6:	d0f8      	beq.n	18da <rtc_write+0x76>
    18e8:	4b24      	ldr	r3, [pc, #144]	; (197c <rtc_write+0x118>)
    18ea:	8a1b      	ldrh	r3, [r3, #16]
    18ec:	b29b      	uxth	r3, r3
    18ee:	1c1a      	adds	r2, r3, #0
    18f0:	2307      	movs	r3, #7
    18f2:	4013      	ands	r3, r2
    18f4:	d004      	beq.n	1900 <rtc_write+0x9c>
    18f6:	230f      	movs	r3, #15
    18f8:	18fb      	adds	r3, r7, r3
    18fa:	2200      	movs	r2, #0
    18fc:	701a      	strb	r2, [r3, #0]
    18fe:	e029      	b.n	1954 <rtc_write+0xf0>
    1900:	e021      	b.n	1946 <rtc_write+0xe2>
    1902:	491e      	ldr	r1, [pc, #120]	; (197c <rtc_write+0x118>)
    1904:	683b      	ldr	r3, [r7, #0]
    1906:	1c5a      	adds	r2, r3, #1
    1908:	603a      	str	r2, [r7, #0]
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	760b      	strb	r3, [r1, #24]
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	4b1a      	ldr	r3, [pc, #104]	; (197c <rtc_write+0x118>)
    1912:	8a1b      	ldrh	r3, [r3, #16]
    1914:	b29b      	uxth	r3, r3
    1916:	0bdb      	lsrs	r3, r3, #15
    1918:	b2db      	uxtb	r3, r3
    191a:	2b00      	cmp	r3, #0
    191c:	d1f8      	bne.n	1910 <rtc_write+0xac>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	4b16      	ldr	r3, [pc, #88]	; (197c <rtc_write+0x118>)
    1922:	7b9b      	ldrb	r3, [r3, #14]
    1924:	2201      	movs	r2, #1
    1926:	4013      	ands	r3, r2
    1928:	b2db      	uxtb	r3, r3
    192a:	2b00      	cmp	r3, #0
    192c:	d0f8      	beq.n	1920 <rtc_write+0xbc>
    192e:	4b13      	ldr	r3, [pc, #76]	; (197c <rtc_write+0x118>)
    1930:	8a1b      	ldrh	r3, [r3, #16]
    1932:	b29b      	uxth	r3, r3
    1934:	1c1a      	adds	r2, r3, #0
    1936:	2307      	movs	r3, #7
    1938:	4013      	ands	r3, r2
    193a:	d004      	beq.n	1946 <rtc_write+0xe2>
    193c:	230f      	movs	r3, #15
    193e:	18fb      	adds	r3, r7, r3
    1940:	2200      	movs	r2, #0
    1942:	701a      	strb	r2, [r3, #0]
    1944:	e006      	b.n	1954 <rtc_write+0xf0>
    1946:	1dbb      	adds	r3, r7, #6
    1948:	781b      	ldrb	r3, [r3, #0]
    194a:	1dba      	adds	r2, r7, #6
    194c:	1e59      	subs	r1, r3, #1
    194e:	7011      	strb	r1, [r2, #0]
    1950:	2b00      	cmp	r3, #0
    1952:	d1d6      	bne.n	1902 <rtc_write+0x9e>
    1954:	4b09      	ldr	r3, [pc, #36]	; (197c <rtc_write+0x118>)
    1956:	22c0      	movs	r2, #192	; 0xc0
    1958:	0292      	lsls	r2, r2, #10
    195a:	605a      	str	r2, [r3, #4]
    195c:	46c0      	nop			; (mov r8, r8)
    195e:	4b07      	ldr	r3, [pc, #28]	; (197c <rtc_write+0x118>)
    1960:	8a1b      	ldrh	r3, [r3, #16]
    1962:	b29b      	uxth	r3, r3
    1964:	0bdb      	lsrs	r3, r3, #15
    1966:	b2db      	uxtb	r3, r3
    1968:	2b00      	cmp	r3, #0
    196a:	d1f8      	bne.n	195e <rtc_write+0xfa>
    196c:	230f      	movs	r3, #15
    196e:	18fb      	adds	r3, r7, r3
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	1c18      	adds	r0, r3, #0
    1974:	46bd      	mov	sp, r7
    1976:	b004      	add	sp, #16
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	42001400 	.word	0x42001400

00001980 <rtc_get_time>:
    1980:	b580      	push	{r7, lr}
    1982:	b082      	sub	sp, #8
    1984:	af00      	add	r7, sp, #0
    1986:	6078      	str	r0, [r7, #4]
    1988:	4b1b      	ldr	r3, [pc, #108]	; (19f8 <rtc_get_time+0x78>)
    198a:	2000      	movs	r0, #0
    198c:	1c19      	adds	r1, r3, #0
    198e:	2207      	movs	r2, #7
    1990:	4b1a      	ldr	r3, [pc, #104]	; (19fc <rtc_get_time+0x7c>)
    1992:	4798      	blx	r3
    1994:	4b18      	ldr	r3, [pc, #96]	; (19f8 <rtc_get_time+0x78>)
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	1c1a      	adds	r2, r3, #0
    199a:	2370      	movs	r3, #112	; 0x70
    199c:	4013      	ands	r3, r2
    199e:	111b      	asrs	r3, r3, #4
    19a0:	b2db      	uxtb	r3, r3
    19a2:	1c1a      	adds	r2, r3, #0
    19a4:	0092      	lsls	r2, r2, #2
    19a6:	18d3      	adds	r3, r2, r3
    19a8:	18db      	adds	r3, r3, r3
    19aa:	b2da      	uxtb	r2, r3
    19ac:	4b12      	ldr	r3, [pc, #72]	; (19f8 <rtc_get_time+0x78>)
    19ae:	781b      	ldrb	r3, [r3, #0]
    19b0:	210f      	movs	r1, #15
    19b2:	400b      	ands	r3, r1
    19b4:	b2db      	uxtb	r3, r3
    19b6:	18d3      	adds	r3, r2, r3
    19b8:	b2da      	uxtb	r2, r3
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	701a      	strb	r2, [r3, #0]
    19be:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <rtc_get_time+0x78>)
    19c0:	785b      	ldrb	r3, [r3, #1]
    19c2:	220f      	movs	r2, #15
    19c4:	4013      	ands	r3, r2
    19c6:	b2da      	uxtb	r2, r3
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	705a      	strb	r2, [r3, #1]
    19cc:	4b0a      	ldr	r3, [pc, #40]	; (19f8 <rtc_get_time+0x78>)
    19ce:	785b      	ldrb	r3, [r3, #1]
    19d0:	091b      	lsrs	r3, r3, #4
    19d2:	b2da      	uxtb	r2, r3
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	709a      	strb	r2, [r3, #2]
    19d8:	4b07      	ldr	r3, [pc, #28]	; (19f8 <rtc_get_time+0x78>)
    19da:	789b      	ldrb	r3, [r3, #2]
    19dc:	220f      	movs	r2, #15
    19de:	4013      	ands	r3, r2
    19e0:	b2da      	uxtb	r2, r3
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	70da      	strb	r2, [r3, #3]
    19e6:	4b04      	ldr	r3, [pc, #16]	; (19f8 <rtc_get_time+0x78>)
    19e8:	789b      	ldrb	r3, [r3, #2]
    19ea:	091b      	lsrs	r3, r3, #4
    19ec:	b2da      	uxtb	r2, r3
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	711a      	strb	r2, [r3, #4]
    19f2:	46bd      	mov	sp, r7
    19f4:	b002      	add	sp, #8
    19f6:	bd80      	pop	{r7, pc}
    19f8:	20000588 	.word	0x20000588
    19fc:	00001725 	.word	0x00001725

00001a00 <rtc_set_time>:
    1a00:	b580      	push	{r7, lr}
    1a02:	b084      	sub	sp, #16
    1a04:	af00      	add	r7, sp, #0
    1a06:	6078      	str	r0, [r7, #4]
    1a08:	230f      	movs	r3, #15
    1a0a:	18fb      	adds	r3, r7, r3
    1a0c:	687a      	ldr	r2, [r7, #4]
    1a0e:	7812      	ldrb	r2, [r2, #0]
    1a10:	701a      	strb	r2, [r3, #0]
    1a12:	4b1e      	ldr	r3, [pc, #120]	; (1a8c <rtc_set_time+0x8c>)
    1a14:	2200      	movs	r2, #0
    1a16:	701a      	strb	r2, [r3, #0]
    1a18:	e00c      	b.n	1a34 <rtc_set_time+0x34>
    1a1a:	4b1c      	ldr	r3, [pc, #112]	; (1a8c <rtc_set_time+0x8c>)
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	3310      	adds	r3, #16
    1a20:	b2da      	uxtb	r2, r3
    1a22:	4b1a      	ldr	r3, [pc, #104]	; (1a8c <rtc_set_time+0x8c>)
    1a24:	701a      	strb	r2, [r3, #0]
    1a26:	230f      	movs	r3, #15
    1a28:	18fb      	adds	r3, r7, r3
    1a2a:	220f      	movs	r2, #15
    1a2c:	18ba      	adds	r2, r7, r2
    1a2e:	7812      	ldrb	r2, [r2, #0]
    1a30:	3a0a      	subs	r2, #10
    1a32:	701a      	strb	r2, [r3, #0]
    1a34:	230f      	movs	r3, #15
    1a36:	18fb      	adds	r3, r7, r3
    1a38:	781b      	ldrb	r3, [r3, #0]
    1a3a:	2b09      	cmp	r3, #9
    1a3c:	d8ed      	bhi.n	1a1a <rtc_set_time+0x1a>
    1a3e:	4b13      	ldr	r3, [pc, #76]	; (1a8c <rtc_set_time+0x8c>)
    1a40:	781a      	ldrb	r2, [r3, #0]
    1a42:	230f      	movs	r3, #15
    1a44:	18fb      	adds	r3, r7, r3
    1a46:	781b      	ldrb	r3, [r3, #0]
    1a48:	18d3      	adds	r3, r2, r3
    1a4a:	b2da      	uxtb	r2, r3
    1a4c:	4b0f      	ldr	r3, [pc, #60]	; (1a8c <rtc_set_time+0x8c>)
    1a4e:	701a      	strb	r2, [r3, #0]
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	789b      	ldrb	r3, [r3, #2]
    1a54:	011b      	lsls	r3, r3, #4
    1a56:	b2da      	uxtb	r2, r3
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	785b      	ldrb	r3, [r3, #1]
    1a5c:	18d3      	adds	r3, r2, r3
    1a5e:	b2da      	uxtb	r2, r3
    1a60:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <rtc_set_time+0x8c>)
    1a62:	705a      	strb	r2, [r3, #1]
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	791b      	ldrb	r3, [r3, #4]
    1a68:	011b      	lsls	r3, r3, #4
    1a6a:	b2da      	uxtb	r2, r3
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	78db      	ldrb	r3, [r3, #3]
    1a70:	18d3      	adds	r3, r2, r3
    1a72:	b2da      	uxtb	r2, r3
    1a74:	4b05      	ldr	r3, [pc, #20]	; (1a8c <rtc_set_time+0x8c>)
    1a76:	709a      	strb	r2, [r3, #2]
    1a78:	4b04      	ldr	r3, [pc, #16]	; (1a8c <rtc_set_time+0x8c>)
    1a7a:	2000      	movs	r0, #0
    1a7c:	1c19      	adds	r1, r3, #0
    1a7e:	2207      	movs	r2, #7
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <rtc_set_time+0x90>)
    1a82:	4798      	blx	r3
    1a84:	46bd      	mov	sp, r7
    1a86:	b004      	add	sp, #16
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	20000588 	.word	0x20000588
    1a90:	00001865 	.word	0x00001865

00001a94 <__libc_init_array>:
    1a94:	b570      	push	{r4, r5, r6, lr}
    1a96:	4e0d      	ldr	r6, [pc, #52]	; (1acc <__libc_init_array+0x38>)
    1a98:	4d0d      	ldr	r5, [pc, #52]	; (1ad0 <__libc_init_array+0x3c>)
    1a9a:	2400      	movs	r4, #0
    1a9c:	1bad      	subs	r5, r5, r6
    1a9e:	10ad      	asrs	r5, r5, #2
    1aa0:	d005      	beq.n	1aae <__libc_init_array+0x1a>
    1aa2:	00a3      	lsls	r3, r4, #2
    1aa4:	58f3      	ldr	r3, [r6, r3]
    1aa6:	3401      	adds	r4, #1
    1aa8:	4798      	blx	r3
    1aaa:	42a5      	cmp	r5, r4
    1aac:	d1f9      	bne.n	1aa2 <__libc_init_array+0xe>
    1aae:	f000 fdf7 	bl	26a0 <_init>
    1ab2:	4e08      	ldr	r6, [pc, #32]	; (1ad4 <__libc_init_array+0x40>)
    1ab4:	4d08      	ldr	r5, [pc, #32]	; (1ad8 <__libc_init_array+0x44>)
    1ab6:	2400      	movs	r4, #0
    1ab8:	1bad      	subs	r5, r5, r6
    1aba:	10ad      	asrs	r5, r5, #2
    1abc:	d005      	beq.n	1aca <__libc_init_array+0x36>
    1abe:	00a3      	lsls	r3, r4, #2
    1ac0:	58f3      	ldr	r3, [r6, r3]
    1ac2:	3401      	adds	r4, #1
    1ac4:	4798      	blx	r3
    1ac6:	42a5      	cmp	r5, r4
    1ac8:	d1f9      	bne.n	1abe <__libc_init_array+0x2a>
    1aca:	bd70      	pop	{r4, r5, r6, pc}
    1acc:	000026ac 	.word	0x000026ac
    1ad0:	000026ac 	.word	0x000026ac
    1ad4:	000026ac 	.word	0x000026ac
    1ad8:	000026b4 	.word	0x000026b4

00001adc <__itoa>:
    1adc:	1e93      	subs	r3, r2, #2
    1ade:	b510      	push	{r4, lr}
    1ae0:	2b22      	cmp	r3, #34	; 0x22
    1ae2:	d80f      	bhi.n	1b04 <__itoa+0x28>
    1ae4:	2a0a      	cmp	r2, #10
    1ae6:	d006      	beq.n	1af6 <__itoa+0x1a>
    1ae8:	2300      	movs	r3, #0
    1aea:	1c0c      	adds	r4, r1, #0
    1aec:	18c9      	adds	r1, r1, r3
    1aee:	f000 f9df 	bl	1eb0 <__utoa>
    1af2:	1c20      	adds	r0, r4, #0
    1af4:	bd10      	pop	{r4, pc}
    1af6:	2800      	cmp	r0, #0
    1af8:	daf6      	bge.n	1ae8 <__itoa+0xc>
    1afa:	232d      	movs	r3, #45	; 0x2d
    1afc:	4240      	negs	r0, r0
    1afe:	700b      	strb	r3, [r1, #0]
    1b00:	3b2c      	subs	r3, #44	; 0x2c
    1b02:	e7f2      	b.n	1aea <__itoa+0xe>
    1b04:	2300      	movs	r3, #0
    1b06:	2000      	movs	r0, #0
    1b08:	700b      	strb	r3, [r1, #0]
    1b0a:	e7f3      	b.n	1af4 <__itoa+0x18>

00001b0c <itoa>:
    1b0c:	b508      	push	{r3, lr}
    1b0e:	f7ff ffe5 	bl	1adc <__itoa>
    1b12:	bd08      	pop	{r3, pc}

00001b14 <memcpy>:
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	2a0f      	cmp	r2, #15
    1b18:	d932      	bls.n	1b80 <memcpy+0x6c>
    1b1a:	1c04      	adds	r4, r0, #0
    1b1c:	430c      	orrs	r4, r1
    1b1e:	1c0b      	adds	r3, r1, #0
    1b20:	07a4      	lsls	r4, r4, #30
    1b22:	d131      	bne.n	1b88 <memcpy+0x74>
    1b24:	1c15      	adds	r5, r2, #0
    1b26:	1c04      	adds	r4, r0, #0
    1b28:	3d10      	subs	r5, #16
    1b2a:	092d      	lsrs	r5, r5, #4
    1b2c:	3501      	adds	r5, #1
    1b2e:	012d      	lsls	r5, r5, #4
    1b30:	1949      	adds	r1, r1, r5
    1b32:	681e      	ldr	r6, [r3, #0]
    1b34:	6026      	str	r6, [r4, #0]
    1b36:	685e      	ldr	r6, [r3, #4]
    1b38:	6066      	str	r6, [r4, #4]
    1b3a:	689e      	ldr	r6, [r3, #8]
    1b3c:	60a6      	str	r6, [r4, #8]
    1b3e:	68de      	ldr	r6, [r3, #12]
    1b40:	3310      	adds	r3, #16
    1b42:	60e6      	str	r6, [r4, #12]
    1b44:	3410      	adds	r4, #16
    1b46:	4299      	cmp	r1, r3
    1b48:	d1f3      	bne.n	1b32 <memcpy+0x1e>
    1b4a:	230f      	movs	r3, #15
    1b4c:	1945      	adds	r5, r0, r5
    1b4e:	4013      	ands	r3, r2
    1b50:	2b03      	cmp	r3, #3
    1b52:	d91b      	bls.n	1b8c <memcpy+0x78>
    1b54:	1f1c      	subs	r4, r3, #4
    1b56:	2300      	movs	r3, #0
    1b58:	08a4      	lsrs	r4, r4, #2
    1b5a:	3401      	adds	r4, #1
    1b5c:	00a4      	lsls	r4, r4, #2
    1b5e:	58ce      	ldr	r6, [r1, r3]
    1b60:	50ee      	str	r6, [r5, r3]
    1b62:	3304      	adds	r3, #4
    1b64:	42a3      	cmp	r3, r4
    1b66:	d1fa      	bne.n	1b5e <memcpy+0x4a>
    1b68:	18ed      	adds	r5, r5, r3
    1b6a:	18c9      	adds	r1, r1, r3
    1b6c:	2303      	movs	r3, #3
    1b6e:	401a      	ands	r2, r3
    1b70:	d005      	beq.n	1b7e <memcpy+0x6a>
    1b72:	2300      	movs	r3, #0
    1b74:	5ccc      	ldrb	r4, [r1, r3]
    1b76:	54ec      	strb	r4, [r5, r3]
    1b78:	3301      	adds	r3, #1
    1b7a:	4293      	cmp	r3, r2
    1b7c:	d1fa      	bne.n	1b74 <memcpy+0x60>
    1b7e:	bd70      	pop	{r4, r5, r6, pc}
    1b80:	1c05      	adds	r5, r0, #0
    1b82:	2a00      	cmp	r2, #0
    1b84:	d1f5      	bne.n	1b72 <memcpy+0x5e>
    1b86:	e7fa      	b.n	1b7e <memcpy+0x6a>
    1b88:	1c05      	adds	r5, r0, #0
    1b8a:	e7f2      	b.n	1b72 <memcpy+0x5e>
    1b8c:	1c1a      	adds	r2, r3, #0
    1b8e:	e7f8      	b.n	1b82 <memcpy+0x6e>

00001b90 <_strtol_r>:
    1b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b92:	464d      	mov	r5, r9
    1b94:	4656      	mov	r6, sl
    1b96:	465f      	mov	r7, fp
    1b98:	4644      	mov	r4, r8
    1b9a:	b4f0      	push	{r4, r5, r6, r7}
    1b9c:	1c1e      	adds	r6, r3, #0
    1b9e:	4b55      	ldr	r3, [pc, #340]	; (1cf4 <_strtol_r+0x164>)
    1ba0:	b085      	sub	sp, #20
    1ba2:	9102      	str	r1, [sp, #8]
    1ba4:	681d      	ldr	r5, [r3, #0]
    1ba6:	9003      	str	r0, [sp, #12]
    1ba8:	1c0b      	adds	r3, r1, #0
    1baa:	4691      	mov	r9, r2
    1bac:	2108      	movs	r1, #8
    1bae:	e000      	b.n	1bb2 <_strtol_r+0x22>
    1bb0:	1c3b      	adds	r3, r7, #0
    1bb2:	781c      	ldrb	r4, [r3, #0]
    1bb4:	1c5f      	adds	r7, r3, #1
    1bb6:	192a      	adds	r2, r5, r4
    1bb8:	7852      	ldrb	r2, [r2, #1]
    1bba:	4211      	tst	r1, r2
    1bbc:	d1f8      	bne.n	1bb0 <_strtol_r+0x20>
    1bbe:	2c2d      	cmp	r4, #45	; 0x2d
    1bc0:	d069      	beq.n	1c96 <_strtol_r+0x106>
    1bc2:	2200      	movs	r2, #0
    1bc4:	4690      	mov	r8, r2
    1bc6:	2c2b      	cmp	r4, #43	; 0x2b
    1bc8:	d100      	bne.n	1bcc <_strtol_r+0x3c>
    1bca:	e073      	b.n	1cb4 <_strtol_r+0x124>
    1bcc:	2e00      	cmp	r6, #0
    1bce:	d004      	beq.n	1bda <_strtol_r+0x4a>
    1bd0:	2e10      	cmp	r6, #16
    1bd2:	d100      	bne.n	1bd6 <_strtol_r+0x46>
    1bd4:	e071      	b.n	1cba <_strtol_r+0x12a>
    1bd6:	1c32      	adds	r2, r6, #0
    1bd8:	e005      	b.n	1be6 <_strtol_r+0x56>
    1bda:	2c30      	cmp	r4, #48	; 0x30
    1bdc:	d100      	bne.n	1be0 <_strtol_r+0x50>
    1bde:	e07d      	b.n	1cdc <_strtol_r+0x14c>
    1be0:	230a      	movs	r3, #10
    1be2:	260a      	movs	r6, #10
    1be4:	1c1a      	adds	r2, r3, #0
    1be6:	4b44      	ldr	r3, [pc, #272]	; (1cf8 <_strtol_r+0x168>)
    1be8:	1c11      	adds	r1, r2, #0
    1bea:	4443      	add	r3, r8
    1bec:	1c18      	adds	r0, r3, #0
    1bee:	4692      	mov	sl, r2
    1bf0:	469b      	mov	fp, r3
    1bf2:	f000 fac1 	bl	2178 <__aeabi_uidivmod>
    1bf6:	4658      	mov	r0, fp
    1bf8:	9101      	str	r1, [sp, #4]
    1bfa:	4651      	mov	r1, sl
    1bfc:	f000 fa36 	bl	206c <__aeabi_uidiv>
    1c00:	2204      	movs	r2, #4
    1c02:	4684      	mov	ip, r0
    1c04:	46d3      	mov	fp, sl
    1c06:	4692      	mov	sl, r2
    1c08:	1c32      	adds	r2, r6, #0
    1c0a:	1c3b      	adds	r3, r7, #0
    1c0c:	1c2e      	adds	r6, r5, #0
    1c0e:	2000      	movs	r0, #0
    1c10:	4665      	mov	r5, ip
    1c12:	2100      	movs	r1, #0
    1c14:	4694      	mov	ip, r2
    1c16:	e00d      	b.n	1c34 <_strtol_r+0xa4>
    1c18:	3c30      	subs	r4, #48	; 0x30
    1c1a:	45a4      	cmp	ip, r4
    1c1c:	dd18      	ble.n	1c50 <_strtol_r+0xc0>
    1c1e:	1c42      	adds	r2, r0, #1
    1c20:	d006      	beq.n	1c30 <_strtol_r+0xa0>
    1c22:	42a9      	cmp	r1, r5
    1c24:	d82e      	bhi.n	1c84 <_strtol_r+0xf4>
    1c26:	d02a      	beq.n	1c7e <_strtol_r+0xee>
    1c28:	465a      	mov	r2, fp
    1c2a:	2001      	movs	r0, #1
    1c2c:	4351      	muls	r1, r2
    1c2e:	1861      	adds	r1, r4, r1
    1c30:	781c      	ldrb	r4, [r3, #0]
    1c32:	3301      	adds	r3, #1
    1c34:	4657      	mov	r7, sl
    1c36:	1932      	adds	r2, r6, r4
    1c38:	7852      	ldrb	r2, [r2, #1]
    1c3a:	4217      	tst	r7, r2
    1c3c:	d1ec      	bne.n	1c18 <_strtol_r+0x88>
    1c3e:	2703      	movs	r7, #3
    1c40:	403a      	ands	r2, r7
    1c42:	d005      	beq.n	1c50 <_strtol_r+0xc0>
    1c44:	2a01      	cmp	r2, #1
    1c46:	d020      	beq.n	1c8a <_strtol_r+0xfa>
    1c48:	2257      	movs	r2, #87	; 0x57
    1c4a:	1aa4      	subs	r4, r4, r2
    1c4c:	45a4      	cmp	ip, r4
    1c4e:	dce6      	bgt.n	1c1e <_strtol_r+0x8e>
    1c50:	1c42      	adds	r2, r0, #1
    1c52:	d025      	beq.n	1ca0 <_strtol_r+0x110>
    1c54:	4642      	mov	r2, r8
    1c56:	4252      	negs	r2, r2
    1c58:	4051      	eors	r1, r2
    1c5a:	1c0a      	adds	r2, r1, #0
    1c5c:	4649      	mov	r1, r9
    1c5e:	4442      	add	r2, r8
    1c60:	2900      	cmp	r1, #0
    1c62:	d044      	beq.n	1cee <_strtol_r+0x15e>
    1c64:	2800      	cmp	r0, #0
    1c66:	d113      	bne.n	1c90 <_strtol_r+0x100>
    1c68:	1c10      	adds	r0, r2, #0
    1c6a:	9b02      	ldr	r3, [sp, #8]
    1c6c:	464a      	mov	r2, r9
    1c6e:	6013      	str	r3, [r2, #0]
    1c70:	b005      	add	sp, #20
    1c72:	bc3c      	pop	{r2, r3, r4, r5}
    1c74:	4690      	mov	r8, r2
    1c76:	4699      	mov	r9, r3
    1c78:	46a2      	mov	sl, r4
    1c7a:	46ab      	mov	fp, r5
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c7e:	9a01      	ldr	r2, [sp, #4]
    1c80:	4294      	cmp	r4, r2
    1c82:	ddd1      	ble.n	1c28 <_strtol_r+0x98>
    1c84:	2001      	movs	r0, #1
    1c86:	4240      	negs	r0, r0
    1c88:	e7d2      	b.n	1c30 <_strtol_r+0xa0>
    1c8a:	2237      	movs	r2, #55	; 0x37
    1c8c:	1aa4      	subs	r4, r4, r2
    1c8e:	e7dd      	b.n	1c4c <_strtol_r+0xbc>
    1c90:	1c10      	adds	r0, r2, #0
    1c92:	3b01      	subs	r3, #1
    1c94:	e7ea      	b.n	1c6c <_strtol_r+0xdc>
    1c96:	1c9f      	adds	r7, r3, #2
    1c98:	785c      	ldrb	r4, [r3, #1]
    1c9a:	2301      	movs	r3, #1
    1c9c:	4698      	mov	r8, r3
    1c9e:	e795      	b.n	1bcc <_strtol_r+0x3c>
    1ca0:	2222      	movs	r2, #34	; 0x22
    1ca2:	9903      	ldr	r1, [sp, #12]
    1ca4:	4814      	ldr	r0, [pc, #80]	; (1cf8 <_strtol_r+0x168>)
    1ca6:	600a      	str	r2, [r1, #0]
    1ca8:	464a      	mov	r2, r9
    1caa:	4440      	add	r0, r8
    1cac:	2a00      	cmp	r2, #0
    1cae:	d0df      	beq.n	1c70 <_strtol_r+0xe0>
    1cb0:	3b01      	subs	r3, #1
    1cb2:	e7db      	b.n	1c6c <_strtol_r+0xdc>
    1cb4:	1c9f      	adds	r7, r3, #2
    1cb6:	785c      	ldrb	r4, [r3, #1]
    1cb8:	e788      	b.n	1bcc <_strtol_r+0x3c>
    1cba:	2310      	movs	r3, #16
    1cbc:	1c1a      	adds	r2, r3, #0
    1cbe:	2c30      	cmp	r4, #48	; 0x30
    1cc0:	d000      	beq.n	1cc4 <_strtol_r+0x134>
    1cc2:	e790      	b.n	1be6 <_strtol_r+0x56>
    1cc4:	783b      	ldrb	r3, [r7, #0]
    1cc6:	3210      	adds	r2, #16
    1cc8:	4393      	bics	r3, r2
    1cca:	2b58      	cmp	r3, #88	; 0x58
    1ccc:	d000      	beq.n	1cd0 <_strtol_r+0x140>
    1cce:	e782      	b.n	1bd6 <_strtol_r+0x46>
    1cd0:	2310      	movs	r3, #16
    1cd2:	787c      	ldrb	r4, [r7, #1]
    1cd4:	1c1a      	adds	r2, r3, #0
    1cd6:	3702      	adds	r7, #2
    1cd8:	2610      	movs	r6, #16
    1cda:	e784      	b.n	1be6 <_strtol_r+0x56>
    1cdc:	2220      	movs	r2, #32
    1cde:	783b      	ldrb	r3, [r7, #0]
    1ce0:	4393      	bics	r3, r2
    1ce2:	2b58      	cmp	r3, #88	; 0x58
    1ce4:	d0f4      	beq.n	1cd0 <_strtol_r+0x140>
    1ce6:	2308      	movs	r3, #8
    1ce8:	2608      	movs	r6, #8
    1cea:	1c1a      	adds	r2, r3, #0
    1cec:	e77b      	b.n	1be6 <_strtol_r+0x56>
    1cee:	1c10      	adds	r0, r2, #0
    1cf0:	e7be      	b.n	1c70 <_strtol_r+0xe0>
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	2000042c 	.word	0x2000042c
    1cf8:	7fffffff 	.word	0x7fffffff

00001cfc <strtol>:
    1cfc:	b538      	push	{r3, r4, r5, lr}
    1cfe:	1c05      	adds	r5, r0, #0
    1d00:	1c0c      	adds	r4, r1, #0
    1d02:	1c13      	adds	r3, r2, #0
    1d04:	4a03      	ldr	r2, [pc, #12]	; (1d14 <strtol+0x18>)
    1d06:	1c29      	adds	r1, r5, #0
    1d08:	6810      	ldr	r0, [r2, #0]
    1d0a:	1c22      	adds	r2, r4, #0
    1d0c:	f7ff ff40 	bl	1b90 <_strtol_r>
    1d10:	bd38      	pop	{r3, r4, r5, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	20000428 	.word	0x20000428

00001d18 <_strtoul_r>:
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	464d      	mov	r5, r9
    1d1c:	4656      	mov	r6, sl
    1d1e:	4644      	mov	r4, r8
    1d20:	465f      	mov	r7, fp
    1d22:	b4f0      	push	{r4, r5, r6, r7}
    1d24:	1c1e      	adds	r6, r3, #0
    1d26:	4b57      	ldr	r3, [pc, #348]	; (1e84 <_strtoul_r+0x16c>)
    1d28:	b085      	sub	sp, #20
    1d2a:	4688      	mov	r8, r1
    1d2c:	681d      	ldr	r5, [r3, #0]
    1d2e:	9003      	str	r0, [sp, #12]
    1d30:	1c0b      	adds	r3, r1, #0
    1d32:	4691      	mov	r9, r2
    1d34:	2108      	movs	r1, #8
    1d36:	e000      	b.n	1d3a <_strtoul_r+0x22>
    1d38:	1c03      	adds	r3, r0, #0
    1d3a:	781c      	ldrb	r4, [r3, #0]
    1d3c:	1c58      	adds	r0, r3, #1
    1d3e:	192a      	adds	r2, r5, r4
    1d40:	7852      	ldrb	r2, [r2, #1]
    1d42:	4211      	tst	r1, r2
    1d44:	d1f8      	bne.n	1d38 <_strtoul_r+0x20>
    1d46:	4682      	mov	sl, r0
    1d48:	2c2d      	cmp	r4, #45	; 0x2d
    1d4a:	d06a      	beq.n	1e22 <_strtoul_r+0x10a>
    1d4c:	2200      	movs	r2, #0
    1d4e:	9202      	str	r2, [sp, #8]
    1d50:	2c2b      	cmp	r4, #43	; 0x2b
    1d52:	d06c      	beq.n	1e2e <_strtoul_r+0x116>
    1d54:	2e00      	cmp	r6, #0
    1d56:	d00f      	beq.n	1d78 <_strtoul_r+0x60>
    1d58:	2e10      	cmp	r6, #16
    1d5a:	d06c      	beq.n	1e36 <_strtoul_r+0x11e>
    1d5c:	2001      	movs	r0, #1
    1d5e:	1c31      	adds	r1, r6, #0
    1d60:	4240      	negs	r0, r0
    1d62:	9601      	str	r6, [sp, #4]
    1d64:	f000 f982 	bl	206c <__aeabi_uidiv>
    1d68:	1c07      	adds	r7, r0, #0
    1d6a:	2001      	movs	r0, #1
    1d6c:	1c31      	adds	r1, r6, #0
    1d6e:	4240      	negs	r0, r0
    1d70:	f000 fa02 	bl	2178 <__aeabi_uidivmod>
    1d74:	468c      	mov	ip, r1
    1d76:	e007      	b.n	1d88 <_strtoul_r+0x70>
    1d78:	2c30      	cmp	r4, #48	; 0x30
    1d7a:	d064      	beq.n	1e46 <_strtoul_r+0x12e>
    1d7c:	2305      	movs	r3, #5
    1d7e:	260a      	movs	r6, #10
    1d80:	469c      	mov	ip, r3
    1d82:	4f41      	ldr	r7, [pc, #260]	; (1e88 <_strtoul_r+0x170>)
    1d84:	3305      	adds	r3, #5
    1d86:	9301      	str	r3, [sp, #4]
    1d88:	2204      	movs	r2, #4
    1d8a:	4653      	mov	r3, sl
    1d8c:	4692      	mov	sl, r2
    1d8e:	3a01      	subs	r2, #1
    1d90:	2000      	movs	r0, #0
    1d92:	2100      	movs	r1, #0
    1d94:	4693      	mov	fp, r2
    1d96:	9600      	str	r6, [sp, #0]
    1d98:	e00e      	b.n	1db8 <_strtoul_r+0xa0>
    1d9a:	9a00      	ldr	r2, [sp, #0]
    1d9c:	3c30      	subs	r4, #48	; 0x30
    1d9e:	42a2      	cmp	r2, r4
    1da0:	dd19      	ble.n	1dd6 <_strtoul_r+0xbe>
    1da2:	1c42      	adds	r2, r0, #1
    1da4:	d006      	beq.n	1db4 <_strtoul_r+0x9c>
    1da6:	42b9      	cmp	r1, r7
    1da8:	d82f      	bhi.n	1e0a <_strtoul_r+0xf2>
    1daa:	d02c      	beq.n	1e06 <_strtoul_r+0xee>
    1dac:	2001      	movs	r0, #1
    1dae:	9a01      	ldr	r2, [sp, #4]
    1db0:	4351      	muls	r1, r2
    1db2:	1861      	adds	r1, r4, r1
    1db4:	781c      	ldrb	r4, [r3, #0]
    1db6:	3301      	adds	r3, #1
    1db8:	4656      	mov	r6, sl
    1dba:	192a      	adds	r2, r5, r4
    1dbc:	7852      	ldrb	r2, [r2, #1]
    1dbe:	4216      	tst	r6, r2
    1dc0:	d1eb      	bne.n	1d9a <_strtoul_r+0x82>
    1dc2:	465e      	mov	r6, fp
    1dc4:	4032      	ands	r2, r6
    1dc6:	d006      	beq.n	1dd6 <_strtoul_r+0xbe>
    1dc8:	2a01      	cmp	r2, #1
    1dca:	d021      	beq.n	1e10 <_strtoul_r+0xf8>
    1dcc:	2257      	movs	r2, #87	; 0x57
    1dce:	1aa4      	subs	r4, r4, r2
    1dd0:	9a00      	ldr	r2, [sp, #0]
    1dd2:	42a2      	cmp	r2, r4
    1dd4:	dce5      	bgt.n	1da2 <_strtoul_r+0x8a>
    1dd6:	2800      	cmp	r0, #0
    1dd8:	db1d      	blt.n	1e16 <_strtoul_r+0xfe>
    1dda:	9c02      	ldr	r4, [sp, #8]
    1ddc:	46a4      	mov	ip, r4
    1dde:	4262      	negs	r2, r4
    1de0:	4051      	eors	r1, r2
    1de2:	4461      	add	r1, ip
    1de4:	464a      	mov	r2, r9
    1de6:	2a00      	cmp	r2, #0
    1de8:	d005      	beq.n	1df6 <_strtoul_r+0xde>
    1dea:	4642      	mov	r2, r8
    1dec:	2800      	cmp	r0, #0
    1dee:	d000      	beq.n	1df2 <_strtoul_r+0xda>
    1df0:	1e5a      	subs	r2, r3, #1
    1df2:	464b      	mov	r3, r9
    1df4:	601a      	str	r2, [r3, #0]
    1df6:	1c08      	adds	r0, r1, #0
    1df8:	b005      	add	sp, #20
    1dfa:	bc3c      	pop	{r2, r3, r4, r5}
    1dfc:	4690      	mov	r8, r2
    1dfe:	4699      	mov	r9, r3
    1e00:	46a2      	mov	sl, r4
    1e02:	46ab      	mov	fp, r5
    1e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e06:	4564      	cmp	r4, ip
    1e08:	ddd0      	ble.n	1dac <_strtoul_r+0x94>
    1e0a:	2001      	movs	r0, #1
    1e0c:	4240      	negs	r0, r0
    1e0e:	e7d1      	b.n	1db4 <_strtoul_r+0x9c>
    1e10:	2237      	movs	r2, #55	; 0x37
    1e12:	1aa4      	subs	r4, r4, r2
    1e14:	e7dc      	b.n	1dd0 <_strtoul_r+0xb8>
    1e16:	2222      	movs	r2, #34	; 0x22
    1e18:	9903      	ldr	r1, [sp, #12]
    1e1a:	600a      	str	r2, [r1, #0]
    1e1c:	2101      	movs	r1, #1
    1e1e:	4249      	negs	r1, r1
    1e20:	e7e0      	b.n	1de4 <_strtoul_r+0xcc>
    1e22:	1c9a      	adds	r2, r3, #2
    1e24:	785c      	ldrb	r4, [r3, #1]
    1e26:	2301      	movs	r3, #1
    1e28:	4692      	mov	sl, r2
    1e2a:	9302      	str	r3, [sp, #8]
    1e2c:	e792      	b.n	1d54 <_strtoul_r+0x3c>
    1e2e:	1c9a      	adds	r2, r3, #2
    1e30:	4692      	mov	sl, r2
    1e32:	785c      	ldrb	r4, [r3, #1]
    1e34:	e78e      	b.n	1d54 <_strtoul_r+0x3c>
    1e36:	2c30      	cmp	r4, #48	; 0x30
    1e38:	d012      	beq.n	1e60 <_strtoul_r+0x148>
    1e3a:	230f      	movs	r3, #15
    1e3c:	469c      	mov	ip, r3
    1e3e:	3301      	adds	r3, #1
    1e40:	4f12      	ldr	r7, [pc, #72]	; (1e8c <_strtoul_r+0x174>)
    1e42:	9301      	str	r3, [sp, #4]
    1e44:	e7a0      	b.n	1d88 <_strtoul_r+0x70>
    1e46:	4653      	mov	r3, sl
    1e48:	2220      	movs	r2, #32
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	4393      	bics	r3, r2
    1e4e:	2b58      	cmp	r3, #88	; 0x58
    1e50:	d00c      	beq.n	1e6c <_strtoul_r+0x154>
    1e52:	2307      	movs	r3, #7
    1e54:	469c      	mov	ip, r3
    1e56:	3301      	adds	r3, #1
    1e58:	4f0d      	ldr	r7, [pc, #52]	; (1e90 <_strtoul_r+0x178>)
    1e5a:	9301      	str	r3, [sp, #4]
    1e5c:	2608      	movs	r6, #8
    1e5e:	e793      	b.n	1d88 <_strtoul_r+0x70>
    1e60:	4653      	mov	r3, sl
    1e62:	2220      	movs	r2, #32
    1e64:	781b      	ldrb	r3, [r3, #0]
    1e66:	4393      	bics	r3, r2
    1e68:	2b58      	cmp	r3, #88	; 0x58
    1e6a:	d1e6      	bne.n	1e3a <_strtoul_r+0x122>
    1e6c:	4653      	mov	r3, sl
    1e6e:	785c      	ldrb	r4, [r3, #1]
    1e70:	2302      	movs	r3, #2
    1e72:	469c      	mov	ip, r3
    1e74:	330d      	adds	r3, #13
    1e76:	44e2      	add	sl, ip
    1e78:	469c      	mov	ip, r3
    1e7a:	3301      	adds	r3, #1
    1e7c:	4f03      	ldr	r7, [pc, #12]	; (1e8c <_strtoul_r+0x174>)
    1e7e:	9301      	str	r3, [sp, #4]
    1e80:	2610      	movs	r6, #16
    1e82:	e781      	b.n	1d88 <_strtoul_r+0x70>
    1e84:	2000042c 	.word	0x2000042c
    1e88:	19999999 	.word	0x19999999
    1e8c:	0fffffff 	.word	0x0fffffff
    1e90:	1fffffff 	.word	0x1fffffff

00001e94 <strtoul>:
    1e94:	b538      	push	{r3, r4, r5, lr}
    1e96:	1c05      	adds	r5, r0, #0
    1e98:	1c0c      	adds	r4, r1, #0
    1e9a:	1c13      	adds	r3, r2, #0
    1e9c:	4a03      	ldr	r2, [pc, #12]	; (1eac <strtoul+0x18>)
    1e9e:	1c29      	adds	r1, r5, #0
    1ea0:	6810      	ldr	r0, [r2, #0]
    1ea2:	1c22      	adds	r2, r4, #0
    1ea4:	f7ff ff38 	bl	1d18 <_strtoul_r>
    1ea8:	bd38      	pop	{r3, r4, r5, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	20000428 	.word	0x20000428

00001eb0 <__utoa>:
    1eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb2:	4657      	mov	r7, sl
    1eb4:	4645      	mov	r5, r8
    1eb6:	464e      	mov	r6, r9
    1eb8:	b4e0      	push	{r5, r6, r7}
    1eba:	b08a      	sub	sp, #40	; 0x28
    1ebc:	4690      	mov	r8, r2
    1ebe:	466a      	mov	r2, sp
    1ec0:	4b1d      	ldr	r3, [pc, #116]	; (1f38 <__utoa+0x88>)
    1ec2:	1c0d      	adds	r5, r1, #0
    1ec4:	1c06      	adds	r6, r0, #0
    1ec6:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ec8:	c213      	stmia	r2!, {r0, r1, r4}
    1eca:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ecc:	c213      	stmia	r2!, {r0, r1, r4}
    1ece:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ed0:	c213      	stmia	r2!, {r0, r1, r4}
    1ed2:	781b      	ldrb	r3, [r3, #0]
    1ed4:	46ea      	mov	sl, sp
    1ed6:	7013      	strb	r3, [r2, #0]
    1ed8:	4643      	mov	r3, r8
    1eda:	3b02      	subs	r3, #2
    1edc:	1c2f      	adds	r7, r5, #0
    1ede:	2400      	movs	r4, #0
    1ee0:	2b22      	cmp	r3, #34	; 0x22
    1ee2:	d901      	bls.n	1ee8 <__utoa+0x38>
    1ee4:	e024      	b.n	1f30 <__utoa+0x80>
    1ee6:	464c      	mov	r4, r9
    1ee8:	1c63      	adds	r3, r4, #1
    1eea:	1c30      	adds	r0, r6, #0
    1eec:	4641      	mov	r1, r8
    1eee:	4699      	mov	r9, r3
    1ef0:	f000 f942 	bl	2178 <__aeabi_uidivmod>
    1ef4:	4653      	mov	r3, sl
    1ef6:	5c5b      	ldrb	r3, [r3, r1]
    1ef8:	1c30      	adds	r0, r6, #0
    1efa:	703b      	strb	r3, [r7, #0]
    1efc:	4641      	mov	r1, r8
    1efe:	f000 f8b5 	bl	206c <__aeabi_uidiv>
    1f02:	3701      	adds	r7, #1
    1f04:	1e06      	subs	r6, r0, #0
    1f06:	d1ee      	bne.n	1ee6 <__utoa+0x36>
    1f08:	464b      	mov	r3, r9
    1f0a:	54e8      	strb	r0, [r5, r3]
    1f0c:	2300      	movs	r3, #0
    1f0e:	2c00      	cmp	r4, #0
    1f10:	d007      	beq.n	1f22 <__utoa+0x72>
    1f12:	5cea      	ldrb	r2, [r5, r3]
    1f14:	5d29      	ldrb	r1, [r5, r4]
    1f16:	54e9      	strb	r1, [r5, r3]
    1f18:	552a      	strb	r2, [r5, r4]
    1f1a:	3301      	adds	r3, #1
    1f1c:	3c01      	subs	r4, #1
    1f1e:	42a3      	cmp	r3, r4
    1f20:	dbf7      	blt.n	1f12 <__utoa+0x62>
    1f22:	1c28      	adds	r0, r5, #0
    1f24:	b00a      	add	sp, #40	; 0x28
    1f26:	bc1c      	pop	{r2, r3, r4}
    1f28:	4690      	mov	r8, r2
    1f2a:	4699      	mov	r9, r3
    1f2c:	46a2      	mov	sl, r4
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f30:	702c      	strb	r4, [r5, #0]
    1f32:	2000      	movs	r0, #0
    1f34:	e7f6      	b.n	1f24 <__utoa+0x74>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	00002574 	.word	0x00002574

00001f3c <register_fini>:
    1f3c:	b508      	push	{r3, lr}
    1f3e:	4b03      	ldr	r3, [pc, #12]	; (1f4c <register_fini+0x10>)
    1f40:	2b00      	cmp	r3, #0
    1f42:	d002      	beq.n	1f4a <register_fini+0xe>
    1f44:	4802      	ldr	r0, [pc, #8]	; (1f50 <register_fini+0x14>)
    1f46:	f000 f805 	bl	1f54 <atexit>
    1f4a:	bd08      	pop	{r3, pc}
    1f4c:	00000000 	.word	0x00000000
    1f50:	00001f65 	.word	0x00001f65

00001f54 <atexit>:
    1f54:	b508      	push	{r3, lr}
    1f56:	1c01      	adds	r1, r0, #0
    1f58:	2200      	movs	r2, #0
    1f5a:	2000      	movs	r0, #0
    1f5c:	2300      	movs	r3, #0
    1f5e:	f000 f81b 	bl	1f98 <__register_exitproc>
    1f62:	bd08      	pop	{r3, pc}

00001f64 <__libc_fini_array>:
    1f64:	b538      	push	{r3, r4, r5, lr}
    1f66:	4b09      	ldr	r3, [pc, #36]	; (1f8c <__libc_fini_array+0x28>)
    1f68:	4c09      	ldr	r4, [pc, #36]	; (1f90 <__libc_fini_array+0x2c>)
    1f6a:	1ae4      	subs	r4, r4, r3
    1f6c:	10a4      	asrs	r4, r4, #2
    1f6e:	d009      	beq.n	1f84 <__libc_fini_array+0x20>
    1f70:	4a08      	ldr	r2, [pc, #32]	; (1f94 <__libc_fini_array+0x30>)
    1f72:	18a5      	adds	r5, r4, r2
    1f74:	00ad      	lsls	r5, r5, #2
    1f76:	18ed      	adds	r5, r5, r3
    1f78:	682b      	ldr	r3, [r5, #0]
    1f7a:	3c01      	subs	r4, #1
    1f7c:	4798      	blx	r3
    1f7e:	3d04      	subs	r5, #4
    1f80:	2c00      	cmp	r4, #0
    1f82:	d1f9      	bne.n	1f78 <__libc_fini_array+0x14>
    1f84:	f000 fb96 	bl	26b4 <_fini>
    1f88:	bd38      	pop	{r3, r4, r5, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	000026c0 	.word	0x000026c0
    1f90:	000026c4 	.word	0x000026c4
    1f94:	3fffffff 	.word	0x3fffffff

00001f98 <__register_exitproc>:
    1f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f9a:	4644      	mov	r4, r8
    1f9c:	465f      	mov	r7, fp
    1f9e:	4656      	mov	r6, sl
    1fa0:	464d      	mov	r5, r9
    1fa2:	469b      	mov	fp, r3
    1fa4:	4b2f      	ldr	r3, [pc, #188]	; (2064 <__register_exitproc+0xcc>)
    1fa6:	b4f0      	push	{r4, r5, r6, r7}
    1fa8:	681c      	ldr	r4, [r3, #0]
    1faa:	23a4      	movs	r3, #164	; 0xa4
    1fac:	005b      	lsls	r3, r3, #1
    1fae:	1c05      	adds	r5, r0, #0
    1fb0:	58e0      	ldr	r0, [r4, r3]
    1fb2:	1c0e      	adds	r6, r1, #0
    1fb4:	4690      	mov	r8, r2
    1fb6:	2800      	cmp	r0, #0
    1fb8:	d04b      	beq.n	2052 <__register_exitproc+0xba>
    1fba:	6843      	ldr	r3, [r0, #4]
    1fbc:	2b1f      	cmp	r3, #31
    1fbe:	dc0d      	bgt.n	1fdc <__register_exitproc+0x44>
    1fc0:	1c5c      	adds	r4, r3, #1
    1fc2:	2d00      	cmp	r5, #0
    1fc4:	d121      	bne.n	200a <__register_exitproc+0x72>
    1fc6:	3302      	adds	r3, #2
    1fc8:	009b      	lsls	r3, r3, #2
    1fca:	6044      	str	r4, [r0, #4]
    1fcc:	501e      	str	r6, [r3, r0]
    1fce:	2000      	movs	r0, #0
    1fd0:	bc3c      	pop	{r2, r3, r4, r5}
    1fd2:	4690      	mov	r8, r2
    1fd4:	4699      	mov	r9, r3
    1fd6:	46a2      	mov	sl, r4
    1fd8:	46ab      	mov	fp, r5
    1fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fdc:	4b22      	ldr	r3, [pc, #136]	; (2068 <__register_exitproc+0xd0>)
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d03c      	beq.n	205c <__register_exitproc+0xc4>
    1fe2:	20c8      	movs	r0, #200	; 0xc8
    1fe4:	0040      	lsls	r0, r0, #1
    1fe6:	e000      	b.n	1fea <__register_exitproc+0x52>
    1fe8:	bf00      	nop
    1fea:	2800      	cmp	r0, #0
    1fec:	d036      	beq.n	205c <__register_exitproc+0xc4>
    1fee:	22a4      	movs	r2, #164	; 0xa4
    1ff0:	2300      	movs	r3, #0
    1ff2:	0052      	lsls	r2, r2, #1
    1ff4:	58a1      	ldr	r1, [r4, r2]
    1ff6:	6043      	str	r3, [r0, #4]
    1ff8:	6001      	str	r1, [r0, #0]
    1ffa:	50a0      	str	r0, [r4, r2]
    1ffc:	3240      	adds	r2, #64	; 0x40
    1ffe:	5083      	str	r3, [r0, r2]
    2000:	3204      	adds	r2, #4
    2002:	5083      	str	r3, [r0, r2]
    2004:	2401      	movs	r4, #1
    2006:	2d00      	cmp	r5, #0
    2008:	d0dd      	beq.n	1fc6 <__register_exitproc+0x2e>
    200a:	009a      	lsls	r2, r3, #2
    200c:	4691      	mov	r9, r2
    200e:	4481      	add	r9, r0
    2010:	4642      	mov	r2, r8
    2012:	2188      	movs	r1, #136	; 0x88
    2014:	464f      	mov	r7, r9
    2016:	507a      	str	r2, [r7, r1]
    2018:	22c4      	movs	r2, #196	; 0xc4
    201a:	0052      	lsls	r2, r2, #1
    201c:	4690      	mov	r8, r2
    201e:	4480      	add	r8, r0
    2020:	4642      	mov	r2, r8
    2022:	3987      	subs	r1, #135	; 0x87
    2024:	4099      	lsls	r1, r3
    2026:	6812      	ldr	r2, [r2, #0]
    2028:	468a      	mov	sl, r1
    202a:	430a      	orrs	r2, r1
    202c:	4694      	mov	ip, r2
    202e:	4642      	mov	r2, r8
    2030:	4661      	mov	r1, ip
    2032:	6011      	str	r1, [r2, #0]
    2034:	2284      	movs	r2, #132	; 0x84
    2036:	4649      	mov	r1, r9
    2038:	465f      	mov	r7, fp
    203a:	0052      	lsls	r2, r2, #1
    203c:	508f      	str	r7, [r1, r2]
    203e:	2d02      	cmp	r5, #2
    2040:	d1c1      	bne.n	1fc6 <__register_exitproc+0x2e>
    2042:	1c02      	adds	r2, r0, #0
    2044:	4655      	mov	r5, sl
    2046:	328d      	adds	r2, #141	; 0x8d
    2048:	32ff      	adds	r2, #255	; 0xff
    204a:	6811      	ldr	r1, [r2, #0]
    204c:	430d      	orrs	r5, r1
    204e:	6015      	str	r5, [r2, #0]
    2050:	e7b9      	b.n	1fc6 <__register_exitproc+0x2e>
    2052:	1c20      	adds	r0, r4, #0
    2054:	304d      	adds	r0, #77	; 0x4d
    2056:	30ff      	adds	r0, #255	; 0xff
    2058:	50e0      	str	r0, [r4, r3]
    205a:	e7ae      	b.n	1fba <__register_exitproc+0x22>
    205c:	2001      	movs	r0, #1
    205e:	4240      	negs	r0, r0
    2060:	e7b6      	b.n	1fd0 <__register_exitproc+0x38>
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00002570 	.word	0x00002570
    2068:	00000000 	.word	0x00000000

0000206c <__aeabi_uidiv>:
    206c:	2200      	movs	r2, #0
    206e:	0843      	lsrs	r3, r0, #1
    2070:	428b      	cmp	r3, r1
    2072:	d374      	bcc.n	215e <__aeabi_uidiv+0xf2>
    2074:	0903      	lsrs	r3, r0, #4
    2076:	428b      	cmp	r3, r1
    2078:	d35f      	bcc.n	213a <__aeabi_uidiv+0xce>
    207a:	0a03      	lsrs	r3, r0, #8
    207c:	428b      	cmp	r3, r1
    207e:	d344      	bcc.n	210a <__aeabi_uidiv+0x9e>
    2080:	0b03      	lsrs	r3, r0, #12
    2082:	428b      	cmp	r3, r1
    2084:	d328      	bcc.n	20d8 <__aeabi_uidiv+0x6c>
    2086:	0c03      	lsrs	r3, r0, #16
    2088:	428b      	cmp	r3, r1
    208a:	d30d      	bcc.n	20a8 <__aeabi_uidiv+0x3c>
    208c:	22ff      	movs	r2, #255	; 0xff
    208e:	0209      	lsls	r1, r1, #8
    2090:	ba12      	rev	r2, r2
    2092:	0c03      	lsrs	r3, r0, #16
    2094:	428b      	cmp	r3, r1
    2096:	d302      	bcc.n	209e <__aeabi_uidiv+0x32>
    2098:	1212      	asrs	r2, r2, #8
    209a:	0209      	lsls	r1, r1, #8
    209c:	d065      	beq.n	216a <__aeabi_uidiv+0xfe>
    209e:	0b03      	lsrs	r3, r0, #12
    20a0:	428b      	cmp	r3, r1
    20a2:	d319      	bcc.n	20d8 <__aeabi_uidiv+0x6c>
    20a4:	e000      	b.n	20a8 <__aeabi_uidiv+0x3c>
    20a6:	0a09      	lsrs	r1, r1, #8
    20a8:	0bc3      	lsrs	r3, r0, #15
    20aa:	428b      	cmp	r3, r1
    20ac:	d301      	bcc.n	20b2 <__aeabi_uidiv+0x46>
    20ae:	03cb      	lsls	r3, r1, #15
    20b0:	1ac0      	subs	r0, r0, r3
    20b2:	4152      	adcs	r2, r2
    20b4:	0b83      	lsrs	r3, r0, #14
    20b6:	428b      	cmp	r3, r1
    20b8:	d301      	bcc.n	20be <__aeabi_uidiv+0x52>
    20ba:	038b      	lsls	r3, r1, #14
    20bc:	1ac0      	subs	r0, r0, r3
    20be:	4152      	adcs	r2, r2
    20c0:	0b43      	lsrs	r3, r0, #13
    20c2:	428b      	cmp	r3, r1
    20c4:	d301      	bcc.n	20ca <__aeabi_uidiv+0x5e>
    20c6:	034b      	lsls	r3, r1, #13
    20c8:	1ac0      	subs	r0, r0, r3
    20ca:	4152      	adcs	r2, r2
    20cc:	0b03      	lsrs	r3, r0, #12
    20ce:	428b      	cmp	r3, r1
    20d0:	d301      	bcc.n	20d6 <__aeabi_uidiv+0x6a>
    20d2:	030b      	lsls	r3, r1, #12
    20d4:	1ac0      	subs	r0, r0, r3
    20d6:	4152      	adcs	r2, r2
    20d8:	0ac3      	lsrs	r3, r0, #11
    20da:	428b      	cmp	r3, r1
    20dc:	d301      	bcc.n	20e2 <__aeabi_uidiv+0x76>
    20de:	02cb      	lsls	r3, r1, #11
    20e0:	1ac0      	subs	r0, r0, r3
    20e2:	4152      	adcs	r2, r2
    20e4:	0a83      	lsrs	r3, r0, #10
    20e6:	428b      	cmp	r3, r1
    20e8:	d301      	bcc.n	20ee <__aeabi_uidiv+0x82>
    20ea:	028b      	lsls	r3, r1, #10
    20ec:	1ac0      	subs	r0, r0, r3
    20ee:	4152      	adcs	r2, r2
    20f0:	0a43      	lsrs	r3, r0, #9
    20f2:	428b      	cmp	r3, r1
    20f4:	d301      	bcc.n	20fa <__aeabi_uidiv+0x8e>
    20f6:	024b      	lsls	r3, r1, #9
    20f8:	1ac0      	subs	r0, r0, r3
    20fa:	4152      	adcs	r2, r2
    20fc:	0a03      	lsrs	r3, r0, #8
    20fe:	428b      	cmp	r3, r1
    2100:	d301      	bcc.n	2106 <__aeabi_uidiv+0x9a>
    2102:	020b      	lsls	r3, r1, #8
    2104:	1ac0      	subs	r0, r0, r3
    2106:	4152      	adcs	r2, r2
    2108:	d2cd      	bcs.n	20a6 <__aeabi_uidiv+0x3a>
    210a:	09c3      	lsrs	r3, r0, #7
    210c:	428b      	cmp	r3, r1
    210e:	d301      	bcc.n	2114 <__aeabi_uidiv+0xa8>
    2110:	01cb      	lsls	r3, r1, #7
    2112:	1ac0      	subs	r0, r0, r3
    2114:	4152      	adcs	r2, r2
    2116:	0983      	lsrs	r3, r0, #6
    2118:	428b      	cmp	r3, r1
    211a:	d301      	bcc.n	2120 <__aeabi_uidiv+0xb4>
    211c:	018b      	lsls	r3, r1, #6
    211e:	1ac0      	subs	r0, r0, r3
    2120:	4152      	adcs	r2, r2
    2122:	0943      	lsrs	r3, r0, #5
    2124:	428b      	cmp	r3, r1
    2126:	d301      	bcc.n	212c <__aeabi_uidiv+0xc0>
    2128:	014b      	lsls	r3, r1, #5
    212a:	1ac0      	subs	r0, r0, r3
    212c:	4152      	adcs	r2, r2
    212e:	0903      	lsrs	r3, r0, #4
    2130:	428b      	cmp	r3, r1
    2132:	d301      	bcc.n	2138 <__aeabi_uidiv+0xcc>
    2134:	010b      	lsls	r3, r1, #4
    2136:	1ac0      	subs	r0, r0, r3
    2138:	4152      	adcs	r2, r2
    213a:	08c3      	lsrs	r3, r0, #3
    213c:	428b      	cmp	r3, r1
    213e:	d301      	bcc.n	2144 <__aeabi_uidiv+0xd8>
    2140:	00cb      	lsls	r3, r1, #3
    2142:	1ac0      	subs	r0, r0, r3
    2144:	4152      	adcs	r2, r2
    2146:	0883      	lsrs	r3, r0, #2
    2148:	428b      	cmp	r3, r1
    214a:	d301      	bcc.n	2150 <__aeabi_uidiv+0xe4>
    214c:	008b      	lsls	r3, r1, #2
    214e:	1ac0      	subs	r0, r0, r3
    2150:	4152      	adcs	r2, r2
    2152:	0843      	lsrs	r3, r0, #1
    2154:	428b      	cmp	r3, r1
    2156:	d301      	bcc.n	215c <__aeabi_uidiv+0xf0>
    2158:	004b      	lsls	r3, r1, #1
    215a:	1ac0      	subs	r0, r0, r3
    215c:	4152      	adcs	r2, r2
    215e:	1a41      	subs	r1, r0, r1
    2160:	d200      	bcs.n	2164 <__aeabi_uidiv+0xf8>
    2162:	4601      	mov	r1, r0
    2164:	4152      	adcs	r2, r2
    2166:	4610      	mov	r0, r2
    2168:	4770      	bx	lr
    216a:	e7ff      	b.n	216c <__aeabi_uidiv+0x100>
    216c:	b501      	push	{r0, lr}
    216e:	2000      	movs	r0, #0
    2170:	f000 f80c 	bl	218c <__aeabi_idiv0>
    2174:	bd02      	pop	{r1, pc}
    2176:	46c0      	nop			; (mov r8, r8)

00002178 <__aeabi_uidivmod>:
    2178:	2900      	cmp	r1, #0
    217a:	d0f7      	beq.n	216c <__aeabi_uidiv+0x100>
    217c:	b503      	push	{r0, r1, lr}
    217e:	f7ff ff75 	bl	206c <__aeabi_uidiv>
    2182:	bc0e      	pop	{r1, r2, r3}
    2184:	4342      	muls	r2, r0
    2186:	1a89      	subs	r1, r1, r2
    2188:	4718      	bx	r3
    218a:	46c0      	nop			; (mov r8, r8)

0000218c <__aeabi_idiv0>:
    218c:	4770      	bx	lr
    218e:	46c0      	nop			; (mov r8, r8)

00002190 <pa_anode_enable_mask>:
    2190:	0400 0000 0800 0000 0100 0000 0080 0000     ................

000021a0 <pa_cathode_enable_mask>:
	...
    21a8:	1000 0000 0200 0000 0000 0010 0000 0008     ................
    21b8:	0000 0004 0000 0002 2000 0000 0000 0001     ......... ......
    21c8:	1000 0000 0000 0000 0000 0000 0000 0010     ................
    21d8:	0200 0000 0000 0002 0000 0004 0000 0008     ................
    21e8:	0000 0001 2000 0000 0000 0000 0000 0000     ..... ..........
    21f8:	1000 0000 0200 0000 0000 0010 0000 0008     ................
    2208:	0000 0004 0000 0002 2000 0000 0000 0001     ......... ......
    2218:	1000 0000 0000 0000 0000 0000 0000 0010     ................
    2228:	0200 0000 0000 0002 0000 0004 0000 0008     ................
    2238:	0000 0001 2000 0000                         ..... ..

00002240 <pb_cathode_enable_mask>:
    2240:	0400 0000 0800 0000 0000 0000 0000 0000     ................
	...
    226c:	0800 0000 0400 0000 0000 0000 0000 0000     ................
	...
    2290:	0400 0000 0800 0000 0000 0000 0000 0000     ................
	...
    22bc:	0800 0000 0400 0000 0000 0000 0000 0000     ................
	...
    22e0:	0a0d 0a0d 3d3d 7420 4968 2d4e 3831 6420     ....== thIN-18 d
    22f0:	6265 6775 6d20 6e65 2075 3d3d 0a0d 0a0d     ebug menu ==....
    2300:	0000 0000 2943 5420 7365 2074 6163 696c     ....C) Test cali
    2310:	7262 7461 6f69 0d6e 000a 0000 2953 5320     bration.....S) S
    2320:	6c65 6365 2074 6163 696c 7262 7461 6f69     elect calibratio
    2330:	206e 6f73 7275 6563 0a0d 0000 2945 4520     n source....E) E
    2340:	616e 6c62 2f65 6964 6173 6c62 2065 5648     nable/disable HV
    2350:	4420 2f43 4344 6320 6e6f 6576 7472 7265      DC/DC converter
    2360:	0a0d 0000 2952 5220 6165 2064 5452 2043     ....R) Read RTC 
    2370:	6572 6967 7473 7265 0a0d 0000 2957 5720     register....W) W
    2380:	6972 6574 5220 4354 7220 6765 7369 6574     rite RTC registe
    2390:	0d72 000a 2931 5320 7465 3120 4830 7420     r...1) Set 10H t
    23a0:	6275 0d65 000a 0000 2932 5320 7465 3120     ube.....2) Set 1
    23b0:	2048 7574 6562 0a0d 0000 0000 2933 5320     H tube......3) S
    23c0:	7465 3120 4d30 7420 6275 0d65 000a 0000     et 10M tube.....
    23d0:	2934 5320 7465 3120 204d 7574 6562 0a0d     4) Set 1M tube..
    23e0:	0000 0000 0a0d 3e3e 0020 0000 0a0d 0000     ......>> .......
    23f0:	6944 6967 3a74 0020 6f53 7275 6563 203f     Digit: .Source? 
    2400:	3d31 7865 2c74 3020 4f3d 4353 4d38 203a     1=ext, 0=OSC8M: 
    2410:	0000 0000 6143 206c 6f6e 2074 6572 6461     ....Cal not read
    2420:	2e79 0000 0a0d 6e45 6261 656c 203f 315b     y.....Enable? [1
    2430:	302c 3a5d 0020 0000 6441 7264 7365 3a73     ,0]: ...Address:
    2440:	3020 0078 0a0d 6144 6174 203a 7830 0000      0x...Data: 0x..
    2450:	124a 0000 127c 0000 12ae 0000 12e0 0000     J...|...........
    2460:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2470:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2480:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2490:	11c2 0000 11c2 0000 134e 0000 11c2 0000     ........N.......
    24a0:	13ae 0000 11c2 0000 11c2 0000 11c2 0000     ................
    24b0:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    24c0:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    24d0:	11c2 0000 13ee 0000 1312 0000 11c2 0000     ................
    24e0:	11c2 0000 11c2 0000 145c 0000 11c2 0000     ........\.......
    24f0:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2500:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2510:	11c2 0000 11c2 0000 134e 0000 11c2 0000     ........N.......
    2520:	13ae 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2530:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2540:	11c2 0000 11c2 0000 11c2 0000 11c2 0000     ................
    2550:	11c2 0000 13ee 0000 1312 0000 11c2 0000     ................
    2560:	11c2 0000 11c2 0000 145c 0000 0043 0000     ........\...C...

00002570 <_global_impure_ptr>:
    2570:	0000 2000 3130 3332 3534 3736 3938 6261     ... 0123456789ab
    2580:	6463 6665 6867 6a69 6c6b 6e6d 706f 7271     cdefghijklmnopqr
    2590:	7473 7675 7877 7a79 0000 0000               stuvwxyz....

0000259c <_ctype_>:
    259c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    25ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
    25bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    25cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    25dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    25ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    25fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    260c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    261c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000026a0 <_init>:
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26a6:	bc08      	pop	{r3}
    26a8:	469e      	mov	lr, r3
    26aa:	4770      	bx	lr

000026ac <__init_array_start>:
    26ac:	00001f3d 	.word	0x00001f3d

000026b0 <__frame_dummy_init_array_entry>:
    26b0:	000000cd                                ....

000026b4 <_fini>:
    26b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    26ba:	bc08      	pop	{r3}
    26bc:	469e      	mov	lr, r3
    26be:	4770      	bx	lr

000026c0 <__fini_array_start>:
    26c0:	000000a5 	.word	0x000000a5
